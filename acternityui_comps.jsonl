{"source":"aceternity ui","name":"Macbook Scroll Animation", "prompt": "Generate an aceternity ui component for a MacBook scroll animation that reveals content as the user scrolls using Tailwind and React.", "completion": "```jsx\n\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { motion, useScroll, useTransform } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconBrightnessDown,\n  IconBrightnessUp,\n  IconCaretRightFilled,\n  IconCaretUpFilled,\n  IconChevronUp,\n  IconMicrophone,\n  IconMoon,\n  IconPlayerSkipForward,\n  IconPlayerTrackNext,\n  IconPlayerTrackPrev,\n  IconTable,\n  IconVolume,\n  IconVolume2,\n  IconVolume3,\n  IconSearch,\n  IconWorld,\n  IconCommand,\n  IconCaretLeftFilled,\n  IconCaretDownFilled,\n} from \"@tabler/icons-react\";\n\nexport const MacbookScroll = ({ src, showGradient, title, badge }) => {\n  const ref = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    if (window && window.innerWidth < 768) {\n      setIsMobile(true);\n    }\n  }, []);\n\n  const scaleX = useTransform(scrollYProgress, [0, 0.3], [1.2, isMobile ? 1 : 1.5]);\n  const scaleY = useTransform(scrollYProgress, [0, 0.3], [0.6, isMobile ? 1 : 1.5]);\n  const translate = useTransform(scrollYProgress, [0, 1], [0, 1500]);\n  const rotate = useTransform(scrollYProgress, [0.1, 0.12, 0.3], [-28, -28, 0]);\n  const textTransform = useTransform(scrollYProgress, [0, 0.3], [0, 100]);\n  const textOpacity = useTransform(scrollYProgress, [0, 0.2], [1, 0]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"flex min-h-[200vh] shrink-0 scale-[0.35] transform flex-col items-center justify-start py-0 [perspective:800px] sm:scale-50 md:scale-100 md:py-80\"\n    >\n      <motion.h2\n        style={{ translateY: textTransform, opacity: textOpacity }}\n        className=\"mb-20 text-center text-3xl font-bold text-neutral-800 dark:text-white\"\n      >\n        {title || (\n          <span>\n            This Macbook is built with Tailwindcss. <br /> No kidding.\n          </span>\n        )}\n      </motion.h2>\n      <Lid src={src} scaleX={scaleX} scaleY={scaleY} rotate={rotate} translate={translate} />\n      <div className=\"relative -z-10 h-[22rem] w-[32rem] overflow-hidden rounded-2xl bg-gray-200 dark:bg-[#272729]\">\n        <div className=\"relative h-10 w-full\">\n          <div className=\"absolute inset-x-0 mx-auto h-4 w-[80%] bg-[#050505]\" />\n        </div>\n        <div className=\"relative flex\">\n          <div className=\"mx-auto h-full w-[10%] overflow-hidden\">\n            <SpeakerGrid />\n          </div>\n          <div className=\"mx-auto h-full w-[80%]\">\n            <Keypad />\n          </div>\n          <div className=\"mx-auto h-full w-[10%] overflow-hidden\">\n            <SpeakerGrid />\n          </div>\n        </div>\n        <Trackpad />\n        <div className=\"absolute inset-x-0 bottom-0 mx-auto h-2 w-20 rounded-tl-3xl rounded-tr-3xl bg-gradient-to-t from-[#272729] to-[#050505]\" />\n        {showGradient && (\n          <div className=\"absolute inset-x-0 bottom-0 z-50 h-40 w-full bg-gradient-to-t from-white via-white to-transparent dark:from-black dark:via-black\"></div>\n        )}\n        {badge && <div className=\"absolute bottom-4 left-4\">{badge}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport const Lid = ({ scaleX, scaleY, rotate, translate, src }) => {\n  return (\n    <div className=\"relative [perspective:800px]\">\n      <div\n        style={{\n          transform: \"perspective(800px) rotateX(-25deg) translateZ(0px)\",\n          transformOrigin: \"bottom\",\n          transformStyle: \"preserve-3d\",\n        }}\n        className=\"relative h-[12rem] w-[32rem] rounded-2xl bg-[#010101] p-2\"\n      >\n        <div\n          style={{ boxShadow: \"0px 2px 0px 2px #171717 inset\" }}\n          className=\"absolute inset-0 flex items-center justify-center rounded-lg bg-[#010101]\"\n        >\n          <span className=\"text-white\">\n            <AceternityLogo />\n          </span>\n        </div>\n      </div>\n      <motion.div\n        style={{\n          scaleX: scaleX,\n          scaleY: scaleY,\n          rotateX: rotate,\n          translateY: translate,\n          transformStyle: \"preserve-3d\",\n          transformOrigin: \"top\",\n        }}\n        className=\"absolute inset-0 h-96 w-[32rem] rounded-2xl bg-[#010101] p-2\"\n      >\n        <div className=\"absolute inset-0 rounded-lg bg-[#272729]\" />\n        <img\n          src={src}\n          alt=\"aceternity logo\"\n          className=\"absolute inset-0 h-full w-full rounded-lg object-cover object-left-top\"\n        />\n      </motion.div>\n    </div>\n  );\n};\n\nexport const Trackpad = () => (\n  <div\n    className=\"mx-auto my-1 h-32 w-[40%] rounded-xl\"\n    style={{ boxShadow: \"0px 0px 1px 1px #00000020 inset\" }}\n  />\n);\n\nexport const SpeakerGrid = () => (\n  <div\n    className=\"mt-2 flex h-40 gap-[2px] px-[0.5px]\"\n    style={{\n      backgroundImage: \"radial-gradient(circle, #08080A 0.5px, transparent 0.5px)\",\n      backgroundSize: \"3px 3px\",\n    }}\n  />\n);\n\nexport const AceternityLogo = () => (\n  <svg\n    width=\"66\"\n    height=\"65\"\n    viewBox=\"0 0 66 65\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-3 w-3 text-white\"\n  >\n    <path\n      d=\"M8 8.05571C8 8.05571 54.9009 18.1782 57.8687 30.062C60.8365 41.9458 9.05432 57.4696 9.05432 57.4696\"\n      stroke=\"currentColor\"\n      strokeWidth=\"15\"\n      strokeMiterlimit=\"3.86874\"\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\nexport const Keypad = () => {\n  return (\n    <div className=\"mx-1 h-full [transform:translateZ(0)] rounded-md bg-[#050505] p-1 [will-change:transform]\">\n      <div className=\"mb-[2px] flex w-full shrink-0 gap-[2px]\">\n        <KBtn className=\"w-10 items-end justify-start pb-[2px] pl-[4px]\" childrenClassName=\"items-start\">\n          esc\n        </KBtn>\n        <KBtn><IconBrightnessDown className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F1</span></KBtn>\n        <KBtn><IconBrightnessUp className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F2</span></KBtn>\n        <KBtn><IconTable className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F3</span></KBtn>\n        <KBtn><IconSearch className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F4</span></KBtn>\n        <KBtn><IconMicrophone className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F5</span></KBtn>\n        <KBtn><IconMoon className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F6</span></KBtn>\n        <KBtn><IconPlayerTrackPrev className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F7</span></KBtn>\n        <KBtn><IconPlayerSkipForward className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F8</span></KBtn>\n        <KBtn><IconPlayerTrackNext className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F8</span></KBtn>\n        <KBtn><IconVolume3 className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F10</span></KBtn>\n        <KBtn><IconVolume2 className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F11</span></KBtn>\n        <KBtn><IconVolume className=\"h-[6px] w-[6px]\" /><span className=\"mt-1 inline-block\">F12</span></KBtn>\n        <KBtn>\n          <div className=\"h-4 w-4 rounded-full bg-gradient-to-b from-neutral-900 from-20% via-black via-50% to-neutral-900 to-95% p-px\">\n            <div className=\"h-full w-full rounded-full bg-black\" />\n          </div>\n        </KBtn>\n      </div>\n    </div>\n  );\n};\n\nexport const KBtn = ({ className, children, childrenClassName, backlit = true }) => {\n  return (\n    <div\n      className={cn(\n        \"[transform:translateZ(0)] rounded-[4px] p-[0.5px] [will-change:transform]\",\n        backlit && \"bg-white/[0.2] shadow-xl shadow-white\",\n      )}\n    >\n      <div\n        className={cn(\n          \"flex h-6 w-6 items-center justify-center rounded-[3.5px] bg-[#0A090D]\",\n          className,\n        )}\n        style={{\n          boxShadow: \"0px -0.5px 2px 0 #0D0D0F inset, -0.5px 0px 2px 0 #0D0D0F inset\",\n        }}\n      >\n        <div\n          className={cn(\n            \"flex w-full flex-col items-center justify-center text-[5px] text-neutral-200\",\n            childrenClassName,\n            backlit && \"text-white\",\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const OptionKey = ({ className }) => {\n  return (\n    <svg\n      fill=\"none\"\n      version=\"1.1\"\n      id=\"icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 32 32\"\n      className={className}\n    >\n      <rect stroke=\"currentColor\" strokeWidth={2} x=\"18\" y=\"5\" width=\"10\" height=\"2\" />\n      <polygon\n        stroke=\"currentColor\"\n        strokeWidth={2}\n        points=\"10.6,5 4,5 4,7 9.4,7 18.4,27 28,27 28,25 19.6,25 \"\n      />\n      <rect id=\"_Transparent_Rectangle_\" className=\"st0\" width=\"32\" height=\"32\" stroke=\"none\" />\n    </svg>\n  );\n};\n\n```", "type": "animation"}
{"source":"aceternity ui","name":"3D Tilt Card Container", "prompt": "Generate an aceternity ui component for a 3D tilt card container with animated layers that respond to mouse movement using Tailwind and React.", "completion": "```jsx\n\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, {\n  createContext,\n  useState,\n  useContext,\n  useRef,\n  useEffect,\n} from \"react\";\n\nconst MouseEnterContext = createContext(\n  /** @type {[boolean, React.Dispatch<React.SetStateAction<boolean>>] | undefined} */ (undefined)\n);\n\nexport const CardContainer = ({\n  children,\n  className,\n  containerClassName,\n}) => {\n  const containerRef = useRef(null);\n  const [isMouseEntered, setIsMouseEntered] = useState(false);\n\n  const handleMouseMove = (e) => {\n    if (!containerRef.current) return;\n    const { left, top, width, height } =\n      containerRef.current.getBoundingClientRect();\n    const x = (e.clientX - left - width / 2) / 25;\n    const y = (e.clientY - top - height / 2) / 25;\n    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${y}deg)`;\n  };\n\n  const handleMouseEnter = () => {\n    setIsMouseEntered(true);\n  };\n\n  const handleMouseLeave = () => {\n    if (!containerRef.current) return;\n    setIsMouseEntered(false);\n    containerRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`;\n  };\n\n  return (\n    <MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>\n      <div\n        className={cn(\n          \"py-20 flex items-center justify-center\",\n          containerClassName\n        )}\n        style={{\n          perspective: \"1000px\",\n        }}\n      >\n        <div\n          ref={containerRef}\n          onMouseEnter={handleMouseEnter}\n          onMouseMove={handleMouseMove}\n          onMouseLeave={handleMouseLeave}\n          className={cn(\n            \"flex items-center justify-center relative transition-all duration-200 ease-linear\",\n            className\n          )}\n          style={{\n            transformStyle: \"preserve-3d\",\n          }}\n        >\n          {children}\n        </div>\n      </div>\n    </MouseEnterContext.Provider>\n  );\n};\n\nexport const CardBody = ({ children, className }) => {\n  return (\n    <div\n      className={cn(\n        \"h-96 w-96 [transform-style:preserve-3d]  [&>*]:[transform-style:preserve-3d]\",\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const CardItem = ({\n  as: Tag = \"div\",\n  children,\n  className,\n  translateX = 0,\n  translateY = 0,\n  translateZ = 0,\n  rotateX = 0,\n  rotateY = 0,\n  rotateZ = 0,\n  ...rest\n}) => {\n  const ref = useRef(null);\n  const [isMouseEntered] = useMouseEnter();\n\n  useEffect(() => {\n    handleAnimations();\n  }, [isMouseEntered]);\n\n  const handleAnimations = () => {\n    if (!ref.current) return;\n    if (isMouseEntered) {\n      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`;\n    } else {\n      ref.current.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)`;\n    }\n  };\n\n  return (\n    <Tag\n      ref={ref}\n      className={cn(\"w-fit transition duration-200 ease-linear\", className)}\n      {...rest}\n    >\n      {children}\n    </Tag>\n  );\n};\n\nexport const useMouseEnter = () => {\n  const context = useContext(MouseEnterContext);\n  if (context === undefined) {\n    throw new Error(\"useMouseEnter must be used within a MouseEnterProvider\");\n  }\n  return context;\n};\n\n````", "type": "interactive"}
{"source":"aceternity ui","name":"Text Hover Effect","prompt":"Generate an aceternity ui component for a text hover effect using SVG gradients and animated mouse tracking with React and Motion.","completion":"```jsx\n\"use client\";\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { motion } from \"motion/react\";\n\nexport const TextHoverEffect = ({\n  text,\n  duration,\n}) => {\n  const svgRef = useRef(null);\n  const [cursor, setCursor] = useState({ x: 0, y: 0 });\n  const [hovered, setHovered] = useState(false);\n  const [maskPosition, setMaskPosition] = useState({ cx: \"50%\", cy: \"50%\" });\n\n  useEffect(() => {\n    if (svgRef.current && cursor.x !== null && cursor.y !== null) {\n      const svgRect = svgRef.current.getBoundingClientRect();\n      const cxPercentage = ((cursor.x - svgRect.left) / svgRect.width) * 100;\n      const cyPercentage = ((cursor.y - svgRect.top) / svgRect.height) * 100;\n      setMaskPosition({\n        cx: `${cxPercentage}%`,\n        cy: `${cyPercentage}%`,\n      });\n    }\n  }, [cursor]);\n\n  return (\n    <svg\n      ref={svgRef}\n      width=\"100%\"\n      height=\"100%\"\n      viewBox=\"0 0 300 100\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n      onMouseMove={(e) => setCursor({ x: e.clientX, y: e.clientY })}\n      className=\"select-none\"\n    >\n      <defs>\n        <linearGradient\n          id=\"textGradient\"\n          gradientUnits=\"userSpaceOnUse\"\n          cx=\"50%\"\n          cy=\"50%\"\n          r=\"25%\"\n        >\n          {hovered && (\n            <>\n              <stop offset=\"0%\" stopColor=\"#eab308\" />\n              <stop offset=\"25%\" stopColor=\"#ef4444\" />\n              <stop offset=\"50%\" stopColor=\"#3b82f6\" />\n              <stop offset=\"75%\" stopColor=\"#06b6d4\" />\n              <stop offset=\"100%\" stopColor=\"#8b5cf6\" />\n            </>\n          )}\n        </linearGradient>\n\n        <motion.radialGradient\n          id=\"revealMask\"\n          gradientUnits=\"userSpaceOnUse\"\n          r=\"20%\"\n          initial={{ cx: \"50%\", cy: \"50%\" }}\n          animate={maskPosition}\n          transition={{ duration: duration ?? 0, ease: \"easeOut\" }}\n        >\n          <stop offset=\"0%\" stopColor=\"white\" />\n          <stop offset=\"100%\" stopColor=\"black\" />\n        </motion.radialGradient>\n\n        <mask id=\"textMask\">\n          <rect\n            x=\"0\"\n            y=\"0\"\n            width=\"100%\"\n            height=\"100%\"\n            fill=\"url(#revealMask)\"\n          />\n        </mask>\n      </defs>\n\n      <text\n        x=\"50%\"\n        y=\"50%\"\n        textAnchor=\"middle\"\n        dominantBaseline=\"middle\"\n        strokeWidth=\"0.3\"\n        className=\"fill-transparent stroke-neutral-200 font-[helvetica] text-7xl font-bold dark:stroke-neutral-800\"\n        style={{ opacity: hovered ? 0.7 : 0 }}\n      >\n        {text}\n      </text>\n\n      <motion.text\n        x=\"50%\"\n        y=\"50%\"\n        textAnchor=\"middle\"\n        dominantBaseline=\"middle\"\n        strokeWidth=\"0.3\"\n        className=\"fill-transparent stroke-neutral-200 font-[helvetica] text-7xl font-bold dark:stroke-neutral-800\"\n        initial={{ strokeDashoffset: 1000, strokeDasharray: 1000 }}\n        animate={{\n          strokeDashoffset: 0,\n          strokeDasharray: 1000,\n        }}\n        transition={{\n          duration: 4,\n          ease: \"easeInOut\",\n        }}\n      >\n        {text}\n      </motion.text>\n\n      <text\n        x=\"50%\"\n        y=\"50%\"\n        textAnchor=\"middle\"\n        dominantBaseline=\"middle\"\n        stroke=\"url(#textGradient)\"\n        strokeWidth=\"0.3\"\n        mask=\"url(#textMask)\"\n        className=\"fill-transparent font-[helvetica] text-7xl font-bold\"\n      >\n        {text}\n      </text>\n    </svg>\n  );\n}\n\n```","type":"animation"}
{"source":"aceternity ui","name":"Animated Testimonials","prompt":"Generate an aceternity ui component for animated testimonial cards with autoplay and navigation buttons using Tailwind, Framer Motion, and React.","completion":"```jsx\n\"use client\";\n\nimport { IconArrowLeft, IconArrowRight } from \"@tabler/icons-react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { useEffect, useState } from \"react\";\n\ntype Testimonial = {\n  quote: string;\n  name: string;\n  designation: string;\n  src: string;\n};\n\nexport const AnimatedTestimonials = ({\n  testimonials,\n  autoplay = false,\n}) => {\n  const [active, setActive] = useState(0);\n\n  const handleNext = () => {\n    setActive((prev) => (prev + 1) % testimonials.length);\n  };\n\n  const handlePrev = () => {\n    setActive((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n  };\n\n  const isActive = (index) => index === active;\n\n  useEffect(() => {\n    if (autoplay) {\n      const interval = setInterval(handleNext, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [autoplay]);\n\n  const randomRotateY = () => Math.floor(Math.random() * 21) - 10;\n\n  return (\n    <div className=\"mx-auto max-w-sm px-4 py-20 font-sans antialiased md:max-w-4xl md:px-8 lg:px-12\">\n      <div className=\"relative grid grid-cols-1 gap-20 md:grid-cols-2\">\n        <div>\n          <div className=\"relative h-80 w-full\">\n            <AnimatePresence>\n              {testimonials.map((testimonial, index) => (\n                <motion.div\n                  key={testimonial.src}\n                  initial={{\n                    opacity: 0,\n                    scale: 0.9,\n                    z: -100,\n                    rotate: randomRotateY(),\n                  }}\n                  animate={{\n                    opacity: isActive(index) ? 1 : 0.7,\n                    scale: isActive(index) ? 1 : 0.95,\n                    z: isActive(index) ? 0 : -100,\n                    rotate: isActive(index) ? 0 : randomRotateY(),\n                    zIndex: isActive(index)\n                      ? 40\n                      : testimonials.length + 2 - index,\n                    y: isActive(index) ? [0, -80, 0] : 0,\n                  }}\n                  exit={{\n                    opacity: 0,\n                    scale: 0.9,\n                    z: 100,\n                    rotate: randomRotateY(),\n                  }}\n                  transition={{\n                    duration: 0.4,\n                    ease: \"easeInOut\",\n                  }}\n                  className=\"absolute inset-0 origin-bottom\"\n                >\n                  <img\n                    src={testimonial.src}\n                    alt={testimonial.name}\n                    width={500}\n                    height={500}\n                    draggable={false}\n                    className=\"h-full w-full rounded-3xl object-cover object-center\"\n                  />\n                </motion.div>\n              ))}\n            </AnimatePresence>\n          </div>\n        </div>\n        <div className=\"flex flex-col justify-between py-4\">\n          <motion.div\n            key={active}\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            exit={{ y: -20, opacity: 0 }}\n            transition={{ duration: 0.2, ease: \"easeInOut\" }}\n          >\n            <h3 className=\"text-2xl font-bold text-black dark:text-white\">\n              {testimonials[active].name}\n            </h3>\n            <p className=\"text-sm text-gray-500 dark:text-neutral-500\">\n              {testimonials[active].designation}\n            </p>\n            <motion.p className=\"mt-8 text-lg text-gray-500 dark:text-neutral-300\">\n              {testimonials[active].quote.split(\" \").map((word, index) => (\n                <motion.span\n                  key={index}\n                  initial={{\n                    filter: \"blur(10px)\",\n                    opacity: 0,\n                    y: 5,\n                  }}\n                  animate={{\n                    filter: \"blur(0px)\",\n                    opacity: 1,\n                    y: 0,\n                  }}\n                  transition={{\n                    duration: 0.2,\n                    ease: \"easeInOut\",\n                    delay: 0.02 * index,\n                  }}\n                  className=\"inline-block\"\n                >\n                  {word}&nbsp;\n                </motion.span>\n              ))}\n            </motion.p>\n          </motion.div>\n          <div className=\"flex gap-4 pt-12 md:pt-0\">\n            <button\n              onClick={handlePrev}\n              className=\"group/button flex h-7 w-7 items-center justify-center rounded-full bg-gray-100 dark:bg-neutral-800\"\n            >\n              <IconArrowLeft className=\"h-5 w-5 text-black transition-transform duration-300 group-hover/button:rotate-12 dark:text-neutral-400\" />\n            </button>\n            <button\n              onClick={handleNext}\n              className=\"group/button flex h-7 w-7 items-center justify-center rounded-full bg-gray-100 dark:bg-neutral-800\"\n            >\n              <IconArrowRight className=\"h-5 w-5 text-black transition-transform duration-300 group-hover/button:-rotate-12 dark:text-neutral-400\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n```\n","type":"animation"}
{"source":"aceternity ui","name":"Apple Cards Carousel","prompt":"Generate an aceternity ui component for an Apple-style animated card carousel with click-to-expand cards using Tailwind, Framer Motion, and React.","completion":"```jsx\n\"use client\";\nimport React, {\n  useEffect,\n  useRef,\n  useState,\n  createContext,\n  useContext,\n} from \"react\";\nimport {\n  IconArrowNarrowLeft,\n  IconArrowNarrowRight,\n  IconX,\n} from \"@tabler/icons-react\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport Image, { ImageProps } from \"next/image\";\nimport { useOutsideClick } from \"@/hooks/use-outside-click\";\n\ninterface CarouselProps {\n  items: JSX.Element[];\n  initialScroll?: number;\n}\n\ntype Card = {\n  src: string;\n  title: string;\n  category: string;\n  content: React.ReactNode;\n};\n\nexport const CarouselContext = createContext<{\n  onCardClose: (index: number) => void;\n  currentIndex: number;\n}>({\n  onCardClose: () => {},\n  currentIndex: 0,\n});\n\nexport const Carousel = ({ items, initialScroll = 0 }: CarouselProps) => {\n  const carouselRef = React.useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = React.useState(false);\n  const [canScrollRight, setCanScrollRight] = React.useState(true);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollLeft = initialScroll;\n      checkScrollability();\n    }\n  }, [initialScroll]);\n\n  const checkScrollability = () => {\n    if (carouselRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      setCanScrollLeft(scrollLeft > 0);\n      setCanScrollRight(scrollLeft < scrollWidth - clientWidth);\n    }\n  };\n\n  const scrollLeft = () => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({ left: -300, behavior: \"smooth\" });\n    }\n  };\n\n  const scrollRight = () => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({ left: 300, behavior: \"smooth\" });\n    }\n  };\n\n  const handleCardClose = (index: number) => {\n    if (carouselRef.current) {\n      const cardWidth = isMobile() ? 230 : 384; // (md:w-96)\n      const gap = isMobile() ? 4 : 8;\n      const scrollPosition = (cardWidth + gap) * (index + 1);\n      carouselRef.current.scrollTo({\n        left: scrollPosition,\n        behavior: \"smooth\",\n      });\n      setCurrentIndex(index);\n    }\n  };\n\n  const isMobile = () => {\n    return window && window.innerWidth < 768;\n  };\n\n  return (\n    <CarouselContext.Provider\n      value={{ onCardClose: handleCardClose, currentIndex }}\n    >\n      <div className=\"relative w-full\">\n        <div\n          className=\"flex w-full overflow-x-scroll overscroll-x-auto scroll-smooth py-10 [scrollbar-width:none] md:py-20\"\n          ref={carouselRef}\n          onScroll={checkScrollability}\n        >\n          <div\n            className={cn(\n              \"absolute right-0 z-[1000] h-auto w-[5%] overflow-hidden bg-gradient-to-l\",\n            )}\n          ></div>\n\n          <div\n            className={cn(\n              \"flex flex-row justify-start gap-4 pl-4\",\n              \"mx-auto max-w-7xl\", // remove max-w-4xl if you want the carousel to span the full width of its container\n            )}\n          >\n            {items.map((item, index) => (\n              <motion.div\n                initial={{\n                  opacity: 0,\n                  y: 20,\n                }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  transition: {\n                    duration: 0.5,\n                    delay: 0.2 * index,\n                    ease: \"easeOut\",\n                    once: true,\n                  },\n                }}\n                key={\"card\" + index}\n                className=\"rounded-3xl last:pr-[5%] md:last:pr-[33%]\"\n              >\n                {item}\n              </motion.div>\n            ))}\n          </div>\n        </div>\n        <div className=\"mr-10 flex justify-end gap-2\">\n          <button\n            className=\"relative z-40 flex h-10 w-10 items-center justify-center rounded-full bg-gray-100 disabled:opacity-50\"\n            onClick={scrollLeft}\n            disabled={!canScrollLeft}\n          >\n            <IconArrowNarrowLeft className=\"h-6 w-6 text-gray-500\" />\n          </button>\n          <button\n            className=\"relative z-40 flex h-10 w-10 items-center justify-center rounded-full bg-gray-100 disabled:opacity-50\"\n            onClick={scrollRight}\n            disabled={!canScrollRight}\n          >\n            <IconArrowNarrowRight className=\"h-6 w-6 text-gray-500\" />\n          </button>\n        </div>\n      </div>\n    </CarouselContext.Provider>\n  );\n};\n\nexport const Card = ({\n  card,\n  index,\n  layout = false,\n}: {\n  card: Card;\n  index: number;\n  layout?: boolean;\n}) => {\n  const [open, setOpen] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { onCardClose, currentIndex } = useContext(CarouselContext);\n\n  useEffect(() => {\n    function onKeyDown(event: KeyboardEvent) {\n      if (event.key === \"Escape\") {\n        handleClose();\n      }\n    }\n\n    if (open) {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"auto\";\n    }\n\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n  }, [open]);\n\n  useOutsideClick(containerRef, () => handleClose());\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    onCardClose(index);\n  };\n\n  return (\n    <>\n      <AnimatePresence>\n        {open && (\n          <div className=\"fixed inset-0 z-50 h-screen overflow-auto\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 h-full w-full bg-black/80 backdrop-blur-lg\"\n            />\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              ref={containerRef}\n              layoutId={layout ? `card-${card.title}` : undefined}\n              className=\"relative z-[60] mx-auto my-10 h-fit max-w-5xl rounded-3xl bg-white p-4 font-sans md:p-10 dark:bg-neutral-900\"\n            >\n              <button\n                className=\"sticky top-4 right-0 ml-auto flex h-8 w-8 items-center justify-center rounded-full bg-black dark:bg-white\"\n                onClick={handleClose}\n              >\n                <IconX className=\"h-6 w-6 text-neutral-100 dark:text-neutral-900\" />\n              </button>\n              <motion.p\n                layoutId={layout ? `category-${card.title}` : undefined}\n                className=\"text-base font-medium text-black dark:text-white\"\n              >\n                {card.category}\n              </motion.p>\n              <motion.p\n                layoutId={layout ? `title-${card.title}` : undefined}\n                className=\"mt-4 text-2xl font-semibold text-neutral-700 md:text-5xl dark:text-white\"\n              >\n                {card.title}\n              </motion.p>\n              <div className=\"py-10\">{card.content}</div>\n            </motion.div>\n          </div>\n        )}\n      </AnimatePresence>\n      <motion.button\n        layoutId={layout ? `card-${card.title}` : undefined}\n        onClick={handleOpen}\n        className=\"relative z-10 flex h-80 w-56 flex-col items-start justify-start overflow-hidden rounded-3xl bg-gray-100 md:h-[40rem] md:w-96 dark:bg-neutral-900\"\n      >\n        <div className=\"pointer-events-none absolute inset-x-0 top-0 z-30 h-full bg-gradient-to-b from-black/50 via-transparent to-transparent\" />\n        <div className=\"relative z-40 p-8\">\n          <motion.p\n            layoutId={layout ? `category-${card.category}` : undefined}\n            className=\"text-left font-sans text-sm font-medium text-white md:text-base\"\n          >\n            {card.category}\n          </motion.p>\n          <motion.p\n            layoutId={layout ? `title-${card.title}` : undefined}\n            className=\"mt-2 max-w-xs text-left font-sans text-xl font-semibold [text-wrap:balance] text-white md:text-3xl\"\n          >\n            {card.title}\n          </motion.p>\n        </div>\n        <BlurImage\n          src={card.src}\n          alt={card.title}\n          fill\n          className=\"absolute inset-0 z-10 object-cover\"\n        />\n      </motion.button>\n    </>\n  );\n};\n\nexport const BlurImage = ({\n  height,\n  width,\n  src,\n  className,\n  alt,\n  ...rest\n}: ImageProps) => {\n  const [isLoading, setLoading] = useState(true);\n  return (\n    <img\n      className={cn(\n        \"h-full w-full transition duration-300\",\n        isLoading ? \"blur-sm\" : \"blur-0\",\n        className,\n      )}\n      onLoad={() => setLoading(false)}\n      src={src as string}\n      width={width}\n      height={height}\n      loading=\"lazy\"\n      decoding=\"async\"\n      blurDataURL={typeof src === \"string\" ? src : undefined}\n      alt={alt ? alt : \"Background of a beautiful view\"}\n      {...rest}\n    />\n  );\n};\n\n```","type":"carousel"}
{"source":"aceternity ui","name":"Background Beams With Collision","prompt":"Generate an aceternity ui component that displays animated vertical beams with collision detection and explosion effects using Framer Motion and React.","completion": "```jsx\n\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport React, { useRef, useState, useEffect } from \"react\";\n\nexport const BackgroundBeamsWithCollision = ({\n  children,\n  className,\n}) => {\n  const containerRef = useRef(null);\n  const parentRef = useRef(null);\n\n  const beams = [\n    { initialX: 10, translateX: 10, duration: 7, repeatDelay: 3, delay: 2 },\n    { initialX: 600, translateX: 600, duration: 3, repeatDelay: 3, delay: 4 },\n    { initialX: 100, translateX: 100, duration: 7, repeatDelay: 7, className: \"h-6\" },\n    { initialX: 400, translateX: 400, duration: 5, repeatDelay: 14, delay: 4 },\n    { initialX: 800, translateX: 800, duration: 11, repeatDelay: 2, className: \"h-20\" },\n    { initialX: 1000, translateX: 1000, duration: 4, repeatDelay: 2, className: \"h-12\" },\n    { initialX: 1200, translateX: 1200, duration: 6, repeatDelay: 4, delay: 2, className: \"h-6\" },\n  ];\n\n  return (\n    <div\n      ref={parentRef}\n      className={cn(\n        \"h-96 md:h-[40rem] bg-gradient-to-b from-white to-neutral-100 dark:from-neutral-950 dark:to-neutral-800 relative flex items-center w-full justify-center overflow-hidden\",\n        className\n      )}\n    >\n      {beams.map((beam) => (\n        <CollisionMechanism\n          key={beam.initialX + \"beam-idx\"}\n          beamOptions={beam}\n          containerRef={containerRef}\n          parentRef={parentRef}\n        />\n      ))}\n      {children}\n      <div\n        ref={containerRef}\n        className=\"absolute bottom-0 bg-neutral-100 w-full inset-x-0 pointer-events-none\"\n        style={{\n          boxShadow:\n            \"0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nconst CollisionMechanism = React.forwardRef(({ parentRef, containerRef, beamOptions = {} }, ref) => {\n  const beamRef = useRef(null);\n  const [collision, setCollision] = useState({\n    detected: false,\n    coordinates: null,\n  });\n  const [beamKey, setBeamKey] = useState(0);\n  const [cycleCollisionDetected, setCycleCollisionDetected] = useState(false);\n\n  useEffect(() => {\n    const checkCollision = () => {\n      if (\n        beamRef.current &&\n        containerRef.current &&\n        parentRef.current &&\n        !cycleCollisionDetected\n      ) {\n        const beamRect = beamRef.current.getBoundingClientRect();\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const parentRect = parentRef.current.getBoundingClientRect();\n\n        if (beamRect.bottom >= containerRect.top) {\n          const relativeX = beamRect.left - parentRect.left + beamRect.width / 2;\n          const relativeY = beamRect.bottom - parentRect.top;\n\n          setCollision({\n            detected: true,\n            coordinates: { x: relativeX, y: relativeY },\n          });\n          setCycleCollisionDetected(true);\n        }\n      }\n    };\n\n    const animationInterval = setInterval(checkCollision, 50);\n    return () => clearInterval(animationInterval);\n  }, [cycleCollisionDetected, containerRef]);\n\n  useEffect(() => {\n    if (collision.detected && collision.coordinates) {\n      setTimeout(() => {\n        setCollision({ detected: false, coordinates: null });\n        setCycleCollisionDetected(false);\n      }, 2000);\n      setTimeout(() => {\n        setBeamKey((prevKey) => prevKey + 1);\n      }, 2000);\n    }\n  }, [collision]);\n\n  return (\n    <>\n      <motion.div\n        key={beamKey}\n        ref={beamRef}\n        animate=\"animate\"\n        initial={{\n          translateY: beamOptions.initialY || \"-200px\",\n          translateX: beamOptions.initialX || \"0px\",\n          rotate: beamOptions.rotate || 0,\n        }}\n        variants={{\n          animate: {\n            translateY: beamOptions.translateY || \"1800px\",\n            translateX: beamOptions.translateX || \"0px\",\n            rotate: beamOptions.rotate || 0,\n          },\n        }}\n        transition={{\n          duration: beamOptions.duration || 8,\n          repeat: Infinity,\n          repeatType: \"loop\",\n          ease: \"linear\",\n          delay: beamOptions.delay || 0,\n          repeatDelay: beamOptions.repeatDelay || 0,\n        }}\n        className={cn(\n          \"absolute left-0 top-20 m-auto h-14 w-px rounded-full bg-gradient-to-t from-indigo-500 via-purple-500 to-transparent\",\n          beamOptions.className\n        )}\n      />\n      <AnimatePresence>\n        {collision.detected && collision.coordinates && (\n          <Explosion\n            key={`${collision.coordinates.x}-${collision.coordinates.y}`}\n            style={{\n              left: `${collision.coordinates.x}px`,\n              top: `${collision.coordinates.y}px`,\n              transform: \"translate(-50%, -50%)\",\n            }}\n          />\n        )}\n      </AnimatePresence>\n    </>\n  );\n});\n\nCollisionMechanism.displayName = \"CollisionMechanism\";\n\nconst Explosion = ({ ...props }) => {\n  const spans = Array.from({ length: 20 }, (_, index) => ({\n    id: index,\n    initialX: 0,\n    initialY: 0,\n    directionX: Math.floor(Math.random() * 80 - 40),\n    directionY: Math.floor(Math.random() * -50 - 10),\n  }));\n\n  return (\n    <div {...props} className={cn(\"absolute z-50 h-2 w-2\", props.className)}>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 1.5, ease: \"easeOut\" }}\n        className=\"absolute -inset-x-10 top-0 m-auto h-2 w-10 rounded-full bg-gradient-to-r from-transparent via-indigo-500 to-transparent blur-sm\"\n      ></motion.div>\n      {spans.map((span) => (\n        <motion.span\n          key={span.id}\n          initial={{ x: span.initialX, y: span.initialY, opacity: 1 }}\n          animate={{ x: span.directionX, y: span.directionY, opacity: 0 }}\n          transition={{ duration: Math.random() * 1.5 + 0.5, ease: \"easeOut\" }}\n          className=\"absolute h-1 w-1 rounded-full bg-gradient-to-b from-indigo-500 to-purple-500\"\n        />\n      ))}\n    </div>\n  );\n};\n```","type":"background-animation"}
{"source":"aceternity ui","name":"Background Lines","prompt":"Generate an Aceternity UI component for animated SVG background lines using motion and Tailwind, designed to run continuously in the background of a full-page layout.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"motion/react\";\nimport React from \"react\";\n\nexport const BackgroundLines = ({\n  children,\n  className,\n  svgOptions,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  svgOptions?: {\n    duration?: number;\n  };\n}) => {\n  return (\n    <div\n      className={cn(\n        \"h-[20rem] md:h-screen w-full bg-white dark:bg-black\",\n        className\n      )}\n    >\n      <SVG svgOptions={svgOptions} />\n      {children}\n    </div>\n  );\n};\n\nconst pathVariants = {\n  initial: { strokeDashoffset: 800, strokeDasharray: \"50 800\" },\n  animate: {\n    strokeDashoffset: 0,\n    strokeDasharray: \"20 800\",\n    opacity: [0, 1, 1, 0],\n  },\n};\n\nconst SVG = ({\n  svgOptions,\n}: {\n  svgOptions?: {\n    duration?: number;\n  };\n}) => {\n  const paths = [\n    \"M720 450C720 450 742.459 440.315 755.249 425.626C768.039 410.937 778.88 418.741 789.478 401.499C800.076 384.258 817.06 389.269 826.741 380.436C836.423 371.603 851.957 364.826 863.182 356.242C874.408 347.657 877.993 342.678 898.867 333.214C919.741 323.75 923.618 319.88 934.875 310.177C946.133 300.474 960.784 300.837 970.584 287.701C980.384 274.564 993.538 273.334 1004.85 263.087C1016.15 252.84 1026.42 250.801 1038.22 242.1C1050.02 233.399 1065.19 230.418 1074.63 215.721C1084.07 201.024 1085.49 209.128 1112.65 194.884C1139.8 180.64 1132.49 178.205 1146.43 170.636C1160.37 163.066 1168.97 158.613 1181.46 147.982C1193.95 137.35 1191.16 131.382 1217.55 125.645C1243.93 119.907 1234.19 118.899 1254.53 100.846C1274.86 82.7922 1275.12 92.8914 1290.37 76.09C1305.62 59.2886 1313.91 62.1868 1323.19 56.7536C1332.48 51.3204 1347.93 42.8082 1361.95 32.1468C1375.96 21.4855 1374.06 25.168 1397.08 10.1863C1420.09 -4.79534 1421.41 -3.16992 1431.52 -15.0078\",\n    \"M720 450C720 450 741.044 435.759 753.062 410.636C765.079 385.514 770.541 386.148 782.73 370.489C794.918 354.83 799.378 353.188 811.338 332.597C823.298 312.005 825.578 306.419 843.707 295.493C861.837 284.568 856.194 273.248 877.376 256.48C898.558 239.713 887.536 227.843 909.648 214.958C931.759 202.073 925.133 188.092 941.063 177.621C956.994 167.151 952.171 154.663 971.197 135.041C990.222 115.418 990.785 109.375 999.488 96.1291C1008.19 82.8827 1011.4 82.2181 1032.65 61.8861C1053.9 41.5541 1045.74 48.0281 1064.01 19.5798C1082.29 -8.86844 1077.21 -3.89415 1093.7 -19.66C1110.18 -35.4258 1105.91 -46.1146 1127.68 -60.2834C1149.46 -74.4523 1144.37 -72.1024 1154.18 -97.6802C1163.99 -123.258 1165.6 -111.332 1186.21 -135.809C1206.81 -160.285 1203.29 -160.861 1220.31 -177.633C1237.33 -194.406 1236.97 -204.408 1250.42 -214.196\",\n    \"M720 450C720 450 712.336 437.768 690.248 407.156C668.161 376.544 672.543 394.253 665.951 365.784C659.358 337.316 647.903 347.461 636.929 323.197C625.956 298.933 626.831 303.639 609.939 281.01C593.048 258.381 598.7 255.282 582.342 242.504C565.985 229.726 566.053 217.66 559.169 197.116C552.284 176.572 549.348 171.846 529.347 156.529C509.345 141.211 522.053 134.054 505.192 115.653C488.33 97.2527 482.671 82.5627 473.599 70.7833C464.527 59.0039 464.784 50.2169 447 32.0721C429.215 13.9272 436.29 0.858563 423.534 -12.6868C410.777 -26.2322 407.424 -44.0808 394.364 -56.4916C381.303 -68.9024 373.709 -72.6804 365.591 -96.1992C357.473 -119.718 358.364 -111.509 338.222 -136.495C318.08 -161.481 322.797 -149.499 315.32 -181.761C307.843 -214.023 294.563 -202.561 285.795 -223.25C277.026 -243.94 275.199 -244.055 258.602 -263.871\",\n    \"M720 450C720 450 738.983 448.651 790.209 446.852C841.436 445.052 816.31 441.421 861.866 437.296C907.422 433.172 886.273 437.037 930.656 436.651C975.04 436.264 951.399 432.343 1001.57 425.74C1051.73 419.138 1020.72 425.208 1072.85 424.127C1124.97 423.047 1114.39 420.097 1140.02 414.426C1165.65 408.754 1173.1 412.143 1214.55 411.063C1256.01 409.983 1242.78 406.182 1285.56 401.536C1328.35 396.889 1304.66 400.796 1354.41 399.573C1404.16 398.35 1381.34 394.315 1428.34 389.376C1475.35 384.438 1445.96 386.509 1497.93 385.313C1549.9 384.117 1534.63 382.499 1567.23 381.48\",\n    \"M720 450C720 450 696.366 458.841 682.407 472.967C668.448 487.093 673.23 487.471 647.919 492.882C622.608 498.293 636.85 499.899 609.016 512.944C581.182 525.989 596.778 528.494 571.937 533.778C547.095 539.062 551.762 548.656 536.862 556.816C521.962 564.975 515.626 563.279 497.589 575.159C479.552 587.04 484.343 590.435 461.111 598.728C437.879 607.021 442.512 605.226 423.603 618.397C404.694 631.569 402.411 629.541 390.805 641.555C379.2 653.568 369.754 658.175 353.238 663.929C336.722 669.683 330.161 674.689 312.831 684.116C295.5 693.543 288.711 698.815 278.229 704.041C267.747 709.267 258.395 712.506 240.378 726.65C222.361 740.795 230.097 738.379 203.447 745.613C176.797 752.847 193.747 752.523 166.401 767.148C139.056 781.774 151.342 783.641 130.156 791.074C108.97 798.507 116.461 802.688 96.0974 808.817C75.7334 814.946 83.8553 819.505 59.4513 830.576C35.0473 841.648 48.2548 847.874 21.8337 853.886C-4.58739 859.898 10.5966 869.102 -16.396 874.524\",\n    \"M720 450C720 450 695.644 482.465 682.699 506.197C669.755 529.929 671.059 521.996 643.673 556.974C616.286 591.951 625.698 590.8 606.938 615.255C588.178 639.71 592.715 642.351 569.76 665.92C546.805 689.49 557.014 687.498 538.136 722.318C519.258 757.137 520.671 760.818 503.256 774.428C485.841 788.038 491.288 790.063 463.484 831.358C435.681 872.653 437.554 867.001 425.147 885.248C412.74 903.495 411.451 911.175 389.505 934.331C367.559 957.486 375.779 966.276 352.213 990.918C328.647 1015.56 341.908 1008.07 316.804 1047.24C291.699 1086.42 301.938 1060.92 276.644 1100.23C251.349 1139.54 259.792 1138.78 243.151 1153.64\",\n    \"M719.974 450C719.974 450 765.293 459.346 789.305 476.402C813.318 493.459 825.526 487.104 865.093 495.586C904.659 504.068 908.361 510.231 943.918 523.51C979.475 536.789 963.13 535.277 1009.79 547.428C1056.45 559.579 1062.34 555.797 1089.82 568.96C1117.31 582.124 1133.96 582.816 1159.12 592.861C1184.28 602.906 1182.84 603.359 1233.48 614.514C1284.12 625.67 1254.63 632.207 1306.33 644.465C1358.04 656.723 1359.27 656.568 1378.67 670.21C1398.07 683.852 1406.16 676.466 1456.34 692.827C1506.51 709.188 1497.73 708.471 1527.54 715.212\",\n    \"M720 450C720 450 727.941 430.821 734.406 379.251C740.87 327.681 742.857 359.402 757.864 309.798C772.871 260.194 761.947 271.093 772.992 244.308C784.036 217.524 777.105 200.533 786.808 175.699C796.511 150.864 797.141 144.333 808.694 107.307C820.247 70.2821 812.404 88.4169 819.202 37.1016C826 -14.2137 829.525 -0.990829 839.341 -30.3874C849.157 -59.784 844.404 -61.5924 855.042 -98.7516C865.68 -135.911 862.018 -144.559 876.924 -167.488C891.83 -190.418 886.075 -213.535 892.87 -237.945C899.664 -262.355 903.01 -255.031 909.701 -305.588C916.393 -356.144 917.232 -330.612 925.531 -374.777\",\n    \"M720 450C720 450 722.468 499.363 726.104 520.449C729.739 541.535 730.644 550.025 738.836 589.07C747.028 628.115 743.766 639.319 746.146 659.812C748.526 680.306 754.006 693.598 757.006 732.469C760.007 771.34 760.322 765.244 763.893 805.195C767.465 845.146 769.92 822.227 773.398 868.469C776.875 914.71 776.207 901.365 778.233 940.19C780.259 979.015 782.53 990.477 787.977 1010.39C793.424 1030.3 791.788 1060.01 797.243 1082.24C802.698 1104.47 801.758 1130.29 808.181 1149.64C814.604 1168.99 813.135 1171.5 818.026 1225.28C822.918 1279.06 820.269 1267.92 822.905 1293.75\",\n    \"M720 450C720 450 737.033 492.46 757.251 515.772C777.468 539.084 768.146 548.687 785.517 570.846C802.887 593.005 814.782 609.698 824.589 634.112C834.395 658.525 838.791 656.702 855.55 695.611C872.31 734.519 875.197 724.854 890.204 764.253C905.21 803.653 899.844 790.872 919.927 820.763C940.01 850.654 939.071 862.583 954.382 886.946C969.693 911.309 968.683 909.254 993.997 945.221C1019.31 981.187 1006.67 964.436 1023.49 1007.61C1040.32 1050.79 1046.15 1038.25 1059.01 1073.05C1071.88 1107.86 1081.39 1096.19 1089.45 1131.96C1097.51 1167.73 1106.52 1162.12 1125.77 1196.89\",\n    \"M720 450C720 450 687.302 455.326 670.489 467.898C653.676 480.47 653.159 476.959 626.58 485.127C600.002 493.295 599.626 495.362 577.94 503.841C556.254 512.319 556.35 507.426 533.958 517.44C511.566 527.454 505.82 526.441 486.464 539.172C467.108 551.904 461.312 546.36 439.357 553.508C417.402 560.657 406.993 567.736 389.393 572.603C371.794 577.47 371.139 583.76 344.54 587.931C317.941 592.102 327.375 593.682 299.411 607.275C271.447 620.868 283.617 615.022 249.868 622.622C216.119 630.223 227.07 630.86 203.77 638.635C180.47 646.41 168.948 652.487 156.407 657.28C143.866 662.073 132.426 669.534 110.894 675.555C89.3615 681.575 90.3234 680.232 61.1669 689.897C32.0105 699.562 34.3696 702.021 15.9011 709.789C-2.56738 717.558 2.38861 719.841 -29.9494 729.462C-62.2873 739.083 -52.5552 738.225 -77.4307 744.286\",\n    \"M720 450C720 450 743.97 465.061 754.884 490.648C765.798 516.235 781.032 501.34 791.376 525.115C801.72 548.889 808.417 538.333 829.306 564.807C850.195 591.281 852.336 582.531 865.086 601.843C877.835 621.155 874.512 621.773 902.383 643.857C930.255 665.94 921.885 655.976 938.025 681.74C954.164 707.505 959.384 709.719 977.273 720.525C995.162 731.33 994.233 731.096 1015.92 757.676C1037.61 784.257 1025.74 768.848 1047.82 795.343C1069.91 821.837 1065.95 815.45 1085.93 834.73C1105.91 854.009 1110.53 848.089 1124.97 869.759C1139.4 891.428 1140.57 881.585 1158.53 911.499C1176.5 941.414 1184.96 933.829 1194.53 948.792C1204.09 963.755 1221.35 973.711 1232.08 986.224C1242.8 998.738 1257.34 1015.61 1269.99 1026.53C1282.63 1037.45 1293.81 1040.91 1307.21 1064.56\",\n    \"M720 450C720 450 718.24 412.717 716.359 397.31C714.478 381.902 713.988 362.237 710.785 344.829C707.582 327.42 708.407 322.274 701.686 292.106C694.965 261.937 699.926 270.857 694.84 240.765C689.753 210.674 693.055 217.076 689.674 184.902C686.293 152.728 686.041 149.091 682.676 133.657C679.311 118.223 682.23 106.005 681.826 80.8297C681.423 55.6545 677.891 60.196 675.66 30.0226C673.429 -0.150848 672.665 -7.94842 668.592 -26.771C664.52 -45.5935 664.724 -43.0755 661.034 -78.7766C657.343 -114.478 658.509 -103.181 653.867 -133.45C649.226 -163.719 650.748 -150.38 647.052 -182.682C643.357 -214.984 646.125 -214.921 645.216 -238.402C644.307 -261.883 640.872 -253.4 637.237 -291.706C633.602 -330.012 634.146 -309.868 630.717 -343.769C627.288 -377.669 628.008 -370.682 626.514 -394.844\",\n    \"M720 450C720 450 730.384 481.55 739.215 507.557C748.047 533.564 751.618 537.619 766.222 562.033C780.825 586.447 774.187 582.307 787.606 618.195C801.025 654.082 793.116 653.536 809.138 678.315C825.16 703.095 815.485 717.073 829.898 735.518C844.311 753.964 845.351 773.196 852.197 786.599C859.042 800.001 862.876 805.65 872.809 845.974C882.742 886.297 885.179 874.677 894.963 903.246C904.747 931.816 911.787 924.243 921.827 961.809C931.867 999.374 927.557 998.784 940.377 1013.59C953.197 1028.4 948.555 1055.77 966.147 1070.54C983.739 1085.31 975.539 1105.69 988.65 1125.69C1001.76 1145.69 1001.82 1141.59 1007.54 1184.37C1013.27 1227.15 1018.98 1198.8 1029.67 1241.58\",\n    \"M720 450C720 450 684.591 447.135 657.288 439.014C629.985 430.894 618.318 435.733 600.698 431.723C583.077 427.714 566.975 425.639 537.839 423.315C508.704 420.991 501.987 418.958 476.29 413.658C450.592 408.359 460.205 410.268 416.97 408.927C373.736 407.586 396.443 401.379 359.262 396.612C322.081 391.844 327.081 393.286 300.224 391.917C273.368 390.547 264.902 385.49 241.279 382.114C217.655 378.739 205.497 378.95 181.98 377.253C158.464 375.556 150.084 369.938 117.474 366.078C84.8644 362.218 81.5401 361.501 58.8734 358.545C36.2067 355.59 33.6442 351.938 -3.92281 346.728C-41.4898 341.519 -18.6466 345.082 -61.4654 341.179C-104.284 337.275 -102.32 338.048 -121.821 332.369\",\n    \"M720 450C720 450 714.384 428.193 708.622 410.693C702.86 393.193 705.531 397.066 703.397 372.66C701.264 348.254 697.8 345.181 691.079 330.466C684.357 315.751 686.929 312.356 683.352 292.664C679.776 272.973 679.079 273.949 674.646 255.07C670.213 236.192 670.622 244.371 665.271 214.561C659.921 184.751 659.864 200.13 653.352 172.377C646.841 144.623 647.767 151.954 644.123 136.021C640.48 120.088 638.183 107.491 636.127 96.8178C634.072 86.1443 632.548 77.5871 626.743 54.0492C620.938 30.5112 622.818 28.9757 618.613 16.577C614.407 4.17831 615.555 -13.1527 608.752 -24.5691C601.95 -35.9855 603.375 -51.0511 599.526 -60.1492C595.678 -69.2472 593.676 -79.3623 587.865 -100.431C582.053 -121.5 584.628 -117.913 578.882 -139.408C573.137 -160.903 576.516 -161.693 571.966 -182.241C567.416 -202.789 567.42 -198.681 562.834 -218.28C558.248 -237.879 555.335 -240.47 552.072 -260.968C548.808 -281.466 547.605 -280.956 541.772 -296.427C535.94 -311.898 537.352 -315.211 535.128 -336.018C532.905 -356.826 531.15 -360.702 524.129 -377.124\",\n    \"M720 450C720 450 711.433 430.82 707.745 409.428C704.056 388.035 704.937 381.711 697.503 370.916C690.069 360.121 691.274 359.999 685.371 334.109C679.469 308.22 677.496 323.883 671.24 294.303C664.984 264.724 667.608 284.849 662.065 258.116C656.522 231.383 656.357 229.024 647.442 216.172C638.527 203.319 640.134 192.925 635.555 178.727C630.976 164.529 630.575 150.179 624.994 139.987C619.413 129.794 615.849 112.779 612.251 103.074C608.654 93.3696 606.942 85.6729 603.041 63.0758C599.14 40.4787 595.242 36.9267 589.533 23.8967C583.823 10.8666 581.18 -2.12401 576.96 -14.8333C572.739 -27.5425 572.696 -37.7703 568.334 -51.3441C563.972 -64.9179 562.14 -67.2124 556.992 -93.299C551.844 -119.386 550.685 -109.743 544.056 -129.801C537.428 -149.859 534.97 -151.977 531.034 -170.076C527.099 -188.175 522.979 -185.119 519.996 -207.061C517.012 -229.004 511.045 -224.126 507.478 -247.077C503.912 -270.029 501.417 -271.033 495.534 -287C489.651 -302.968 491.488 -300.977 484.68 -326.317C477.872 -351.657 476.704 -348.494 472.792 -363.258\",\n    \"M720 450C720 450 723.524 466.673 728.513 497.319C733.503 527.964 731.894 519.823 740.001 542.706C748.108 565.589 744.225 560.598 748.996 588.365C753.766 616.131 756.585 602.096 761.881 636.194C767.178 670.293 768.155 649.089 771.853 679.845C775.551 710.6 775.965 703.738 781.753 724.555C787.54 745.372 787.248 758.418 791.422 773.79C795.596 789.162 798.173 807.631 804.056 819.914C809.938 832.197 806.864 843.07 811.518 865.275C816.171 887.48 816.551 892.1 822.737 912.643C828.922 933.185 830.255 942.089 833.153 956.603C836.052 971.117 839.475 969.242 846.83 1003.98C854.185 1038.71 850.193 1028.86 854.119 1048.67C858.045 1068.48 857.963 1074.39 863.202 1094.94C868.44 1115.49 867.891 1108.03 874.497 1138.67C881.102 1169.31 880.502 1170.72 887.307 1186.56C894.111 1202.4 890.388 1209.75 896.507 1231.25C902.627 1252.76 902.54 1245.39 906.742 1279.23\",\n    \"M720 450C720 450 698.654 436.893 669.785 424.902C640.916 412.91 634.741 410.601 615.568 402.586C596.396 394.571 594.829 395.346 568.66 378.206C542.492 361.067 547.454 359.714 514.087 348.978C480.721 338.242 479.79 334.731 467.646 329.846C455.502 324.96 448.63 312.156 416.039 303.755C383.448 295.354 391.682 293.73 365.021 280.975C338.36 268.219 328.715 267.114 309.809 252.575C290.903 238.036 277.185 246.984 259.529 230.958C241.873 214.931 240.502 224.403 211.912 206.241C183.323 188.078 193.288 190.89 157.03 181.714C120.772 172.538 127.621 170.109 108.253 154.714C88.8857 139.319 75.4927 138.974 56.9647 132.314C38.4366 125.654 33.8997 118.704 4.77584 106.7C-24.348 94.6959 -19.1326 90.266 -46.165 81.9082\",\n    \"M720 450C720 450 711.596 475.85 701.025 516.114C690.455 556.378 697.124 559.466 689.441 579.079C681.758 598.693 679.099 597.524 675.382 642.732C671.665 687.94 663.4 677.024 657.844 700.179C652.288 723.333 651.086 724.914 636.904 764.536C622.723 804.158 631.218 802.853 625.414 827.056C619.611 851.259 613.734 856.28 605.94 892.262C598.146 928.244 595.403 924.314 588.884 957.785C582.364 991.255 583.079 991.176 575.561 1022.63C568.044 1054.08 566.807 1058.45 558.142 1084.32C549.476 1110.2 553.961 1129.13 542.367 1149.25C530.772 1169.37 538.268 1180.37 530.338 1207.27C522.407 1234.17 520.826 1245.53 512.156 1274.2\",\n    \"M720 450C720 450 730.571 424.312 761.424 411.44C792.277 398.569 772.385 393.283 804.069 377.232C835.752 361.182 829.975 361.373 848.987 342.782C867.999 324.192 877.583 330.096 890.892 303.897C904.201 277.698 910.277 282.253 937.396 264.293C964.514 246.333 949.357 246.834 978.7 230.438C1008.04 214.042 990.424 217.952 1021.51 193.853C1052.6 169.753 1054.28 184.725 1065.97 158.075C1077.65 131.425 1087.76 139.068 1111.12 120.345C1134.49 101.622 1124.9 104.858 1151.67 86.3162C1178.43 67.7741 1167.09 66.2676 1197.53 47.2606C1227.96 28.2536 1225.78 23.2186 1239.27 12.9649C1252.76 2.7112 1269.32 -9.47929 1282.88 -28.5587C1296.44 -47.6381 1305.81 -41.3853 1323.82 -62.7027C1341.83 -84.0202 1340.32 -82.3794 1368.98 -98.9326\",\n  ];\n\n  const colors = [\n    \"#46A5CA\",\n    \"#8C2F2F\",\n    \"#4FAE4D\",\n    \"#D6590C\",\n    \"#811010\",\n    \"#247AFB\",\n    \"#A534A0\",\n    \"#A8A438\",\n    \"#D6590C\",\n    \"#46A29C\",\n    \"#670F6D\",\n    \"#D7C200\",\n    \"#59BBEB\",\n    \"#504F1C\",\n    \"#55BC54\",\n    \"#4D3568\",\n    \"#9F39A5\",\n    \"#363636\",\n    \"#860909\",\n    \"#6A286F\",\n    \"#604483\",\n  ];\n  return (\n    <motion.svg\n      viewBox=\"0 0 1440 900\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 1 }}\n      className=\"absolute inset-0 w-full h-full\"\n    >\n      {paths.map((path, idx) => (\n        <motion.path\n          d={path}\n          stroke={colors[idx]}\n          strokeWidth=\"2.3\"\n          strokeLinecap=\"round\"\n          variants={pathVariants}\n          initial=\"initial\"\n          animate=\"animate\"\n          transition={{\n            duration: svgOptions?.duration || 10,\n            ease: \"linear\",\n            repeat: Infinity,\n            repeatType: \"loop\",\n            delay: Math.floor(Math.random() * 10),\n            repeatDelay: Math.floor(Math.random() * 10 + 2),\n          }}\n          key={`path-first-${idx}`}\n        />\n      ))}\n\n      {/* duplicate for more paths */}\n      {paths.map((path, idx) => (\n        <motion.path\n          d={path}\n          stroke={colors[idx]}\n          strokeWidth=\"2.3\"\n          strokeLinecap=\"round\"\n          variants={pathVariants}\n          initial=\"initial\"\n          animate=\"animate\"\n          transition={{\n            duration: svgOptions?.duration || 10,\n            ease: \"linear\",\n            repeat: Infinity,\n            repeatType: \"loop\",\n            delay: Math.floor(Math.random() * 10),\n            repeatDelay: Math.floor(Math.random() * 10 + 2),\n          }}\n          key={`path-second-${idx}`}\n        />\n      ))}\n    </motion.svg>\n  );\n};\n\n```","type":"animation"}
{"source":"aceternity ui","name":"Card Spotlight","prompt":"Generate an Aceternity UI component that highlights a card on hover with a spotlight and animated canvas reveal using motion and React Three Fiber.","completion":"```jsx\n\"use client\";\n\nimport { useMotionValue, motion, useMotionTemplate } from \"motion/react\";\nimport React, { MouseEvent as ReactMouseEvent, useState } from \"react\";\nimport { CanvasRevealEffect } from \"@/components/ui/canvas-reveal-effect\";\nimport { cn } from \"@/lib/utils\";\n\nexport const CardSpotlight = ({\n  children,\n  radius = 350,\n  color = \"#262626\",\n  className,\n  ...props\n}: {\n  radius?: number;\n  color?: string;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  function handleMouseMove({\n    currentTarget,\n    clientX,\n    clientY,\n  }: ReactMouseEvent<HTMLDivElement>) {\n    let { left, top } = currentTarget.getBoundingClientRect();\n\n    mouseX.set(clientX - left);\n    mouseY.set(clientY - top);\n  }\n\n  const [isHovering, setIsHovering] = useState(false);\n  const handleMouseEnter = () => setIsHovering(true);\n  const handleMouseLeave = () => setIsHovering(false);\n  return (\n    <div\n      className={cn(\n        \"group/spotlight p-10 rounded-md relative border border-neutral-800 bg-black dark:border-neutral-800\",\n        className\n      )}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <motion.div\n        className=\"pointer-events-none absolute z-0 -inset-px rounded-md opacity-0 transition duration-300 group-hover/spotlight:opacity-100\"\n        style={{\n          backgroundColor: color,\n          maskImage: useMotionTemplate`\n            radial-gradient(\n              ${radius}px circle at ${mouseX}px ${mouseY}px,\n              white,\n              transparent 80%\n            )\n          `,\n        }}\n      >\n        {isHovering && (\n          <CanvasRevealEffect\n            animationSpeed={5}\n            containerClassName=\"bg-transparent absolute inset-0 pointer-events-none\"\n            colors={[\n              [59, 130, 246],\n              [139, 92, 246],\n            ]}\n            dotSize={3}\n          />\n        )}\n      </motion.div>\n      {children}\n    </div>\n  );\n};\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport React, { useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nexport const CanvasRevealEffect = ({\n  animationSpeed = 0.4,\n  opacities = [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1],\n  colors = [[0, 255, 255]],\n  containerClassName,\n  dotSize,\n  showGradient = true,\n}: {\n  /**\n   * 0.1 - slower\n   * 1.0 - faster\n   */\n  animationSpeed?: number;\n  opacities?: number[];\n  colors?: number[][];\n  containerClassName?: string;\n  dotSize?: number;\n  showGradient?: boolean;\n}) => {\n  return (\n    <div className={cn(\"h-full relative bg-white w-full\", containerClassName)}>\n      <div className=\"h-full w-full\">\n        <DotMatrix\n          colors={colors ?? [[0, 255, 255]]}\n          dotSize={dotSize ?? 3}\n          opacities={\n            opacities ?? [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]\n          }\n          shader={`\n              float animation_speed_factor = ${animationSpeed.toFixed(1)};\n              float intro_offset = distance(u_resolution / 2.0 / u_total_size, st2) * 0.01 + (random(st2) * 0.15);\n              opacity *= step(intro_offset, u_time * animation_speed_factor);\n              opacity *= clamp((1.0 - step(intro_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\n            `}\n          center={[\"x\", \"y\"]}\n        />\n      </div>\n      {showGradient && (\n        <div className=\"absolute inset-0 bg-gradient-to-t from-gray-950 to-[84%]\" />\n      )}\n    </div>\n  );\n};\n\ninterface DotMatrixProps {\n  colors?: number[][];\n  opacities?: number[];\n  totalSize?: number;\n  dotSize?: number;\n  shader?: string;\n  center?: (\"x\" | \"y\")[];\n}\n\nconst DotMatrix: React.FC<DotMatrixProps> = ({\n  colors = [[0, 0, 0]],\n  opacities = [0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14],\n  totalSize = 4,\n  dotSize = 2,\n  shader = \"\",\n  center = [\"x\", \"y\"],\n}) => {\n  const uniforms = React.useMemo(() => {\n    let colorsArray = [\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n    ];\n    if (colors.length === 2) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[1],\n      ];\n    } else if (colors.length === 3) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[2],\n        colors[2],\n      ];\n    }\n\n    return {\n      u_colors: {\n        value: colorsArray.map((color) => [\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n        ]),\n        type: \"uniform3fv\",\n      },\n      u_opacities: {\n        value: opacities,\n        type: \"uniform1fv\",\n      },\n      u_total_size: {\n        value: totalSize,\n        type: \"uniform1f\",\n      },\n      u_dot_size: {\n        value: dotSize,\n        type: \"uniform1f\",\n      },\n    };\n  }, [colors, opacities, totalSize, dotSize]);\n\n  return (\n    <Shader\n      source={`\n        precision mediump float;\n        in vec2 fragCoord;\n\n        uniform float u_time;\n        uniform float u_opacities[10];\n        uniform vec3 u_colors[6];\n        uniform float u_total_size;\n        uniform float u_dot_size;\n        uniform vec2 u_resolution;\n        out vec4 fragColor;\n        float PHI = 1.61803398874989484820459;\n        float random(vec2 xy) {\n            return fract(tan(distance(xy * PHI, xy) * 0.5) * xy.x);\n        }\n        float map(float value, float min1, float max1, float min2, float max2) {\n            return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n        }\n        void main() {\n            vec2 st = fragCoord.xy;\n            ${\n              center.includes(\"x\")\n                ? \"st.x -= abs(floor((mod(u_resolution.x, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n            ${\n              center.includes(\"y\")\n                ? \"st.y -= abs(floor((mod(u_resolution.y, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n      float opacity = step(0.0, st.x);\n      opacity *= step(0.0, st.y);\n\n      vec2 st2 = vec2(int(st.x / u_total_size), int(st.y / u_total_size));\n\n      float frequency = 5.0;\n      float show_offset = random(st2);\n      float rand = random(st2 * floor((u_time / frequency) + show_offset + frequency) + 1.0);\n      opacity *= u_opacities[int(rand * 10.0)];\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.x / u_total_size));\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.y / u_total_size));\n\n      vec3 color = u_colors[int(show_offset * 6.0)];\n\n      ${shader}\n\n      fragColor = vec4(color, opacity);\n      fragColor.rgb *= fragColor.a;\n        }`}\n      uniforms={uniforms}\n      maxFps={60}\n    />\n  );\n};\n\ntype Uniforms = {\n  [key: string]: {\n    value: number[] | number[][] | number;\n    type: string;\n  };\n};\nconst ShaderMaterial = ({\n  source,\n  uniforms,\n  maxFps = 60,\n}: {\n  source: string;\n  hovered?: boolean;\n  maxFps?: number;\n  uniforms: Uniforms;\n}) => {\n  const { size } = useThree();\n  const ref = useRef<THREE.Mesh>();\n  let lastFrameTime = 0;\n\n  useFrame(({ clock }) => {\n    if (!ref.current) return;\n    const timestamp = clock.getElapsedTime();\n    if (timestamp - lastFrameTime < 1 / maxFps) {\n      return;\n    }\n    lastFrameTime = timestamp;\n\n    const material: any = ref.current.material;\n    const timeLocation = material.uniforms.u_time;\n    timeLocation.value = timestamp;\n  });\n\n  const getUniforms = () => {\n    const preparedUniforms: any = {};\n\n    for (const uniformName in uniforms) {\n      const uniform: any = uniforms[uniformName];\n\n      switch (uniform.type) {\n        case \"uniform1f\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1f\" };\n          break;\n        case \"uniform3f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector3().fromArray(uniform.value),\n            type: \"3f\",\n          };\n          break;\n        case \"uniform1fv\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1fv\" };\n          break;\n        case \"uniform3fv\":\n          preparedUniforms[uniformName] = {\n            value: uniform.value.map((v: number[]) =>\n              new THREE.Vector3().fromArray(v)\n            ),\n            type: \"3fv\",\n          };\n          break;\n        case \"uniform2f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector2().fromArray(uniform.value),\n            type: \"2f\",\n          };\n          break;\n        default:\n          console.error(`Invalid uniform type for '${uniformName}'.`);\n          break;\n      }\n    }\n\n    preparedUniforms[\"u_time\"] = { value: 0, type: \"1f\" };\n    preparedUniforms[\"u_resolution\"] = {\n      value: new THREE.Vector2(size.width * 2, size.height * 2),\n    }; // Initialize u_resolution\n    return preparedUniforms;\n  };\n\n  // Shader material\n  const material = useMemo(() => {\n    const materialObject = new THREE.ShaderMaterial({\n      vertexShader: `\n      precision mediump float;\n      in vec2 coordinates;\n      uniform vec2 u_resolution;\n      out vec2 fragCoord;\n      void main(){\n        float x = position.x;\n        float y = position.y;\n        gl_Position = vec4(x, y, 0.0, 1.0);\n        fragCoord = (position.xy + vec2(1.0)) * 0.5 * u_resolution;\n        fragCoord.y = u_resolution.y - fragCoord.y;\n      }\n      `,\n      fragmentShader: source,\n      uniforms: getUniforms(),\n      glslVersion: THREE.GLSL3,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneFactor,\n    });\n\n    return materialObject;\n  }, [size.width, size.height, source]);\n\n  return (\n    <mesh ref={ref as any}>\n      <planeGeometry args={[2, 2]} />\n      <primitive object={material} attach=\"material\" />\n    </mesh>\n  );\n};\n\nconst Shader: React.FC<ShaderProps> = ({ source, uniforms, maxFps = 60 }) => {\n  return (\n    <Canvas className=\"absolute inset-0  h-full w-full\">\n      <ShaderMaterial source={source} uniforms={uniforms} maxFps={maxFps} />\n    </Canvas>\n  );\n};\ninterface ShaderProps {\n  source: string;\n  uniforms: {\n    [key: string]: {\n      value: number[] | number[][] | number;\n      type: string;\n    };\n  };\n  maxFps?: number;\n}\n\n```","type":"hover interaction"}
{"source":"aceternity ui","name":"Carousel","prompt":"Generate an Aceternity UI component for an interactive image carousel with animated transitions and navigation controls using React and Tailwind.","completion":"```jsx\n\"use client\";\nimport { IconArrowNarrowRight } from \"@tabler/icons-react\";\nimport { useState, useRef, useId, useEffect } from \"react\";\n\ninterface SlideData {\n  title: string;\n  button: string;\n  src: string;\n}\n\ninterface SlideProps {\n  slide: SlideData;\n  index: number;\n  current: number;\n  handleSlideClick: (index: number) => void;\n}\n\nconst Slide = ({ slide, index, current, handleSlideClick }: SlideProps) => {\n  const slideRef = useRef<HTMLLIElement>(null);\n\n  const xRef = useRef(0);\n  const yRef = useRef(0);\n  const frameRef = useRef<number>();\n\n  useEffect(() => {\n    const animate = () => {\n      if (!slideRef.current) return;\n\n      const x = xRef.current;\n      const y = yRef.current;\n\n      slideRef.current.style.setProperty(\"--x\", `${x}px`);\n      slideRef.current.style.setProperty(\"--y\", `${y}px`);\n\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    frameRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n    };\n  }, []);\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    const el = slideRef.current;\n    if (!el) return;\n\n    const r = el.getBoundingClientRect();\n    xRef.current = event.clientX - (r.left + Math.floor(r.width / 2));\n    yRef.current = event.clientY - (r.top + Math.floor(r.height / 2));\n  };\n\n  const handleMouseLeave = () => {\n    xRef.current = 0;\n    yRef.current = 0;\n  };\n\n  const imageLoaded = (event: React.SyntheticEvent<HTMLImageElement>) => {\n    event.currentTarget.style.opacity = \"1\";\n  };\n\n  const { src, button, title } = slide;\n\n  return (\n    <div className=\"[perspective:1200px] [transform-style:preserve-3d]\">\n      <li\n        ref={slideRef}\n        className=\"flex flex-1 flex-col items-center justify-center relative text-center text-white opacity-100 transition-all duration-300 ease-in-out w-[70vmin] h-[70vmin] mx-[4vmin] z-10 \"\n        onClick={() => handleSlideClick(index)}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n        style={{\n          transform:\n            current !== index\n              ? \"scale(0.98) rotateX(8deg)\"\n              : \"scale(1) rotateX(0deg)\",\n          transition: \"transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)\",\n          transformOrigin: \"bottom\",\n        }}\n      >\n        <div\n          className=\"absolute top-0 left-0 w-full h-full bg-[#1D1F2F] rounded-[1%] overflow-hidden transition-all duration-150 ease-out\"\n          style={{\n            transform:\n              current === index\n                ? \"translate3d(calc(var(--x) / 30), calc(var(--y) / 30), 0)\"\n                : \"none\",\n          }}\n        >\n          <img\n            className=\"absolute inset-0 w-[120%] h-[120%] object-cover opacity-100 transition-opacity duration-600 ease-in-out\"\n            style={{\n              opacity: current === index ? 1 : 0.5,\n            }}\n            alt={title}\n            src={src}\n            onLoad={imageLoaded}\n            loading=\"eager\"\n            decoding=\"sync\"\n          />\n          {current === index && (\n            <div className=\"absolute inset-0 bg-black/30 transition-all duration-1000\" />\n          )}\n        </div>\n\n        <article\n          className={`relative p-[4vmin] transition-opacity duration-1000 ease-in-out ${\n            current === index ? \"opacity-100 visible\" : \"opacity-0 invisible\"\n          }`}\n        >\n          <h2 className=\"text-lg md:text-2xl lg:text-4xl font-semibold  relative\">\n            {title}\n          </h2>\n          <div className=\"flex justify-center\">\n            <button className=\"mt-6  px-4 py-2 w-fit mx-auto sm:text-sm text-black bg-white h-12 border border-transparent text-xs flex justify-center items-center rounded-2xl hover:shadow-lg transition duration-200 shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),0px_1px_0px_0px_rgba(25,28,33,0.02),0px_0px_0px_1px_rgba(25,28,33,0.08)]\">\n              {button}\n            </button>\n          </div>\n        </article>\n      </li>\n    </div>\n  );\n};\n\ninterface CarouselControlProps {\n  type: string;\n  title: string;\n  handleClick: () => void;\n}\n\nconst CarouselControl = ({\n  type,\n  title,\n  handleClick,\n}: CarouselControlProps) => {\n  return (\n    <button\n      className={`w-10 h-10 flex items-center mx-2 justify-center bg-neutral-200 dark:bg-neutral-800 border-3 border-transparent rounded-full focus:border-[#6D64F7] focus:outline-none hover:-translate-y-0.5 active:translate-y-0.5 transition duration-200 ${\n        type === \"previous\" ? \"rotate-180\" : \"\"\n      }`}\n      title={title}\n      onClick={handleClick}\n    >\n      <IconArrowNarrowRight className=\"text-neutral-600 dark:text-neutral-200\" />\n    </button>\n  );\n};\n\ninterface CarouselProps {\n  slides: SlideData[];\n}\n\nexport default function Carousel({ slides }: CarouselProps) {\n  const [current, setCurrent] = useState(0);\n\n  const handlePreviousClick = () => {\n    const previous = current - 1;\n    setCurrent(previous < 0 ? slides.length - 1 : previous);\n  };\n\n  const handleNextClick = () => {\n    const next = current + 1;\n    setCurrent(next === slides.length ? 0 : next);\n  };\n\n  const handleSlideClick = (index: number) => {\n    if (current !== index) {\n      setCurrent(index);\n    }\n  };\n\n  const id = useId();\n\n  return (\n    <div\n      className=\"relative w-[70vmin] h-[70vmin] mx-auto\"\n      aria-labelledby={`carousel-heading-${id}`}\n    >\n      <ul\n        className=\"absolute flex mx-[-4vmin] transition-transform duration-1000 ease-in-out\"\n        style={{\n          transform: `translateX(-${current * (100 / slides.length)}%)`,\n        }}\n      >\n        {slides.map((slide, index) => (\n          <Slide\n            key={index}\n            slide={slide}\n            index={index}\n            current={current}\n            handleSlideClick={handleSlideClick}\n          />\n        ))}\n      </ul>\n\n      <div className=\"absolute flex justify-center w-full top-[calc(100%+1rem)]\">\n        <CarouselControl\n          type=\"previous\"\n          title=\"Go to previous slide\"\n          handleClick={handlePreviousClick}\n        />\n\n        <CarouselControl\n          type=\"next\"\n          title=\"Go to next slide\"\n          handleClick={handleNextClick}\n        />\n      </div>\n    </div>\n  );\n}\n\n```","type":"animation"}
{"source":"aceternity ui","name":"Code Block","prompt":"Generate an Aceternity UI component for a syntax-highlighted code block with optional tabbed code views and clipboard copy functionality using Tailwind, React, and react-syntax-highlighter.","completion":"```jsx\"use client\";\nimport React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { atomDark } from \"react-syntax-highlighter/dist/cjs/styles/prism\";\nimport { IconCheck, IconCopy } from \"@tabler/icons-react\";\n\ntype CodeBlockProps = {\n  language: string;\n  filename: string;\n  highlightLines?: number[];\n} & (\n  | {\n      code: string;\n      tabs?: never;\n    }\n  | {\n      code?: never;\n      tabs: Array<{\n        name: string;\n        code: string;\n        language?: string;\n        highlightLines?: number[];\n      }>;\n    }\n);\n\nexport const CodeBlock = ({\n  language,\n  filename,\n  code,\n  highlightLines = [],\n  tabs = [],\n}: CodeBlockProps) => {\n  const [copied, setCopied] = React.useState(false);\n  const [activeTab, setActiveTab] = React.useState(0);\n\n  const tabsExist = tabs.length > 0;\n\n  const copyToClipboard = async () => {\n    const textToCopy = tabsExist ? tabs[activeTab].code : code;\n    if (textToCopy) {\n      await navigator.clipboard.writeText(textToCopy);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  const activeCode = tabsExist ? tabs[activeTab].code : code;\n  const activeLanguage = tabsExist\n    ? tabs[activeTab].language || language\n    : language;\n  const activeHighlightLines = tabsExist\n    ? tabs[activeTab].highlightLines || []\n    : highlightLines;\n\n  return (\n    <div className=\"relative w-full rounded-lg bg-slate-900 p-4 font-mono text-sm\">\n      <div className=\"flex flex-col gap-2\">\n        {tabsExist && (\n          <div className=\"flex  overflow-x-auto\">\n            {tabs.map((tab, index) => (\n              <button\n                key={index}\n                onClick={() => setActiveTab(index)}\n                className={`px-3 !py-2 text-xs transition-colors font-sans ${\n                  activeTab === index\n                    ? \"text-white\"\n                    : \"text-zinc-400 hover:text-zinc-200\"\n                }`}\n              >\n                {tab.name}\n              </button>\n            ))}\n          </div>\n        )}\n        {!tabsExist && filename && (\n          <div className=\"flex justify-between items-center py-2\">\n            <div className=\"text-xs text-zinc-400\">{filename}</div>\n            <button\n              onClick={copyToClipboard}\n              className=\"flex items-center gap-1 text-xs text-zinc-400 hover:text-zinc-200 transition-colors font-sans\"\n            >\n              {copied ? <IconCheck size={14} /> : <IconCopy size={14} />}\n            </button>\n          </div>\n        )}\n      </div>\n      <SyntaxHighlighter\n        language={activeLanguage}\n        style={atomDark}\n        customStyle={{\n          margin: 0,\n          padding: 0,\n          background: \"transparent\",\n          fontSize: \"0.875rem\", // text-sm equivalent\n        }}\n        wrapLines={true}\n        showLineNumbers={true}\n        lineProps={(lineNumber) => ({\n          style: {\n            backgroundColor: activeHighlightLines.includes(lineNumber)\n              ? \"rgba(255,255,255,0.1)\"\n              : \"transparent\",\n            display: \"block\",\n            width: \"100%\",\n          },\n        })}\n        PreTag=\"div\"\n      >\n        {String(activeCode)}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n```","type":"code"}
{"source":"aceternity ui","name":"Colourful Text","prompt":"Generate an Aceternity UI component for animated colourful text where each letter changes color and animates individually using React and motion.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\n\nexport default function ColourfulText({ text }: { text: string }) {\n  const colors = [\n    \"rgb(131, 179, 32)\",\n    \"rgb(47, 195, 106)\",\n    \"rgb(42, 169, 210)\",\n    \"rgb(4, 112, 202)\",\n    \"rgb(107, 10, 255)\",\n    \"rgb(183, 0, 218)\",\n    \"rgb(218, 0, 171)\",\n    \"rgb(230, 64, 92)\",\n    \"rgb(232, 98, 63)\",\n    \"rgb(249, 129, 47)\",\n  ];\n\n  const [currentColors, setCurrentColors] = React.useState(colors);\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      const shuffled = [...colors].sort(() => Math.random() - 0.5);\n      setCurrentColors(shuffled);\n      setCount((prev) => prev + 1);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return text.split(\"\").map((char, index) => (\n    <motion.span\n      key={`${char}-${count}-${index}`}\n      initial={{\n        y: 0,\n      }}\n      animate={{\n        color: currentColors[index % currentColors.length],\n        y: [0, -3, 0],\n        scale: [1, 1.01, 1],\n        filter: [\"blur(0px)\", `blur(5px)`, \"blur(0px)\"],\n        opacity: [1, 0.8, 1],\n      }}\n      transition={{\n        duration: 0.5,\n        delay: index * 0.05,\n      }}\n      className=\"inline-block whitespace-pre font-sans tracking-tight\"\n    >\n      {char}\n    </motion.span>\n  ));\n}\n\n```","type":"text animation"}
{"source":"aceternity ui","name":"Compare + Sparkles","prompt": "Generate an Aceternity UI component that allows users to compare two images using a draggable or hover-based slider with animated effects, combined with a reusable sparkle particle animation background using tsparticles and motion.","completion": "```jsx\n\"use client\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { SparklesCore } from \"@/components/ui/sparkles\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { IconDotsVertical } from \"@tabler/icons-react\";\n\ninterface CompareProps {\n  firstImage?: string;\n  secondImage?: string;\n  className?: string;\n  firstImageClassName?: string;\n  secondImageClassname?: string;\n  initialSliderPercentage?: number;\n  slideMode?: \"hover\" | \"drag\";\n  showHandlebar?: boolean;\n  autoplay?: boolean;\n  autoplayDuration?: number;\n}\nexport const Compare = ({\n  firstImage = \"\",\n  secondImage = \"\",\n  className,\n  firstImageClassName,\n  secondImageClassname,\n  initialSliderPercentage = 50,\n  slideMode = \"hover\",\n  showHandlebar = true,\n  autoplay = false,\n  autoplayDuration = 5000,\n}: CompareProps) => {\n  const [sliderXPercent, setSliderXPercent] = useState(initialSliderPercentage);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const [isMouseOver, setIsMouseOver] = useState(false);\n\n  const autoplayRef = useRef<NodeJS.Timeout | null>(null);\n\n  const startAutoplay = useCallback(() => {\n    if (!autoplay) return;\n\n    const startTime = Date.now();\n    const animate = () => {\n      const elapsedTime = Date.now() - startTime;\n      const progress =\n        (elapsedTime % (autoplayDuration * 2)) / autoplayDuration;\n      const percentage = progress <= 1 ? progress * 100 : (2 - progress) * 100;\n\n      setSliderXPercent(percentage);\n      autoplayRef.current = setTimeout(animate, 16); // ~60fps\n    };\n\n    animate();\n  }, [autoplay, autoplayDuration]);\n\n  const stopAutoplay = useCallback(() => {\n    if (autoplayRef.current) {\n      clearTimeout(autoplayRef.current);\n      autoplayRef.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    startAutoplay();\n    return () => stopAutoplay();\n  }, [startAutoplay, stopAutoplay]);\n\n  function mouseEnterHandler() {\n    setIsMouseOver(true);\n    stopAutoplay();\n  }\n\n  function mouseLeaveHandler() {\n    setIsMouseOver(false);\n    if (slideMode === \"hover\") {\n      setSliderXPercent(initialSliderPercentage);\n    }\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n    startAutoplay();\n  }\n\n  const handleStart = useCallback(\n    (clientX: number) => {\n      if (slideMode === \"drag\") {\n        setIsDragging(true);\n      }\n    },\n    [slideMode]\n  );\n\n  const handleEnd = useCallback(() => {\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n  }, [slideMode]);\n\n  const handleMove = useCallback(\n    (clientX: number) => {\n      if (!sliderRef.current) return;\n      if (slideMode === \"hover\" || (slideMode === \"drag\" && isDragging)) {\n        const rect = sliderRef.current.getBoundingClientRect();\n        const x = clientX - rect.left;\n        const percent = (x / rect.width) * 100;\n        requestAnimationFrame(() => {\n          setSliderXPercent(Math.max(0, Math.min(100, percent)));\n        });\n      }\n    },\n    [slideMode, isDragging]\n  );\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => handleStart(e.clientX),\n    [handleStart]\n  );\n  const handleMouseUp = useCallback(() => handleEnd(), [handleEnd]);\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent) => handleMove(e.clientX),\n    [handleMove]\n  );\n\n  const handleTouchStart = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleStart(e.touches[0].clientX);\n      }\n    },\n    [handleStart, autoplay]\n  );\n\n  const handleTouchEnd = useCallback(() => {\n    if (!autoplay) {\n      handleEnd();\n    }\n  }, [handleEnd, autoplay]);\n\n  const handleTouchMove = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleMove(e.touches[0].clientX);\n      }\n    },\n    [handleMove, autoplay]\n  );\n\n  return (\n    <div\n      ref={sliderRef}\n      className={cn(\"w-[400px] h-[400px] overflow-hidden\", className)}\n      style={{\n        position: \"relative\",\n        cursor: slideMode === \"drag\" ? \"grab\" : \"col-resize\",\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={mouseLeaveHandler}\n      onMouseEnter={mouseEnterHandler}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n    >\n      <AnimatePresence initial={false}>\n        <motion.div\n          className=\"h-full w-px absolute top-0 m-auto z-30 bg-gradient-to-b from-transparent from-[5%] to-[95%] via-indigo-500 to-transparent\"\n          style={{\n            left: `${sliderXPercent}%`,\n            top: \"0\",\n            zIndex: 40,\n          }}\n          transition={{ duration: 0 }}\n        >\n          <div className=\"w-36 h-full [mask-image:radial-gradient(100px_at_left,white,transparent)] absolute top-1/2 -translate-y-1/2 left-0 bg-gradient-to-r from-indigo-400 via-transparent to-transparent z-20 opacity-50\" />\n          <div className=\"w-10 h-1/2 [mask-image:radial-gradient(50px_at_left,white,transparent)] absolute top-1/2 -translate-y-1/2 left-0 bg-gradient-to-r from-cyan-400 via-transparent to-transparent z-10 opacity-100\" />\n          <div className=\"w-10 h-3/4 top-1/2 -translate-y-1/2 absolute -right-10 [mask-image:radial-gradient(100px_at_left,white,transparent)]\">\n            <MemoizedSparklesCore\n              background=\"transparent\"\n              minSize={0.4}\n              maxSize={1}\n              particleDensity={1200}\n              className=\"w-full h-full\"\n              particleColor=\"#FFFFFF\"\n            />\n          </div>\n          {showHandlebar && (\n            <div className=\"h-5 w-5 rounded-md top-1/2 -translate-y-1/2 bg-white z-30 -right-2.5 absolute   flex items-center justify-center shadow-[0px_-1px_0px_0px_#FFFFFF40]\">\n              <IconDotsVertical className=\"h-4 w-4 text-black\" />\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n      <div className=\"overflow-hidden w-full h-full relative z-20 pointer-events-none\">\n        <AnimatePresence initial={false}>\n          {firstImage ? (\n            <motion.div\n              className={cn(\n                \"absolute inset-0 z-20 rounded-2xl shrink-0 w-full h-full select-none overflow-hidden\",\n                firstImageClassName\n              )}\n              style={{\n                clipPath: `inset(0 ${100 - sliderXPercent}% 0 0)`,\n              }}\n              transition={{ duration: 0 }}\n            >\n              <img\n                alt=\"first image\"\n                src={firstImage}\n                className={cn(\n                  \"absolute inset-0  z-20 rounded-2xl shrink-0 w-full h-full select-none\",\n                  firstImageClassName\n                )}\n                draggable={false}\n              />\n            </motion.div>\n          ) : null}\n        </AnimatePresence>\n      </div>\n\n      <AnimatePresence initial={false}>\n        {secondImage ? (\n          <motion.img\n            className={cn(\n              \"absolute top-0 left-0 z-[19]  rounded-2xl w-full h-full select-none\",\n              secondImageClassname\n            )}\n            alt=\"second image\"\n            src={secondImage}\n            draggable={false}\n          />\n        ) : null}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nconst MemoizedSparklesCore=React.memo(SparklesCore);\n\"use client\";\nimport React,{ useId, useMemo }from\"react\";\nimport{useEffect,useState}from\"react\";\nimport Particles,{initParticlesEngine}from\"@tsparticles/react\";\nimport type { Container, SingleOrMultiple } from \"@tsparticles/engine\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"motion/react\";\n\ntype ParticlesProps = {\n  id?: string;\n  className?: string;\n  background?: string;\n  particleSize?: number;\n  minSize?: number;\n  maxSize?: number;\n  speed?: number;\n  particleColor?: string;\n  particleDensity?: number;\n};\nexport const SparklesCore = (props: ParticlesProps) => {\n  const {\n    id,\n    className,\n    background,\n    minSize,\n    maxSize,\n    speed,\n    particleColor,\n    particleDensity,\n  } = props;\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      await loadSlim(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const controls = useAnimation();\n\n  const particlesLoaded = async (container?: Container) => {\n    if (container) {\n      controls.start({\n        opacity: 1,\n        transition: {\n          duration: 1,\n        },\n      });\n    }\n  };\n\n  const generatedId = useId();\n  return (\n    <motion.div animate={controls} className={cn(\"opacity-0\", className)}>\n      {init && (\n        <Particles\n          id={id || generatedId}\n          className={cn(\"h-full w-full\")}\n          particlesLoaded={particlesLoaded}\n          options={{\n            background: {\n              color: {\n                value: background || \"#0d47a1\",\n              },\n            },\n            fullScreen: {\n              enable: false,\n              zIndex: 1,\n            },\n\n            fpsLimit: 120,\n            interactivity: {\n              events: {\n                onClick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n                onHover: {\n                  enable: false,\n                  mode: \"repulse\",\n                },\n                resize: true as any,\n              },\n              modes: {\n                push: {\n                  quantity: 4,\n                },\n                repulse: {\n                  distance: 200,\n                  duration: 0.4,\n                },\n              },\n            },\n            particles: {\n              bounce: {\n                horizontal: {\n                  value: 1,\n                },\n                vertical: {\n                  value: 1,\n                },\n              },\n              collisions: {\n                absorb: {\n                  speed: 2,\n                },\n                bounce: {\n                  horizontal: {\n                    value: 1,\n                  },\n                  vertical: {\n                    value: 1,\n                  },\n                },\n                enable: false,\n                maxSpeed: 50,\n                mode: \"bounce\",\n                overlap: {\n                  enable: true,\n                  retries: 0,\n                },\n              },\n              color: {\n                value: particleColor || \"#ffffff\",\n                animation: {\n                  h: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  s: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  l: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                },\n              },\n              effect: {\n                close: true,\n                fill: true,\n                options: {},\n                type: {} as SingleOrMultiple<string> | undefined,\n              },\n              groups: {},\n              move: {\n                angle: {\n                  offset: 0,\n                  value: 90,\n                },\n                attract: {\n                  distance: 200,\n                  enable: false,\n                  rotate: {\n                    x: 3000,\n                    y: 3000,\n                  },\n                },\n                center: {\n                  x: 50,\n                  y: 50,\n                  mode: \"percent\",\n                  radius: 0,\n                },\n                decay: 0,\n                distance: {},\n                direction: \"none\",\n                drift: 0,\n                enable: true,\n                gravity: {\n                  acceleration: 9.81,\n                  enable: false,\n                  inverse: false,\n                  maxSpeed: 50,\n                },\n                path: {\n                  clamp: true,\n                  delay: {\n                    value: 0,\n                  },\n                  enable: false,\n                  options: {},\n                },\n                outModes: {\n                  default: \"out\",\n                },\n                random: false,\n                size: false,\n                speed: {\n                  min: 0.1,\n                  max: 1,\n                },\n                spin: {\n                  acceleration: 0,\n                  enable: false,\n                },\n                straight: false,\n                trail: {\n                  enable: false,\n                  length: 10,\n                  fill: {},\n                },\n                vibrate: false,\n                warp: false,\n              },\n              number: {\n                density: {\n                  enable: true,\n                  width: 400,\n                  height: 400,\n                },\n                limit: {\n                  mode: \"delete\",\n                  value: 0,\n                },\n                value: particleDensity || 120,\n              },\n              opacity: {\n                value: {\n                  min: 0.1,\n                  max: 1,\n                },\n                animation: {\n                  count: 0,\n                  enable: true,\n                  speed: speed || 4,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              reduceDuplicates: false,\n              shadow: {\n                blur: 0,\n                color: {\n                  value: \"#000\",\n                },\n                enable: false,\n                offset: {\n                  x: 0,\n                  y: 0,\n                },\n              },\n              shape: {\n                close: true,\n                fill: true,\n                options: {},\n                type: \"circle\",\n              },\n              size: {\n                value: {\n                  min: minSize || 1,\n                  max: maxSize || 3,\n                },\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 5,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              stroke: {\n                width: 0,\n              },\n              zIndex: {\n                value: 0,\n                opacityRate: 1,\n                sizeRate: 1,\n                velocityRate: 1,\n              },\n              destroy: {\n                bounds: {},\n                mode: \"none\",\n                split: {\n                  count: 1,\n                  factor: {\n                    value: 3,\n                  },\n                  rate: {\n                    value: {\n                      min: 4,\n                      max: 9,\n                    },\n                  },\n                  sizeOffset: true,\n                },\n              },\n              roll: {\n                darken: {\n                  enable: false,\n                  value: 0,\n                },\n                enable: false,\n                enlighten: {\n                  enable: false,\n                  value: 0,\n                },\n                mode: \"vertical\",\n                speed: 25,\n              },\n              tilt: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                enable: false,\n              },\n              twinkle: {\n                lines: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n                particles: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n              },\n              wobble: {\n                distance: 5,\n                enable: false,\n                speed: {\n                  angle: 50,\n                  move: 10,\n                },\n              },\n              life: {\n                count: 0,\n                delay: {\n                  value: 0,\n                  sync: false,\n                },\n                duration: {\n                  value: 0,\n                  sync: false,\n                },\n              },\n              rotate: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                path: false,\n              },\n              orbit: {\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 1,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                },\n                enable: false,\n                opacity: 1,\n                rotation: {\n                  value: 45,\n                },\n                width: 1,\n              },\n              links: {\n                blink: false,\n                color: {\n                  value: \"#fff\",\n                },\n                consent: false,\n                distance: 100,\n                enable: false,\n                frequency: 1,\n                opacity: 1,\n                shadow: {\n                  blur: 5,\n                  color: {\n                    value: \"#000\",\n                  },\n                  enable: false,\n                },\n                triangles: {\n                  enable: false,\n                  frequency: 1,\n},\nwidth: 1,\n                warp: false,\n              },\n              repulse: {\n                value: 0,\n                enabled: false,\n                distance: 1,\n                duration: 1,\n                factor: 1,\n                speed: 1,\n              },\n            },\n            detectRetina: true,\n          }}\n        />\n      )}\n    </motion.div>\n  );\n};\n\n```","type": "animation + image-comparison"}
{"source":"aceternity ui","name":"cover","prompt": "Generate an Aceternity UI component that reveals animated sparkle effects and dynamic beam lines when hovered over, using Tailwind, React, tsparticles, and motion libraries.","completion": "```jsx\n\"use client\";\nimport React, { useEffect, useId, useState } from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { SparklesCore } from \"@/components/ui/sparkles\";\n\nexport const Cover = ({\n  children,\n  className,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  const [hovered, setHovered] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [beamPositions, setBeamPositions] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (ref.current) {\n      setContainerWidth(ref.current?.clientWidth ?? 0);\n\n      const height = ref.current?.clientHeight ?? 0;\n      const numberOfBeams = Math.floor(height / 10); // Adjust the divisor to control the spacing\n      const positions = Array.from(\n        { length: numberOfBeams },\n        (_, i) => (i + 1) * (height / (numberOfBeams + 1))\n      );\n      setBeamPositions(positions);\n    }\n  }, [ref.current]);\n\n  return (\n    <div\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n      ref={ref}\n      className=\"relative hover:bg-neutral-900  group/cover inline-block dark:bg-neutral-900 bg-neutral-100 px-2 py-2  transition duration-200 rounded-sm\"\n    >\n      <AnimatePresence>\n        {hovered && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{\n              opacity: {\n                duration: 0.2,\n              },\n            }}\n            className=\"h-full w-full overflow-hidden absolute inset-0\"\n          >\n            <motion.div\n              animate={{\n                translateX: [\"-50%\", \"0%\"],\n              }}\n              transition={{\n                translateX: {\n                  duration: 10,\n                  ease: \"linear\",\n                  repeat: Infinity,\n                },\n              }}\n              className=\"w-[200%] h-full flex\"\n            >\n              <SparklesCore\n                background=\"transparent\"\n                minSize={0.4}\n                maxSize={1}\n                particleDensity={500}\n                className=\"w-full h-full\"\n                particleColor=\"#FFFFFF\"\n              />\n              <SparklesCore\n                background=\"transparent\"\n                minSize={0.4}\n                maxSize={1}\n                particleDensity={500}\n                className=\"w-full h-full\"\n                particleColor=\"#FFFFFF\"\n              />\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      {beamPositions.map((position, index) => (\n        <Beam\n          key={index}\n          hovered={hovered}\n          duration={Math.random() * 2 + 1}\n          delay={Math.random() * 2 + 1}\n          width={containerWidth}\n          style={{\n            top: `${position}px`,\n          }}\n        />\n      ))}\n      <motion.span\n        key={String(hovered)}\n        animate={{\n          scale: hovered ? 0.8 : 1,\n          x: hovered ? [0, -30, 30, -30, 30, 0] : 0,\n          y: hovered ? [0, 30, -30, 30, -30, 0] : 0,\n        }}\n        exit={{\n          filter: \"none\",\n          scale: 1,\n          x: 0,\n          y: 0,\n        }}\n        transition={{\n          duration: 0.2,\n          x: {\n            duration: 0.2,\n            repeat: Infinity,\n            repeatType: \"loop\",\n          },\n          y: {\n            duration: 0.2,\n            repeat: Infinity,\n            repeatType: \"loop\",\n          },\n          scale: {\n            duration: 0.2,\n          },\n          filter: {\n            duration: 0.2,\n          },\n        }}\n        className={cn(\n          \"dark:text-white inline-block text-neutral-900 relative z-20 group-hover/cover:text-white transition duration-200\",\n          className\n        )}\n      >\n        {children}\n      </motion.span>\n      <CircleIcon className=\"absolute -right-[2px] -top-[2px]\" />\n      <CircleIcon className=\"absolute -bottom-[2px] -right-[2px]\" delay={0.4} />\n      <CircleIcon className=\"absolute -left-[2px] -top-[2px]\" delay={0.8} />\n      <CircleIcon className=\"absolute -bottom-[2px] -left-[2px]\" delay={1.6} />\n    </div>\n  );\n};\n\nexport const Beam = ({\n  className,\n  delay,\n  duration,\n  hovered,\n  width = 600,\n  ...svgProps\n}: {\n  className?: string;\n  delay?: number;\n  duration?: number;\n  hovered?: boolean;\n  width?: number;\n} & React.ComponentProps<typeof motion.svg>) => {\n  const id = useId();\n\n  return (\n    <motion.svg\n      width={width ?? \"600\"}\n      height=\"1\"\n      viewBox={`0 0 ${width ?? \"600\"} 1`}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"absolute inset-x-0 w-full\", className)}\n      {...svgProps}\n    >\n      <motion.path\n        d={`M0 0.5H${width ?? \"600\"}`}\n        stroke={`url(#svgGradient-${id})`}\n      />\n\n      <defs>\n        <motion.linearGradient\n          id={`svgGradient-${id}`}\n          key={String(hovered)}\n          gradientUnits=\"userSpaceOnUse\"\n          initial={{\n            x1: \"0%\",\n            x2: hovered ? \"-10%\" : \"-5%\",\n            y1: 0,\n            y2: 0,\n          }}\n          animate={{\n            x1: \"110%\",\n            x2: hovered ? \"100%\" : \"105%\",\n            y1: 0,\n            y2: 0,\n          }}\n          transition={{\n            duration: hovered ? 0.5 : duration ?? 2,\n            ease: \"linear\",\n            repeat: Infinity,\n            delay: hovered ? Math.random() * (1 - 0.2) + 0.2 : 0,\n            repeatDelay: hovered ? Math.random() * (2 - 1) + 1 : delay ?? 1,\n          }}\n        >\n          <stop stopColor=\"#2EB9DF\" stopOpacity=\"0\" />\n          <stop stopColor=\"#3b82f6\" />\n          <stop offset=\"1\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n        </motion.linearGradient>\n      </defs>\n    </motion.svg>\n  );\n};\n\nexport const CircleIcon = ({\n  className,\n  delay,\n}: {\n  className?: string;\n  delay?: number;\n}) => {\n  return (\n    <div\n      className={cn(\n        `pointer-events-none animate-pulse group-hover/cover:hidden group-hover/cover:opacity-100 group h-2 w-2 rounded-full bg-neutral-600 dark:bg-white opacity-20 group-hover/cover:bg-white`,\n        className\n      )}\n    ></div>\n  );\n};\n\n\"use client\";\nimport React, { useId, useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport type { Container, SingleOrMultiple } from \"@tsparticles/engine\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"motion/react\";\n\ntype ParticlesProps = {\n  id?: string;\n  className?: string;\n  background?: string;\n  particleSize?: number;\n  minSize?: number;\n  maxSize?: number;\n  speed?: number;\n  particleColor?: string;\n  particleDensity?: number;\n};\nexport const SparklesCore = (props: ParticlesProps) => {\n  const {\n    id,\n    className,\n    background,\n    minSize,\n    maxSize,\n    speed,\n    particleColor,\n    particleDensity,\n  } = props;\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      await loadSlim(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const controls = useAnimation();\n\n  const particlesLoaded = async (container?: Container) => {\n    if (container) {\n      controls.start({\n        opacity: 1,\n        transition: {\n          duration: 1,\n        },\n      });\n    }\n  };\n\n  const generatedId = useId();\n  return (\n    <motion.div animate={controls} className={cn(\"opacity-0\", className)}>\n      {init && (\n        <Particles\n          id={id || generatedId}\n          className={cn(\"h-full w-full\")}\n          particlesLoaded={particlesLoaded}\n          options={{\n            background: {\n              color: {\n                value: background || \"#0d47a1\",\n              },\n            },\n            fullScreen: {\n              enable: false,\n              zIndex: 1,\n            },\n\n            fpsLimit: 120,\n            interactivity: {\n              events: {\n                onClick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n                onHover: {\n                  enable: false,\n                  mode: \"repulse\",\n                },\n                resize: true as any,\n              },\n              modes: {\n                push: {\n                  quantity: 4,\n                },\n                repulse: {\n                  distance: 200,\n                  duration: 0.4,\n                },\n              },\n            },\n            particles: {\n              bounce: {\n                horizontal: {\n                  value: 1,\n                },\n                vertical: {\n                  value: 1,\n                },\n              },\n              collisions: {\n                absorb: {\n                  speed: 2,\n                },\n                bounce: {\n                  horizontal: {\n                    value: 1,\n                  },\n                  vertical: {\n                    value: 1,\n                  },\n                },\n                enable: false,\n                maxSpeed: 50,\n                mode: \"bounce\",\n                overlap: {\n                  enable: true,\n                  retries: 0,\n                },\n              },\n              color: {\n                value: particleColor || \"#ffffff\",\n                animation: {\n                  h: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  s: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  l: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                },\n              },\n              effect: {\n                close: true,\n                fill: true,\n                options: {},\n                type: {} as SingleOrMultiple<string> | undefined,\n              },\n              groups: {},\n              move: {\n                angle: {\n                  offset: 0,\n                  value: 90,\n                },\n                attract: {\n                  distance: 200,\n                  enable: false,\n                  rotate: {\n                    x: 3000,\n                    y: 3000,\n                  },\n                },\n                center: {\n                  x: 50,\n                  y: 50,\n                  mode: \"percent\",\n                  radius: 0,\n                },\n                decay: 0,\n                distance: {},\n                direction: \"none\",\n                drift: 0,\n                enable: true,\n                gravity: {\n                  acceleration: 9.81,\n                  enable: false,\n                  inverse: false,\n                  maxSpeed: 50,\n                },\n                path: {\n                  clamp: true,\n                  delay: {\n                    value: 0,\n                  },\n                  enable: false,\n                  options: {},\n                },\n                outModes: {\n                  default: \"out\",\n                },\n                random: false,\n                size: false,\n                speed: {\n                  min: 0.1,\n                  max: 1,\n                },\n                spin: {\n                  acceleration: 0,\n                  enable: false,\n                },\n                straight: false,\n                trail: {\n                  enable: false,\n                  length: 10,\n                  fill: {},\n                },\n                vibrate: false,\n                warp: false,\n              },\n              number: {\n                density: {\n                  enable: true,\n                  width: 400,\n                  height: 400,\n                },\n                limit: {\n                  mode: \"delete\",\n                  value: 0,\n                },\n                value: particleDensity || 120,\n              },\n              opacity: {\n                value: {\n                  min: 0.1,\n                  max: 1,\n                },\n                animation: {\n                  count: 0,\n                  enable: true,\n                  speed: speed || 4,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              reduceDuplicates: false,\n              shadow: {\n                blur: 0,\n                color: {\n                  value: \"#000\",\n                },\n                enable: false,\n                offset: {\n                  x: 0,\n                  y: 0,\n                },\n              },\n              shape: {\n                close: true,\n                fill: true,\n                options: {},\n                type: \"circle\",\n              },\n              size: {\n                value: {\n                  min: minSize || 1,\n                  max: maxSize || 3,\n                },\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 5,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              stroke: {\n                width: 0,\n              },\n              zIndex: {\n                value: 0,\n                opacityRate: 1,\n                sizeRate: 1,\n                velocityRate: 1,\n              },\n              destroy: {\n                bounds: {},\n                mode: \"none\",\n                split: {\n                  count: 1,\n                  factor: {\n                    value: 3,\n                  },\n                  rate: {\n                    value: {\n                      min: 4,\n                      max: 9,\n                    },\n                  },\n                  sizeOffset: true,\n                },\n              },\n              roll: {\n                darken: {\n                  enable: false,\n                  value: 0,\n                },\n                enable: false,\n                enlighten: {\n                  enable: false,\n                  value: 0,\n                },\n                mode: \"vertical\",\n                speed: 25,\n              },\n              tilt: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                enable: false,\n              },\n              twinkle: {\n                lines: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n                particles: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n              },\n              wobble: {\n                distance: 5,\n                enable: false,\n                speed: {\n                  angle: 50,\n                  move: 10,\n                },\n              },\n              life: {\n                count: 0,\n                delay: {\n                  value: 0,\n                  sync: false,\n                },\n                duration: {\n                  value: 0,\n                  sync: false,\n                },\n              },\n              rotate: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                path: false,\n              },\n              orbit: {\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 1,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                },\n                enable: false,\n                opacity: 1,\n                rotation: {\n                  value: 45,\n                },\n                width: 1,\n              },\n              links: {\n                blink: false,\n                color: {\n                  value: \"#fff\",\n                },\n                consent: false,\n                distance: 100,\n                enable: false,\n                frequency: 1,\n                opacity: 1,\n                shadow: {\n                  blur: 5,\n                  color: {\n                    value: \"#000\",\n                  },\n                  enable: false,\n                },\n                triangles: {\n                  enable: false,\n                  frequency: 1,\n                },\n                width: 1,\n                warp: false,\n              },\n              repulse: {\n                value: 0,\n                enabled: false,\n                distance: 1,\n                duration: 1,\n                factor: 1,\n                speed: 1,\n              },\n            },\n            detectRetina: true,\n          }}\n        />\n      )}\n    </motion.div>\n  );\n};\n\n```","type": "animation + hover-interaction"}
{"source":"aceternity ui","name":"container-text-flip","prompt": "Generate an Aceternity UI component that animates a container with dynamic word flipping transitions using React, Tailwind CSS, and motion.","completion": "```jsx\n\"use client\";\n\nimport React, { useState, useEffect, useId } from \"react\";\n\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/utils/cn\";\n\nexport interface ContainerTextFlipProps {\n  /** Array of words to cycle through in the animation */\n  words?: string[];\n  /** Time in milliseconds between word transitions */\n  interval?: number;\n  /** Additional CSS classes to apply to the container */\n  className?: string;\n  /** Additional CSS classes to apply to the text */\n  textClassName?: string;\n  /** Duration of the transition animation in milliseconds */\n  animationDuration?: number;\n}\n\nexport function ContainerTextFlip({\n  words = [\"better\", \"modern\", \"beautiful\", \"awesome\"],\n  interval = 3000,\n  className,\n  textClassName,\n  animationDuration = 700,\n}: ContainerTextFlipProps) {\n  const id = useId();\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [width, setWidth] = useState(100);\n  const textRef = React.useRef(null);\n\n  const updateWidthForWord = () => {\n    if (textRef.current) {\n      // Add some padding to the text width (30px on each side)\n      // @ts-ignore\n      const textWidth = textRef.current.scrollWidth + 30;\n      setWidth(textWidth);\n    }\n  };\n\n  useEffect(() => {\n    // Update width whenever the word changes\n    updateWidthForWord();\n  }, [currentWordIndex]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentWordIndex((prevIndex) => (prevIndex + 1) % words.length);\n      // Width will be updated in the effect that depends on currentWordIndex\n    }, interval);\n\n    return () => clearInterval(intervalId);\n  }, [words, interval]);\n\n  return (\n    <motion.p\n      layout\n      layoutId={`words-here-${id}`}\n      animate={{ width }}\n      transition={{ duration: animationDuration / 2000 }}\n      className={cn(\n        \"relative inline-block rounded-lg pt-2 pb-3 text-center text-4xl font-bold text-black md:text-7xl dark:text-white\",\n        \"[background:linear-gradient(to_bottom,#f3f4f6,#e5e7eb)]\",\n        \"shadow-[inset_0_-1px_#d1d5db,inset_0_0_0_1px_#d1d5db,_0_4px_8px_#d1d5db]\",\n        \"dark:[background:linear-gradient(to_bottom,#374151,#1f2937)]\",\n        \"dark:shadow-[inset_0_-1px_#10171e,inset_0_0_0_1px_hsla(205,89%,46%,.24),_0_4px_8px_#00000052]\",\n        className,\n      )}\n      key={words[currentWordIndex]}\n    >\n      <motion.div\n        transition={{\n          duration: animationDuration / 1000,\n          ease: \"easeInOut\",\n        }}\n        className={cn(\"inline-block\", textClassName)}\n        ref={textRef}\n        layoutId={`word-div-${words[currentWordIndex]}-${id}`}\n      >\n        <motion.div className=\"inline-block\">\n          {words[currentWordIndex].split(\"\").map((letter, index) => (\n            <motion.span\n              key={index}\n              initial={{\n                opacity: 0,\n                filter: \"blur(10px)\",\n              }}\n              animate={{\n                opacity: 1,\n                filter: \"blur(0px)\",\n              }}\n              transition={{\n                delay: index * 0.02,\n              }}\n            >\n              {letter}\n            </motion.span>\n          ))}\n        </motion.div>\n      </motion.div>\n    </motion.p>\n  );\n}\n\n```","type": "text animation"}
{"source":"aceternity ui","name":"draggable-card","prompt": "Generate an Aceternity UI component that creates a draggable, interactive 3D tilt card with spring physics using React, Tailwind CSS, and motion.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n  animate,\n  useVelocity,\n  useAnimationControls,\n} from \"motion/react\";\n\nexport const DraggableCardBody = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const controls = useAnimationControls();\n  const [constraints, setConstraints] = useState({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  });\n\n  // physics biatch\n  const velocityX = useVelocity(mouseX);\n  const velocityY = useVelocity(mouseY);\n\n  const springConfig = {\n    stiffness: 100,\n    damping: 20,\n    mass: 0.5,\n  };\n\n  const rotateX = useSpring(\n    useTransform(mouseY, [-300, 300], [25, -25]),\n    springConfig,\n  );\n  const rotateY = useSpring(\n    useTransform(mouseX, [-300, 300], [-25, 25]),\n    springConfig,\n  );\n\n  const opacity = useSpring(\n    useTransform(mouseX, [-300, 0, 300], [0.8, 1, 0.8]),\n    springConfig,\n  );\n\n  const glareOpacity = useSpring(\n    useTransform(mouseX, [-300, 0, 300], [0.2, 0, 0.2]),\n    springConfig,\n  );\n\n  useEffect(() => {\n    // Update constraints when component mounts or window resizes\n    const updateConstraints = () => {\n      if (typeof window !== \"undefined\") {\n        setConstraints({\n          top: -window.innerHeight / 2,\n          left: -window.innerWidth / 2,\n          right: window.innerWidth / 2,\n          bottom: window.innerHeight / 2,\n        });\n      }\n    };\n\n    updateConstraints();\n\n    // Add resize listener\n    window.addEventListener(\"resize\", updateConstraints);\n\n    // Clean up\n    return () => {\n      window.removeEventListener(\"resize\", updateConstraints);\n    };\n  }, []);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { clientX, clientY } = e;\n    const { width, height, left, top } =\n      cardRef.current?.getBoundingClientRect() ?? {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0,\n      };\n    const centerX = left + width / 2;\n    const centerY = top + height / 2;\n    const deltaX = clientX - centerX;\n    const deltaY = clientY - centerY;\n    mouseX.set(deltaX);\n    mouseY.set(deltaY);\n  };\n\n  const handleMouseLeave = () => {\n    mouseX.set(0);\n    mouseY.set(0);\n  };\n\n  return (\n    <motion.div\n      ref={cardRef}\n      drag\n      dragConstraints={constraints}\n      onDragStart={() => {\n        document.body.style.cursor = \"grabbing\";\n      }}\n      onDragEnd={(event, info) => {\n        document.body.style.cursor = \"default\";\n\n        controls.start({\n          rotateX: 0,\n          rotateY: 0,\n          transition: {\n            type: \"spring\",\n            ...springConfig,\n          },\n        });\n        const currentVelocityX = velocityX.get();\n        const currentVelocityY = velocityY.get();\n\n        const velocityMagnitude = Math.sqrt(\n          currentVelocityX * currentVelocityX +\n            currentVelocityY * currentVelocityY,\n        );\n        const bounce = Math.min(0.8, velocityMagnitude / 1000);\n\n        animate(info.point.x, info.point.x + currentVelocityX * 0.3, {\n          duration: 0.8,\n          ease: [0.2, 0, 0, 1],\n          bounce,\n          type: \"spring\",\n          stiffness: 50,\n          damping: 15,\n          mass: 0.8,\n        });\n\n        animate(info.point.y, info.point.y + currentVelocityY * 0.3, {\n          duration: 0.8,\n          ease: [0.2, 0, 0, 1],\n          bounce,\n          type: \"spring\",\n          stiffness: 50,\n          damping: 15,\n          mass: 0.8,\n        });\n      }}\n      style={{\n        rotateX,\n        rotateY,\n        opacity,\n        willChange: \"transform\",\n      }}\n      animate={controls}\n      whileHover={{ scale: 1.02 }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      className={cn(\n        \"relative min-h-96 w-80 overflow-hidden rounded-md bg-neutral-100 p-6 shadow-2xl transform-3d dark:bg-neutral-900\",\n        className,\n      )}\n    >\n      {children}\n      <motion.div\n        style={{\n          opacity: glareOpacity,\n        }}\n        className=\"pointer-events-none absolute inset-0 bg-white select-none\"\n      />\n    </motion.div>\n  );\n};\n\nexport const DraggableCardContainer = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <div className={cn(\"[perspective:3000px]\", className)}>{children}</div>\n  );\n};\n\n```","type": "card"}
{"source":"aceternity ui","name":"expandable-card-demo-grid","prompt": "Generate an Aceternity UI component for an expandable card grid layout with modal-style card expansion, using Tailwind and React.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n  animate,\n  useVelocity,\n  useAnimationControls,\n} from \"motion/react\";\n\nexport const DraggableCardBody = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const controls = useAnimationControls();\n  const [constraints, setConstraints] = useState({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  });\n\n  // physics biatch\n  const velocityX = useVelocity(mouseX);\n  const velocityY = useVelocity(mouseY);\n\n  const springConfig = {\n    stiffness: 100,\n    damping: 20,\n    mass: 0.5,\n  };\n\n  const rotateX = useSpring(\n    useTransform(mouseY, [-300, 300], [25, -25]),\n    springConfig,\n  );\n  const rotateY = useSpring(\n    useTransform(mouseX, [-300, 300], [-25, 25]),\n    springConfig,\n  );\n\n  const opacity = useSpring(\n    useTransform(mouseX, [-300, 0, 300], [0.8, 1, 0.8]),\n    springConfig,\n  );\n\n  const glareOpacity = useSpring(\n    useTransform(mouseX, [-300, 0, 300], [0.2, 0, 0.2]),\n    springConfig,\n  );\n\n  useEffect(() => {\n    // Update constraints when component mounts or window resizes\n    const updateConstraints = () => {\n      if (typeof window !== \"undefined\") {\n        setConstraints({\n          top: -window.innerHeight / 2,\n          left: -window.innerWidth / 2,\n          right: window.innerWidth / 2,\n          bottom: window.innerHeight / 2,\n        });\n      }\n    };\n\n    updateConstraints();\n\n    // Add resize listener\n    window.addEventListener(\"resize\", updateConstraints);\n\n    // Clean up\n    return () => {\n      window.removeEventListener(\"resize\", updateConstraints);\n    };\n  }, []);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { clientX, clientY } = e;\n    const { width, height, left, top } =\n      cardRef.current?.getBoundingClientRect() ?? {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0,\n      };\n    const centerX = left + width / 2;\n    const centerY = top + height / 2;\n    const deltaX = clientX - centerX;\n    const deltaY = clientY - centerY;\n    mouseX.set(deltaX);\n    mouseY.set(deltaY);\n  };\n\n  const handleMouseLeave = () => {\n    mouseX.set(0);\n    mouseY.set(0);\n  };\n\n  return (\n    <motion.div\n      ref={cardRef}\n      drag\n      dragConstraints={constraints}\n      onDragStart={() => {\n        document.body.style.cursor = \"grabbing\";\n      }}\n      onDragEnd={(event, info) => {\n        document.body.style.cursor = \"default\";\n\n        controls.start({\n          rotateX: 0,\n          rotateY: 0,\n          transition: {\n            type: \"spring\",\n            ...springConfig,\n          },\n        });\n        const currentVelocityX = velocityX.get();\n        const currentVelocityY = velocityY.get();\n\n        const velocityMagnitude = Math.sqrt(\n          currentVelocityX * currentVelocityX +\n            currentVelocityY * currentVelocityY,\n        );\n        const bounce = Math.min(0.8, velocityMagnitude / 1000);\n\n        animate(info.point.x, info.point.x + currentVelocityX * 0.3, {\n          duration: 0.8,\n          ease: [0.2, 0, 0, 1],\n          bounce,\n          type: \"spring\",\n          stiffness: 50,\n          damping: 15,\n          mass: 0.8,\n        });\n\n        animate(info.point.y, info.point.y + currentVelocityY * 0.3, {\n          duration: 0.8,\n          ease: [0.2, 0, 0, 1],\n          bounce,\n          type: \"spring\",\n          stiffness: 50,\n          damping: 15,\n          mass: 0.8,\n        });\n      }}\n      style={{\n        rotateX,\n        rotateY,\n        opacity,\n        willChange: \"transform\",\n      }}\n      animate={controls}\n      whileHover={{ scale: 1.02 }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      className={cn(\n        \"relative min-h-96 w-80 overflow-hidden rounded-md bg-neutral-100 p-6 shadow-2xl transform-3d dark:bg-neutral-900\",\n        className,\n      )}\n    >\n      {children}\n      <motion.div\n        style={{\n          opacity: glareOpacity,\n        }}\n        className=\"pointer-events-none absolute inset-0 bg-white select-none\"\n      />\n    </motion.div>\n  );\n};\n\nexport const DraggableCardContainer = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <div className={cn(\"[perspective:3000px]\", className)}>{children}</div>\n  );\n};\n\n```","type": "card"}
{"source":"aceternity ui","name":"features-section","prompt": "Generate an Aceternity UI component for a responsive feature grid section with decorative background pattern using Tailwind and React.","completion": "```jsx\nimport React from \"react\";\nimport { useId } from \"react\";\n\nexport default function FeaturesSectionDemo() {\n  return (\n    <div className=\"py-20 lg:py-40\">\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-10 md:gap-2 max-w-7xl mx-auto\">\n        {grid.map((feature) => (\n          <div\n            key={feature.title}\n            className=\"relative bg-gradient-to-b dark:from-neutral-900 from-neutral-100 dark:to-neutral-950 to-white p-6 rounded-3xl overflow-hidden\"\n          >\n            <Grid size={20} />\n            <p className=\"text-base font-bold text-neutral-800 dark:text-white relative z-20\">\n              {feature.title}\n            </p>\n            <p className=\"text-neutral-600 dark:text-neutral-400 mt-4 text-base font-normal relative z-20\">\n              {feature.description}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst grid = [\n  {\n    title: \"HIPAA and SOC2 Compliant\",\n    description:\n      \"Our applications are HIPAA and SOC2 compliant, your data is safe with us, always.\",\n  },\n  {\n    title: \"Automated Social Media Posting\",\n    description:\n      \"Schedule and automate your social media posts across multiple platforms to save time and maintain a consistent online presence.\",\n  },\n  {\n    title: \"Advanced Analytics\",\n    description:\n      \"Gain insights into your social media performance with detailed analytics and reporting tools to measure engagement and ROI.\",\n  },\n  {\n    title: \"Content Calendar\",\n    description:\n      \"Plan and organize your social media content with an intuitive calendar view, ensuring you never miss a post.\",\n  },\n  {\n    title: \"Audience Targeting\",\n    description:\n      \"Reach the right audience with advanced targeting options, including demographics, interests, and behaviors.\",\n  },\n  {\n    title: \"Social Listening\",\n    description:\n      \"Monitor social media conversations and trends to stay informed about what your audience is saying and respond in real-time.\",\n  },\n  {\n    title: \"Customizable Templates\",\n    description:\n      \"Create stunning social media posts with our customizable templates, designed to fit your brand's unique style and voice.\",\n  },\n  {\n    title: \"Collaboration Tools\",\n    description:\n      \"Work seamlessly with your team using our collaboration tools, allowing you to assign tasks, share drafts, and provide feedback in real-time.\",\n  },\n];\n\nexport const Grid = ({\n  pattern,\n  size,\n}: {\n  pattern?: number[][];\n  size?: number;\n}) => {\n  const p = pattern ?? [\n    [Math.floor(Math.random() * 4) + 7, Math.floor(Math.random() * 6) + 1],\n    [Math.floor(Math.random() * 4) + 7, Math.floor(Math.random() * 6) + 1],\n    [Math.floor(Math.random() * 4) + 7, Math.floor(Math.random() * 6) + 1],\n    [Math.floor(Math.random() * 4) + 7, Math.floor(Math.random() * 6) + 1],\n    [Math.floor(Math.random() * 4) + 7, Math.floor(Math.random() * 6) + 1],\n  ];\n  return (\n    <div className=\"pointer-events-none absolute left-1/2 top-0  -ml-20 -mt-2 h-full w-full [mask-image:linear-gradient(white,transparent)]\">\n      <div className=\"absolute inset-0 bg-gradient-to-r  [mask-image:radial-gradient(farthest-side_at_top,white,transparent)] dark:from-zinc-900/30 from-zinc-100/30 to-zinc-300/30 dark:to-zinc-900/30 opacity-100\">\n        <GridPattern\n          width={size ?? 20}\n          height={size ?? 20}\n          x=\"-12\"\n          y=\"4\"\n          squares={p}\n          className=\"absolute inset-0 h-full w-full  mix-blend-overlay dark:fill-white/10 dark:stroke-white/10 stroke-black/10 fill-black/10\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport function GridPattern({ width, height, x, y, squares, ...props }: any) {\n  const patternId = useId();\n\n  return (\n    <svg aria-hidden=\"true\" {...props}>\n      <defs>\n        <pattern\n          id={patternId}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <path d={`M.5 ${height}V.5H${width}`} fill=\"none\" />\n        </pattern>\n      </defs>\n      <rect\n        width=\"100%\"\n        height=\"100%\"\n        strokeWidth={0}\n        fill={`url(#${patternId})`}\n      />\n      {squares && (\n        <svg x={x} y={y} className=\"overflow-visible\">\n          {squares.map(([x, y]: any) => (\n            <rect\n              strokeWidth=\"0\"\n              key={`${x}-${y}`}\n              width={width + 1}\n              height={height + 1}\n              x={x * width}\n              y={y * height}\n            />\n          ))}\n        </svg>\n      )}\n    </svg>\n  );\n}\n\n```","type": "features"}
{"source":"aceternity ui","name":"features-section-demo-icons","prompt": "Generate an Aceternity UI component for a responsive feature grid with icons using Tailwind and React, showcasing multiple product highlights.","completion": "```jsx\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport createGlobe from \"cobe\";\nimport { useEffect, useRef } from \"react\";\nimport { motion } from \"motion/react\";\nimport { IconBrandYoutubeFilled } from \"@tabler/icons-react\";\n\n\nexport default function FeaturesSectionDemo() {\n  const features = [\n    {\n      title: \"Track issues effectively\",\n      description:\n        \"Track and manage your project issues with ease using our intuitive interface.\",\n      skeleton: <SkeletonOne />,\n      className:\n        \"col-span-1 lg:col-span-4 border-b lg:border-r dark:border-neutral-800\",\n    },\n    {\n      title: \"Capture pictures with AI\",\n      description:\n        \"Capture stunning photos effortlessly using our advanced AI technology.\",\n      skeleton: <SkeletonTwo />,\n      className: \"border-b col-span-1 lg:col-span-2 dark:border-neutral-800\",\n    },\n    {\n      title: \"Watch our AI on YouTube\",\n      description:\n        \"Whether its you or Tyler Durden, you can get to know about our product on YouTube\",\n      skeleton: <SkeletonThree />,\n      className:\n        \"col-span-1 lg:col-span-3 lg:border-r  dark:border-neutral-800\",\n    },\n    {\n      title: \"Deploy in seconds\",\n      description:\n        \"With our blazing fast, state of the art, cutting edge, we are so back cloud servies (read AWS) - you can deploy your model in seconds.\",\n      skeleton: <SkeletonFour />,\n      className: \"col-span-1 lg:col-span-3 border-b lg:border-none\",\n    },\n  ];\n  return (\n    <div className=\"relative z-20 py-10 lg:py-40 max-w-7xl mx-auto\">\n      <div className=\"px-8\">\n        <h4 className=\"text-3xl lg:text-5xl lg:leading-tight max-w-5xl mx-auto text-center tracking-tight font-medium text-black dark:text-white\">\n          Packed with thousands of features\n        </h4>\n\n        <p className=\"text-sm lg:text-base  max-w-2xl  my-4 mx-auto text-neutral-500 text-center font-normal dark:text-neutral-300\">\n          From Image generation to video generation, Everything AI has APIs for\n          literally everything. It can even create this website copy for you.\n        </p>\n      </div>\n\n      <div className=\"relative \">\n        <div className=\"grid grid-cols-1 lg:grid-cols-6 mt-12 xl:border rounded-md dark:border-neutral-800\">\n          {features.map((feature) => (\n            <FeatureCard key={feature.title} className={feature.className}>\n              <FeatureTitle>{feature.title}</FeatureTitle>\n              <FeatureDescription>{feature.description}</FeatureDescription>\n              <div className=\" h-full w-full\">{feature.skeleton}</div>\n            </FeatureCard>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst FeatureCard = ({\n  children,\n  className,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(`p-4 sm:p-8 relative overflow-hidden`, className)}>\n      {children}\n    </div>\n  );\n};\n\nconst FeatureTitle = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <p className=\" max-w-5xl mx-auto text-left tracking-tight text-black dark:text-white text-xl md:text-2xl md:leading-snug\">\n      {children}\n    </p>\n  );\n};\n\nconst FeatureDescription = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <p\n      className={cn(\n        \"text-sm md:text-base  max-w-4xl text-left mx-auto\",\n        \"text-neutral-500 text-center font-normal dark:text-neutral-300\",\n        \"text-left max-w-sm mx-0 md:text-sm my-2\"\n      )}\n    >\n      {children}\n    </p>\n  );\n};\n\nexport const SkeletonOne = () => {\n  return (\n    <div className=\"relative flex py-8 px-2 gap-10 h-full\">\n      <div className=\"w-full  p-5  mx-auto bg-white dark:bg-neutral-900 shadow-2xl group h-full\">\n        <div className=\"flex flex-1 w-full h-full flex-col space-y-2  \">\n          {/* TODO */}\n          <img\n            src=\"/linear.webp\"\n            alt=\"header\"\n            width={800}\n            height={800}\n            className=\"h-full w-full aspect-square object-cover object-left-top rounded-sm\"\n          />\n        </div>\n      </div>\n\n      <div className=\"absolute bottom-0 z-40 inset-x-0 h-60 bg-gradient-to-t from-white dark:from-black via-white dark:via-black to-transparent w-full pointer-events-none\" />\n      <div className=\"absolute top-0 z-40 inset-x-0 h-60 bg-gradient-to-b from-white dark:from-black via-transparent to-transparent w-full pointer-events-none\" />\n    </div>\n  );\n};\n\nexport const SkeletonThree = () => {\n  return (\n    <a\n      href=\"https://www.youtube.com/watch?v=RPa3_AD1_Vs\"\n      target=\"__blank\"\n      className=\"relative flex gap-10  h-full group/image\"\n    >\n      <div className=\"w-full  mx-auto bg-transparent dark:bg-transparent group h-full\">\n        <div className=\"flex flex-1 w-full h-full flex-col space-y-2  relative\">\n          {/* TODO */}\n          <IconBrandYoutubeFilled className=\"h-20 w-20 absolute z-10 inset-0 text-red-500 m-auto \" />\n          <img\n            src=\"https://assets.aceternity.com/fireship.jpg\"\n            alt=\"header\"\n            width={800}\n            height={800}\n            className=\"h-full w-full aspect-square object-cover object-center rounded-sm blur-none group-hover/image:blur-md transition-all duration-200\"\n          />\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport const SkeletonTwo = () => {\n  const images = [\n    \"https://images.unsplash.com/photo-1517322048670-4fba75cbbb62?q=80&w=3000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1573790387438-4da905039392?q=80&w=3425&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1555400038-63f5ba517a47?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1554931670-4ebfabf6e7a9?q=80&w=3387&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1546484475-7f7bd55792da?q=80&w=2581&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  ];\n\n  const imageVariants = {\n    whileHover: {\n      scale: 1.1,\n      rotate: 0,\n      zIndex: 100,\n    },\n    whileTap: {\n      scale: 1.1,\n      rotate: 0,\n      zIndex: 100,\n    },\n  };\n  return (\n    <div className=\"relative flex flex-col items-start p-8 gap-10 h-full overflow-hidden\">\n      {/* TODO */}\n      <div className=\"flex flex-row -ml-20\">\n        {images.map((image, idx) => (\n          <motion.div\n            variants={imageVariants}\n            key={\"images-first\" + idx}\n            style={{\n              rotate: Math.random() * 20 - 10,\n            }}\n            whileHover=\"whileHover\"\n            whileTap=\"whileTap\"\n            className=\"rounded-xl -mr-4 mt-4 p-1 bg-white dark:bg-neutral-800 dark:border-neutral-700 border border-neutral-100 shrink-0 overflow-hidden\"\n          >\n            <img\n              src={image}\n              alt=\"bali images\"\n              width=\"500\"\n              height=\"500\"\n              className=\"rounded-lg h-20 w-20 md:h-40 md:w-40 object-cover shrink-0\"\n            />\n          </motion.div>\n        ))}\n      </div>\n      <div className=\"flex flex-row\">\n        {images.map((image, idx) => (\n          <motion.div\n            key={\"images-second\" + idx}\n            style={{\n              rotate: Math.random() * 20 - 10,\n            }}\n            variants={imageVariants}\n            whileHover=\"whileHover\"\n            whileTap=\"whileTap\"\n            className=\"rounded-xl -mr-4 mt-4 p-1 bg-white dark:bg-neutral-800 dark:border-neutral-700 border border-neutral-100 shrink-0 overflow-hidden\"\n          >\n            <img\n              src={image}\n              alt=\"bali images\"\n              width=\"500\"\n              height=\"500\"\n              className=\"rounded-lg h-20 w-20 md:h-40 md:w-40 object-cover shrink-0\"\n            />\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"absolute left-0 z-[100] inset-y-0 w-20 bg-gradient-to-r from-white dark:from-black to-transparent  h-full pointer-events-none\" />\n      <div className=\"absolute right-0 z-[100] inset-y-0 w-20 bg-gradient-to-l from-white dark:from-black  to-transparent h-full pointer-events-none\" />\n    </div>\n  );\n};\n\nexport const SkeletonFour = () => {\n  return (\n    <div className=\"h-60 md:h-60  flex flex-col items-center relative bg-transparent dark:bg-transparent mt-10\">\n      <Globe className=\"absolute -right-10 md:-right-10 -bottom-80 md:-bottom-72\" />\n    </div>\n  );\n};\n\nexport const Globe = ({ className }: { className?: string }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    let phi = 0;\n\n    if (!canvasRef.current) return;\n\n    const globe = createGlobe(canvasRef.current, {\n      devicePixelRatio: 2,\n      width: 600 * 2,\n      height: 600 * 2,\n      phi: 0,\n      theta: 0,\n      dark: 1,\n      diffuse: 1.2,\n      mapSamples: 16000,\n      mapBrightness: 6,\n      baseColor: [0.3, 0.3, 0.3],\n      markerColor: [0.1, 0.8, 1],\n      glowColor: [1, 1, 1],\n      markers: [\n        // longitude latitude\n        { location: [37.7595, -122.4367], size: 0.03 },\n        { location: [40.7128, -74.006], size: 0.1 },\n      ],\n      onRender: (state) => {\n        // Called on every animation frame.\n        // `state` will be an empty object, return updated params.\n        state.phi = phi;\n        phi += 0.01;\n      },\n    });\n\n    return () => {\n      globe.destroy();\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{ width: 600, height: 600, maxWidth: \"100%\", aspectRatio: 1 }}\n      className={className}\n    />\n  );\n};\n\n```","type": "features"}
{"source":"aceternity ui","name":"features-section-demo-animated","prompt": "Generate an Aceternity UI component that showcases a multi-feature responsive section using animated visual skeletons and interactive globe, built with Tailwind, React, Cobe, and Motion.","completion": "```jsx\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport createGlobe from \"cobe\";\nimport { useEffect, useRef } from \"react\";\nimport { motion } from \"motion/react\";\nimport { IconBrandYoutubeFilled } from \"@tabler/icons-react\";\n\n\nexport default function FeaturesSectionDemo() {\n  const features = [\n    {\n      title: \"Track issues effectively\",\n      description:\n        \"Track and manage your project issues with ease using our intuitive interface.\",\n      skeleton: <SkeletonOne />,\n      className:\n        \"col-span-1 lg:col-span-4 border-b lg:border-r dark:border-neutral-800\",\n    },\n    {\n      title: \"Capture pictures with AI\",\n      description:\n        \"Capture stunning photos effortlessly using our advanced AI technology.\",\n      skeleton: <SkeletonTwo />,\n      className: \"border-b col-span-1 lg:col-span-2 dark:border-neutral-800\",\n    },\n    {\n      title: \"Watch our AI on YouTube\",\n      description:\n        \"Whether its you or Tyler Durden, you can get to know about our product on YouTube\",\n      skeleton: <SkeletonThree />,\n      className:\n        \"col-span-1 lg:col-span-3 lg:border-r  dark:border-neutral-800\",\n    },\n    {\n      title: \"Deploy in seconds\",\n      description:\n        \"With our blazing fast, state of the art, cutting edge, we are so back cloud servies (read AWS) - you can deploy your model in seconds.\",\n      skeleton: <SkeletonFour />,\n      className: \"col-span-1 lg:col-span-3 border-b lg:border-none\",\n    },\n  ];\n  return (\n    <div className=\"relative z-20 py-10 lg:py-40 max-w-7xl mx-auto\">\n      <div className=\"px-8\">\n        <h4 className=\"text-3xl lg:text-5xl lg:leading-tight max-w-5xl mx-auto text-center tracking-tight font-medium text-black dark:text-white\">\n          Packed with thousands of features\n        </h4>\n\n        <p className=\"text-sm lg:text-base  max-w-2xl  my-4 mx-auto text-neutral-500 text-center font-normal dark:text-neutral-300\">\n          From Image generation to video generation, Everything AI has APIs for\n          literally everything. It can even create this website copy for you.\n        </p>\n      </div>\n\n      <div className=\"relative \">\n        <div className=\"grid grid-cols-1 lg:grid-cols-6 mt-12 xl:border rounded-md dark:border-neutral-800\">\n          {features.map((feature) => (\n            <FeatureCard key={feature.title} className={feature.className}>\n              <FeatureTitle>{feature.title}</FeatureTitle>\n              <FeatureDescription>{feature.description}</FeatureDescription>\n              <div className=\" h-full w-full\">{feature.skeleton}</div>\n            </FeatureCard>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst FeatureCard = ({\n  children,\n  className,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(`p-4 sm:p-8 relative overflow-hidden`, className)}>\n      {children}\n    </div>\n  );\n};\n\nconst FeatureTitle = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <p className=\" max-w-5xl mx-auto text-left tracking-tight text-black dark:text-white text-xl md:text-2xl md:leading-snug\">\n      {children}\n    </p>\n  );\n};\n\nconst FeatureDescription = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <p\n      className={cn(\n        \"text-sm md:text-base  max-w-4xl text-left mx-auto\",\n        \"text-neutral-500 text-center font-normal dark:text-neutral-300\",\n        \"text-left max-w-sm mx-0 md:text-sm my-2\"\n      )}\n    >\n      {children}\n    </p>\n  );\n};\n\nexport const SkeletonOne = () => {\n  return (\n    <div className=\"relative flex py-8 px-2 gap-10 h-full\">\n      <div className=\"w-full  p-5  mx-auto bg-white dark:bg-neutral-900 shadow-2xl group h-full\">\n        <div className=\"flex flex-1 w-full h-full flex-col space-y-2  \">\n          {/* TODO */}\n          <img\n            src=\"/linear.webp\"\n            alt=\"header\"\n            width={800}\n            height={800}\n            className=\"h-full w-full aspect-square object-cover object-left-top rounded-sm\"\n          />\n        </div>\n      </div>\n\n      <div className=\"absolute bottom-0 z-40 inset-x-0 h-60 bg-gradient-to-t from-white dark:from-black via-white dark:via-black to-transparent w-full pointer-events-none\" />\n      <div className=\"absolute top-0 z-40 inset-x-0 h-60 bg-gradient-to-b from-white dark:from-black via-transparent to-transparent w-full pointer-events-none\" />\n    </div>\n  );\n};\n\nexport const SkeletonThree = () => {\n  return (\n    <a\n      href=\"https://www.youtube.com/watch?v=RPa3_AD1_Vs\"\n      target=\"__blank\"\n      className=\"relative flex gap-10  h-full group/image\"\n    >\n      <div className=\"w-full  mx-auto bg-transparent dark:bg-transparent group h-full\">\n        <div className=\"flex flex-1 w-full h-full flex-col space-y-2  relative\">\n          {/* TODO */}\n          <IconBrandYoutubeFilled className=\"h-20 w-20 absolute z-10 inset-0 text-red-500 m-auto \" />\n          <img\n            src=\"https://assets.aceternity.com/fireship.jpg\"\n            alt=\"header\"\n            width={800}\n            height={800}\n            className=\"h-full w-full aspect-square object-cover object-center rounded-sm blur-none group-hover/image:blur-md transition-all duration-200\"\n          />\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport const SkeletonTwo = () => {\n  const images = [\n    \"https://images.unsplash.com/photo-1517322048670-4fba75cbbb62?q=80&w=3000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1573790387438-4da905039392?q=80&w=3425&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1555400038-63f5ba517a47?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1554931670-4ebfabf6e7a9?q=80&w=3387&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n    \"https://images.unsplash.com/photo-1546484475-7f7bd55792da?q=80&w=2581&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  ];\n\n  const imageVariants = {\n    whileHover: {\n      scale: 1.1,\n      rotate: 0,\n      zIndex: 100,\n    },\n    whileTap: {\n      scale: 1.1,\n      rotate: 0,\n      zIndex: 100,\n    },\n  };\n  return (\n    <div className=\"relative flex flex-col items-start p-8 gap-10 h-full overflow-hidden\">\n      {/* TODO */}\n      <div className=\"flex flex-row -ml-20\">\n        {images.map((image, idx) => (\n          <motion.div\n            variants={imageVariants}\n            key={\"images-first\" + idx}\n            style={{\n              rotate: Math.random() * 20 - 10,\n            }}\n            whileHover=\"whileHover\"\n            whileTap=\"whileTap\"\n            className=\"rounded-xl -mr-4 mt-4 p-1 bg-white dark:bg-neutral-800 dark:border-neutral-700 border border-neutral-100 shrink-0 overflow-hidden\"\n          >\n            <img\n              src={image}\n              alt=\"bali images\"\n              width=\"500\"\n              height=\"500\"\n              className=\"rounded-lg h-20 w-20 md:h-40 md:w-40 object-cover shrink-0\"\n            />\n          </motion.div>\n        ))}\n      </div>\n      <div className=\"flex flex-row\">\n        {images.map((image, idx) => (\n          <motion.div\n            key={\"images-second\" + idx}\n            style={{\n              rotate: Math.random() * 20 - 10,\n            }}\n            variants={imageVariants}\n            whileHover=\"whileHover\"\n            whileTap=\"whileTap\"\n            className=\"rounded-xl -mr-4 mt-4 p-1 bg-white dark:bg-neutral-800 dark:border-neutral-700 border border-neutral-100 shrink-0 overflow-hidden\"\n          >\n            <img\n              src={image}\n              alt=\"bali images\"\n              width=\"500\"\n              height=\"500\"\n              className=\"rounded-lg h-20 w-20 md:h-40 md:w-40 object-cover shrink-0\"\n            />\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"absolute left-0 z-[100] inset-y-0 w-20 bg-gradient-to-r from-white dark:from-black to-transparent  h-full pointer-events-none\" />\n      <div className=\"absolute right-0 z-[100] inset-y-0 w-20 bg-gradient-to-l from-white dark:from-black  to-transparent h-full pointer-events-none\" />\n    </div>\n  );\n};\n\nexport const SkeletonFour = () => {\n  return (\n    <div className=\"h-60 md:h-60  flex flex-col items-center relative bg-transparent dark:bg-transparent mt-10\">\n      <Globe className=\"absolute -right-10 md:-right-10 -bottom-80 md:-bottom-72\" />\n    </div>\n  );\n};\n\nexport const Globe = ({ className }: { className?: string }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    let phi = 0;\n\n    if (!canvasRef.current) return;\n\n    const globe = createGlobe(canvasRef.current, {\n      devicePixelRatio: 2,\n      width: 600 * 2,\n      height: 600 * 2,\n      phi: 0,\n      theta: 0,\n      dark: 1,\n      diffuse: 1.2,\n      mapSamples: 16000,\n      mapBrightness: 6,\n      baseColor: [0.3, 0.3, 0.3],\n      markerColor: [0.1, 0.8, 1],\n      glowColor: [1, 1, 1],\n      markers: [\n        // longitude latitude\n        { location: [37.7595, -122.4367], size: 0.03 },\n        { location: [40.7128, -74.006], size: 0.1 },\n      ],\n      onRender: (state) => {\n        // Called on every animation frame.\n        // `state` will be an empty object, return updated params.\n        state.phi = phi;\n        phi += 0.01;\n      },\n    });\n\n    return () => {\n      globe.destroy();\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{ width: 600, height: 600, maxWidth: \"100%\", aspectRatio: 1 }}\n      className={className}\n    />\n  );\n};\n\n```","type": "features + animation"}
{"source":"aceternity ui","name":"file-upload","prompt": "Generate an Aceternity UI component for an animated file upload section with drag-and-drop support using React, Tailwind, motion, and react-dropzone.","completion": "```jsx\nimport { cn } from \"@/lib/utils\";\nimport React, { useRef, useState } from \"react\";\nimport { motion } from \"motion/react\";\nimport { IconUpload } from \"@tabler/icons-react\";\nimport { useDropzone } from \"react-dropzone\";\n\nconst mainVariant = {\n  initial: {\n    x: 0,\n    y: 0,\n  },\n  animate: {\n    x: 20,\n    y: -20,\n    opacity: 0.9,\n  },\n};\n\nconst secondaryVariant = {\n  initial: {\n    opacity: 0,\n  },\n  animate: {\n    opacity: 1,\n  },\n};\n\nexport const FileUpload = ({\n  onChange,\n}: {\n  onChange?: (files: File[]) => void;\n}) => {\n  const [files, setFiles] = useState<File[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = (newFiles: File[]) => {\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n    onChange && onChange(newFiles);\n  };\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const { getRootProps, isDragActive } = useDropzone({\n    multiple: false,\n    noClick: true,\n    onDrop: handleFileChange,\n    onDropRejected: (error) => {\n      console.log(error);\n    },\n  });\n\n  return (\n    <div className=\"w-full\" {...getRootProps()}>\n      <motion.div\n        onClick={handleClick}\n        whileHover=\"animate\"\n        className=\"p-10 group/file block rounded-lg cursor-pointer w-full relative overflow-hidden\"\n      >\n        <input\n          ref={fileInputRef}\n          id=\"file-upload-handle\"\n          type=\"file\"\n          onChange={(e) => handleFileChange(Array.from(e.target.files || []))}\n          className=\"hidden\"\n        />\n        <div className=\"absolute inset-0 [mask-image:radial-gradient(ellipse_at_center,white,transparent)]\">\n          <GridPattern />\n        </div>\n        <div className=\"flex flex-col items-center justify-center\">\n          <p className=\"relative z-20 font-sans font-bold text-neutral-700 dark:text-neutral-300 text-base\">\n            Upload file\n          </p>\n          <p className=\"relative z-20 font-sans font-normal text-neutral-400 dark:text-neutral-400 text-base mt-2\">\n            Drag or drop your files here or click to upload\n          </p>\n          <div className=\"relative w-full mt-10 max-w-xl mx-auto\">\n            {files.length > 0 &&\n              files.map((file, idx) => (\n                <motion.div\n                  key={\"file\" + idx}\n                  layoutId={idx === 0 ? \"file-upload\" : \"file-upload-\" + idx}\n                  className={cn(\n                    \"relative overflow-hidden z-40 bg-white dark:bg-neutral-900 flex flex-col items-start justify-start md:h-24 p-4 mt-4 w-full mx-auto rounded-md\",\n                    \"shadow-sm\"\n                  )}\n                >\n                  <div className=\"flex justify-between w-full items-center gap-4\">\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                      className=\"text-base text-neutral-700 dark:text-neutral-300 truncate max-w-xs\"\n                    >\n                      {file.name}\n                    </motion.p>\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                      className=\"rounded-lg px-2 py-1 w-fit shrink-0 text-sm text-neutral-600 dark:bg-neutral-800 dark:text-white shadow-input\"\n                    >\n                      {(file.size / (1024 * 1024)).toFixed(2)} MB\n                    </motion.p>\n                  </div>\n\n                  <div className=\"flex text-sm md:flex-row flex-col items-start md:items-center w-full mt-2 justify-between text-neutral-600 dark:text-neutral-400\">\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                      className=\"px-1 py-0.5 rounded-md bg-gray-100 dark:bg-neutral-800 \"\n                    >\n                      {file.type}\n                    </motion.p>\n\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                    >\n                      modified{\" \"}\n                      {new Date(file.lastModified).toLocaleDateString()}\n                    </motion.p>\n                  </div>\n                </motion.div>\n              ))}\n            {!files.length && (\n              <motion.div\n                layoutId=\"file-upload\"\n                variants={mainVariant}\n                transition={{\n                  type: \"spring\",\n                  stiffness: 300,\n                  damping: 20,\n                }}\n                className={cn(\n                  \"relative group-hover/file:shadow-2xl z-40 bg-white dark:bg-neutral-900 flex items-center justify-center h-32 mt-4 w-full max-w-[8rem] mx-auto rounded-md\",\n                  \"shadow-[0px_10px_50px_rgba(0,0,0,0.1)]\"\n                )}\n              >\n                {isDragActive ? (\n                  <motion.p\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    className=\"text-neutral-600 flex flex-col items-center\"\n                  >\n                    Drop it\n                    <IconUpload className=\"h-4 w-4 text-neutral-600 dark:text-neutral-400\" />\n                  </motion.p>\n                ) : (\n                  <IconUpload className=\"h-4 w-4 text-neutral-600 dark:text-neutral-300\" />\n                )}\n              </motion.div>\n            )}\n\n            {!files.length && (\n              <motion.div\n                variants={secondaryVariant}\n                className=\"absolute opacity-0 border border-dashed border-sky-400 inset-0 z-30 bg-transparent flex items-center justify-center h-32 mt-4 w-full max-w-[8rem] mx-auto rounded-md\"\n              ></motion.div>\n            )}\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport function GridPattern() {\n  const columns = 41;\n  const rows = 11;\n  return (\n    <div className=\"flex bg-gray-100 dark:bg-neutral-900 shrink-0 flex-wrap justify-center items-center gap-x-px gap-y-px  scale-105\">\n      {Array.from({ length: rows }).map((_, row) =>\n        Array.from({ length: columns }).map((_, col) => {\n          const index = row * columns + col;\n          return (\n            <div\n              key={`${col}-${row}`}\n              className={`w-10 h-10 flex shrink-0 rounded-[2px] ${\n                index % 2 === 0\n                  ? \"bg-gray-50 dark:bg-neutral-950\"\n                  : \"bg-gray-50 dark:bg-neutral-950 shadow-[0px_0px_1px_3px_rgba(255,255,255,1)_inset] dark:shadow-[0px_0px_1px_3px_rgba(0,0,0,1)_inset]\"\n              }`}\n            />\n          );\n        })\n      )}\n    </div>\n  );\n}\n\n```","type": "form + animation"}
{"source":"aceternity ui","name":"floating-dock","prompt": "Generate an Aceternity UI component for a responsive floating dock menu with animated desktop and mobile views using motion and Tailwind CSS in React.","completion": "```jsx\nimport { cn } from \"@/lib/utils\";\nimport { IconLayoutNavbarCollapse } from \"@tabler/icons-react\";\nimport {\n  AnimatePresence,\n  MotionValue,\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n} from \"motion/react\";\n\nimport { useRef, useState } from \"react\";\n\nexport const FloatingDock = ({\n  items,\n  desktopClassName,\n  mobileClassName,\n}: {\n  items: { title: string; icon: React.ReactNode; href: string }[];\n  desktopClassName?: string;\n  mobileClassName?: string;\n}) => {\n  return (\n    <>\n      <FloatingDockDesktop items={items} className={desktopClassName} />\n      <FloatingDockMobile items={items} className={mobileClassName} />\n    </>\n  );\n};\n\nconst FloatingDockMobile = ({\n  items,\n  className,\n}: {\n  items: { title: string; icon: React.ReactNode; href: string }[];\n  className?: string;\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <div className={cn(\"relative block md:hidden\", className)}>\n      <AnimatePresence>\n        {open && (\n          <motion.div\n            layoutId=\"nav\"\n            className=\"absolute inset-x-0 bottom-full mb-2 flex flex-col gap-2\"\n          >\n            {items.map((item, idx) => (\n              <motion.div\n                key={item.title}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                }}\n                exit={{\n                  opacity: 0,\n                  y: 10,\n                  transition: {\n                    delay: idx * 0.05,\n                  },\n                }}\n                transition={{ delay: (items.length - 1 - idx) * 0.05 }}\n              >\n                <a\n                  href={item.href}\n                  key={item.title}\n                  className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-50 dark:bg-neutral-900\"\n                >\n                  <div className=\"h-4 w-4\">{item.icon}</div>\n                </a>\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <button\n        onClick={() => setOpen(!open)}\n        className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-50 dark:bg-neutral-800\"\n      >\n        <IconLayoutNavbarCollapse className=\"h-5 w-5 text-neutral-500 dark:text-neutral-400\" />\n      </button>\n    </div>\n  );\n};\n\nconst FloatingDockDesktop = ({\n  items,\n  className,\n}: {\n  items: { title: string; icon: React.ReactNode; href: string }[];\n  className?: string;\n}) => {\n  let mouseX = useMotionValue(Infinity);\n  return (\n    <motion.div\n      onMouseMove={(e) => mouseX.set(e.pageX)}\n      onMouseLeave={() => mouseX.set(Infinity)}\n      className={cn(\n        \"mx-auto hidden h-16 items-end gap-4 rounded-2xl bg-gray-50 px-4 pb-3 md:flex dark:bg-neutral-900\",\n        className,\n      )}\n    >\n      {items.map((item) => (\n        <IconContainer mouseX={mouseX} key={item.title} {...item} />\n      ))}\n    </motion.div>\n  );\n};\n\nfunction IconContainer({\n  mouseX,\n  title,\n  icon,\n  href,\n}: {\n  mouseX: MotionValue;\n  title: string;\n  icon: React.ReactNode;\n  href: string;\n}) {\n  let ref = useRef<HTMLDivElement>(null);\n\n  let distance = useTransform(mouseX, (val) => {\n    let bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\n\n    return val - bounds.x - bounds.width / 2;\n  });\n\n  let widthTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]);\n  let heightTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]);\n\n  let widthTransformIcon = useTransform(distance, [-150, 0, 150], [20, 40, 20]);\n  let heightTransformIcon = useTransform(\n    distance,\n    [-150, 0, 150],\n    [20, 40, 20],\n  );\n\n  let width = useSpring(widthTransform, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n  let height = useSpring(heightTransform, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n\n  let widthIcon = useSpring(widthTransformIcon, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n  let heightIcon = useSpring(heightTransformIcon, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n\n  const [hovered, setHovered] = useState(false);\n\n  return (\n    <a href={href}>\n      <motion.div\n        ref={ref}\n        style={{ width, height }}\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n        className=\"relative flex aspect-square items-center justify-center rounded-full bg-gray-200 dark:bg-neutral-800\"\n      >\n        <AnimatePresence>\n          {hovered && (\n            <motion.div\n              initial={{ opacity: 0, y: 10, x: \"-50%\" }}\n              animate={{ opacity: 1, y: 0, x: \"-50%\" }}\n              exit={{ opacity: 0, y: 2, x: \"-50%\" }}\n              className=\"absolute -top-8 left-1/2 w-fit rounded-md border border-gray-200 bg-gray-100 px-2 py-0.5 text-xs whitespace-pre text-neutral-700 dark:border-neutral-900 dark:bg-neutral-800 dark:text-white\"\n            >\n              {title}\n            </motion.div>\n          )}\n        </AnimatePresence>\n        <motion.div\n          style={{ width: widthIcon, height: heightIcon }}\n          className=\"flex items-center justify-center\"\n        >\n          {icon}\n        </motion.div>\n      </motion.div>\n    </a>\n  );\n}\n\n```","type": "navigation + animation"}
{"source":"aceternity ui","name":"focus-cards","prompt": "Generate an Aceternity UI component for a responsive image card grid that reveals title overlays on hover using Tailwind CSS and React.","completion": "```jsx\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const Card = React.memo(\n  ({\n    card,\n    index,\n    hovered,\n    setHovered,\n  }: {\n    card: any;\n    index: number;\n    hovered: number | null;\n    setHovered: React.Dispatch<React.SetStateAction<number | null>>;\n  }) => (\n    <div\n      onMouseEnter={() => setHovered(index)}\n      onMouseLeave={() => setHovered(null)}\n      className={cn(\n        \"rounded-lg relative bg-gray-100 dark:bg-neutral-900 overflow-hidden h-60 md:h-96 w-full transition-all duration-300 ease-out\",\n        hovered !== null && hovered !== index && \"blur-sm scale-[0.98]\"\n      )}\n    >\n      <img\n        src={card.src}\n        alt={card.title}\n        className=\"object-cover absolute inset-0\"\n      />\n      <div\n        className={cn(\n          \"absolute inset-0 bg-black/50 flex items-end py-8 px-4 transition-opacity duration-300\",\n          hovered === index ? \"opacity-100\" : \"opacity-0\"\n        )}\n      >\n        <div className=\"text-xl md:text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-b from-neutral-50 to-neutral-200\">\n          {card.title}\n        </div>\n      </div>\n    </div>\n  )\n);\n\nCard.displayName = \"Card\";\n\ntype Card = {\n  title: string;\n  src: string;\n};\n\nexport function FocusCards({ cards }: { cards: Card[] }) {\n  const [hovered, setHovered] = useState<number | null>(null);\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10 max-w-5xl mx-auto md:px-8 w-full\">\n      {cards.map((card, index) => (\n        <Card\n          key={card.title}\n          card={card}\n          index={index}\n          hovered={hovered}\n          setHovered={setHovered}\n        />\n      ))}\n    </div>\n  );\n}\n\n```","type": "cards + hover animation"}
{"source":"aceternity ui","name":"hero-section-one","prompt": "Generate an Aceternity UI hero section component with animated headline text using Motion and Tailwind CSS, including a navbar, call-to-action buttons, and a preview image.","completion": "```jsx\n\"use client\";\n\n\nimport { motion } from \"motion/react\";\n\nexport default function HeroSectionOne() {\n  return (\n    <div className=\"relative mx-auto my-10 flex max-w-7xl flex-col items-center justify-center\">\n      <Navbar />\n      <div className=\"absolute inset-y-0 left-0 h-full w-px bg-neutral-200/80 dark:bg-neutral-800/80\">\n        <div className=\"absolute top-0 h-40 w-px bg-gradient-to-b from-transparent via-blue-500 to-transparent\" />\n      </div>\n      <div className=\"absolute inset-y-0 right-0 h-full w-px bg-neutral-200/80 dark:bg-neutral-800/80\">\n        <div className=\"absolute h-40 w-px bg-gradient-to-b from-transparent via-blue-500 to-transparent\" />\n      </div>\n      <div className=\"absolute inset-x-0 bottom-0 h-px w-full bg-neutral-200/80 dark:bg-neutral-800/80\">\n        <div className=\"absolute mx-auto h-px w-40 bg-gradient-to-r from-transparent via-blue-500 to-transparent\" />\n      </div>\n      <div className=\"px-4 py-10 md:py-20\">\n        <h1 className=\"relative z-10 mx-auto max-w-4xl text-center text-2xl font-bold text-slate-700 md:text-4xl lg:text-7xl dark:text-slate-300\">\n          {\"Launch your website in hours, not days\"\n            .split(\" \")\n            .map((word, index) => (\n              <motion.span\n                key={index}\n                initial={{ opacity: 0, filter: \"blur(4px)\", y: 10 }}\n                animate={{ opacity: 1, filter: \"blur(0px)\", y: 0 }}\n                transition={{\n                  duration: 0.3,\n                  delay: index * 0.1,\n                  ease: \"easeInOut\",\n                }}\n                className=\"mr-2 inline-block\"\n              >\n                {word}\n              </motion.span>\n            ))}\n        </h1>\n        <motion.p\n          initial={{\n            opacity: 0,\n          }}\n          animate={{\n            opacity: 1,\n          }}\n          transition={{\n            duration: 0.3,\n            delay: 0.8,\n          }}\n          className=\"relative z-10 mx-auto max-w-xl py-4 text-center text-lg font-normal text-neutral-600 dark:text-neutral-400\"\n        >\n          With AI, you can launch your website in hours, not days. Try our best\n          in class, state of the art, cutting edge AI tools to get your website\n          up.\n        </motion.p>\n        <motion.div\n          initial={{\n            opacity: 0,\n          }}\n          animate={{\n            opacity: 1,\n          }}\n          transition={{\n            duration: 0.3,\n            delay: 1,\n          }}\n          className=\"relative z-10 mt-8 flex flex-wrap items-center justify-center gap-4\"\n        >\n          <button className=\"w-60 transform rounded-lg bg-black px-6 py-2 font-medium text-white transition-all duration-300 hover:-translate-y-0.5 hover:bg-gray-800 dark:bg-white dark:text-black dark:hover:bg-gray-200\">\n            Explore Now\n          </button>\n          <button className=\"w-60 transform rounded-lg border border-gray-300 bg-white px-6 py-2 font-medium text-black transition-all duration-300 hover:-translate-y-0.5 hover:bg-gray-100 dark:border-gray-700 dark:bg-black dark:text-white dark:hover:bg-gray-900\">\n            Contact Support\n          </button>\n        </motion.div>\n        <motion.div\n          initial={{\n            opacity: 0,\n            y: 10,\n          }}\n          animate={{\n            opacity: 1,\n            y: 0,\n          }}\n          transition={{\n            duration: 0.3,\n            delay: 1.2,\n          }}\n          className=\"relative z-10 mt-20 rounded-3xl border border-neutral-200 bg-neutral-100 p-4 shadow-md dark:border-neutral-800 dark:bg-neutral-900\"\n        >\n          <div className=\"w-full overflow-hidden rounded-xl border border-gray-300 dark:border-gray-700\">\n            <img\n              src=\"https://assets.aceternity.com/pro/aceternity-landing.webp\"\n              alt=\"Landing page preview\"\n              className=\"aspect-[16/9] h-auto w-full object-cover\"\n              height={1000}\n              width={1000}\n            />\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n\nconst Navbar = () => {\n  return (\n    <nav className=\"flex w-full items-center justify-between border-t border-b border-neutral-200 px-4 py-4 dark:border-neutral-800\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"size-7 rounded-full bg-gradient-to-br from-violet-500 to-pink-500\" />\n        <h1 className=\"text-base font-bold md:text-2xl\">Aceternity UI</h1>\n      </div>\n      <button className=\"w-24 transform rounded-lg bg-black px-6 py-2 font-medium text-white transition-all duration-300 hover:-translate-y-0.5 hover:bg-gray-800 md:w-32 dark:bg-white dark:text-black dark:hover:bg-gray-200\">\n        Login\n      </button>\n    </nav>\n  );\n};\n\n```","type": "hero + animation"}
{"source":"aceternity ui","name":"lens-effect-zoom","prompt": "Generate an Aceternity UI component that applies a lens zoom effect on hover using React, Motion, and Tailwind, with customizable zoom factor, lens size, and static or dynamic focus.","completion": "```jsx\n\"use client\";\n\nimport React, { useRef, useState } from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\n\ninterface LensProps {\n  children: React.ReactNode;\n  zoomFactor?: number;\n  lensSize?: number;\n  position?: {\n    x: number;\n    y: number;\n  };\n  isStatic?: boolean;\n  isFocusing?: () => void;\n  hovering?: boolean;\n  setHovering?: (hovering: boolean) => void;\n}\n\nexport const Lens: React.FC<LensProps> = ({\n  children,\n  zoomFactor = 1.5,\n  lensSize = 170,\n  isStatic = false,\n  position = { x: 200, y: 150 },\n  hovering,\n  setHovering,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [localIsHovering, setLocalIsHovering] = useState(false);\n\n  const isHovering = hovering !== undefined ? hovering : localIsHovering;\n  const setIsHovering = setHovering || setLocalIsHovering;\n\n  // const [isHovering, setIsHovering] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 100, y: 100 });\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    setMousePosition({ x, y });\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"relative overflow-hidden rounded-lg z-20\"\n      onMouseEnter={() => {\n        setIsHovering(true);\n      }}\n      onMouseLeave={() => setIsHovering(false)}\n      onMouseMove={handleMouseMove}\n    >\n      {children}\n\n      {isStatic ? (\n        <div>\n          <motion.div\n            initial={{ opacity: 0, scale: 0.58 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n            transition={{ duration: 0.3, ease: \"easeOut\" }}\n            className=\"absolute inset-0 overflow-hidden\"\n            style={{\n              maskImage: `radial-gradient(circle ${lensSize / 2}px at ${\n                position.x\n              }px ${position.y}px, black 100%, transparent 100%)`,\n              WebkitMaskImage: `radial-gradient(circle ${lensSize / 2}px at ${\n                position.x\n              }px ${position.y}px, black 100%, transparent 100%)`,\n              transformOrigin: `${position.x}px ${position.y}px`,\n            }}\n          >\n            <div\n              className=\"absolute inset-0\"\n              style={{\n                transform: `scale(${zoomFactor})`,\n                transformOrigin: `${position.x}px ${position.y}px`,\n              }}\n            >\n              {children}\n            </div>\n          </motion.div>\n        </div>\n      ) : (\n        <AnimatePresence>\n          {isHovering && (\n            <div>\n              <motion.div\n                initial={{ opacity: 0, scale: 0.58 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n                className=\"absolute inset-0 overflow-hidden\"\n                style={{\n                  maskImage: `radial-gradient(circle ${lensSize / 2}px at ${\n                    mousePosition.x\n                  }px ${mousePosition.y}px, black 100%, transparent 100%)`,\n                  WebkitMaskImage: `radial-gradient(circle ${\n                    lensSize / 2\n                  }px at ${mousePosition.x}px ${\n                    mousePosition.y\n                  }px, black 100%, transparent 100%)`,\n                  transformOrigin: `${mousePosition.x}px ${mousePosition.y}px`,\n                  zIndex: 50,\n                }}\n              >\n                <div\n                  className=\"absolute inset-0\"\n                  style={{\n                    transform: `scale(${zoomFactor})`,\n                    transformOrigin: `${mousePosition.x}px ${mousePosition.y}px`,\n                  }}\n                >\n                  {children}\n                </div>\n              </motion.div>\n            </div>\n          )}\n        </AnimatePresence>\n      )}\n    </div>\n  );\n};\n\n```","type": "hover animation"}
{"source":"aceternity ui","name":"pointer-highlight","prompt": "Generate an Aceternity UI component that highlights a section with an animated border and pointer on hover using Motion and Tailwind, dynamically adapting to container size.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"motion/react\";\nimport { useRef, useEffect, useState } from \"react\";\n\nexport function PointerHighlight({\n  children,\n  rectangleClassName,\n  pointerClassName,\n  containerClassName,\n}: {\n  children: React.ReactNode;\n  rectangleClassName?: string;\n  pointerClassName?: string;\n  containerClassName?: string;\n}) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const { width, height } = containerRef.current.getBoundingClientRect();\n      setDimensions({ width, height });\n    }\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const { width, height } = entry.contentRect;\n        setDimensions({ width, height });\n      }\n    });\n\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerRef.current) {\n        resizeObserver.unobserve(containerRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      className={cn(\"relative w-fit\", containerClassName)}\n      ref={containerRef}\n    >\n      {children}\n      {dimensions.width > 0 && dimensions.height > 0 && (\n        <motion.div\n          className=\"pointer-events-none absolute inset-0 z-0\"\n          initial={{ opacity: 0, scale: 0.95, originX: 0, originY: 0 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n        >\n          <motion.div\n            className={cn(\n              \"absolute inset-0 border border-neutral-800 dark:border-neutral-200\",\n              rectangleClassName,\n            )}\n            initial={{\n              width: 0,\n              height: 0,\n            }}\n            whileInView={{\n              width: dimensions.width,\n              height: dimensions.height,\n            }}\n            transition={{\n              duration: 1,\n              ease: \"easeInOut\",\n            }}\n          />\n          <motion.div\n            className=\"pointer-events-none absolute\"\n            initial={{ opacity: 0 }}\n            whileInView={{\n              opacity: 1,\n              x: dimensions.width + 4,\n              y: dimensions.height + 4,\n            }}\n            style={{\n              rotate: -90,\n            }}\n            transition={{\n              opacity: { duration: 0.1, ease: \"easeInOut\" },\n              duration: 1,\n              ease: \"easeInOut\",\n            }}\n          >\n            <Pointer\n              className={cn(\"h-5 w-5 text-blue-500\", pointerClassName)}\n            />\n          </motion.div>\n        </motion.div>\n      )}\n    </div>\n  );\n}\n\nconst Pointer = ({ ...props }: React.SVGProps<SVGSVGElement>) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      strokeWidth=\"1\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 16 16\"\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\"></path>\n    </svg>\n  );\n};\n\n```","type": "hover animation"}
{"source":"aceternity ui","name":"resizable-navbar","prompt": "Generate an Aceternity UI component for a resizable and responsive navigation bar with scroll-based animation using Tailwind and React.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { IconMenu2, IconX } from \"@tabler/icons-react\";\nimport {\n  motion,\n  AnimatePresence,\n  useScroll,\n  useMotionValueEvent,\n} from \"motion/react\";\n\nimport React, { useRef, useState } from \"react\";\n\n\ninterface NavbarProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface NavBodyProps {\n  children: React.ReactNode;\n  className?: string;\n  visible?: boolean;\n}\n\ninterface NavItemsProps {\n  items: {\n    name: string;\n    link: string;\n  }[];\n  className?: string;\n  onItemClick?: () => void;\n}\n\ninterface MobileNavProps {\n  children: React.ReactNode;\n  className?: string;\n  visible?: boolean;\n}\n\ninterface MobileNavHeaderProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface MobileNavMenuProps {\n  children: React.ReactNode;\n  className?: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const Navbar = ({ children, className }: NavbarProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollY } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n  const [visible, setVisible] = useState<boolean>(false);\n\n  useMotionValueEvent(scrollY, \"change\", (latest) => {\n    if (latest > 100) {\n      setVisible(true);\n    } else {\n      setVisible(false);\n    }\n  });\n\n  return (\n    <motion.div\n      ref={ref}\n      // IMPORTANT: Change this to class of `fixed` if you want the navbar to be fixed\n      className={cn(\"sticky inset-x-0 top-20 z-40 w-full\", className)}\n    >\n      {React.Children.map(children, (child) =>\n        React.isValidElement(child)\n          ? React.cloneElement(\n              child as React.ReactElement<{ visible?: boolean }>,\n              { visible },\n            )\n          : child,\n      )}\n    </motion.div>\n  );\n};\n\nexport const NavBody = ({ children, className, visible }: NavBodyProps) => {\n  return (\n    <motion.div\n      animate={{\n        backdropFilter: visible ? \"blur(10px)\" : \"none\",\n        boxShadow: visible\n          ? \"0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset\"\n          : \"none\",\n        width: visible ? \"40%\" : \"100%\",\n        y: visible ? 20 : 0,\n      }}\n      transition={{\n        type: \"spring\",\n        stiffness: 200,\n        damping: 50,\n      }}\n      style={{\n        minWidth: \"800px\",\n      }}\n      className={cn(\n        \"relative z-[60] mx-auto hidden w-full max-w-7xl flex-row items-center justify-between self-start rounded-full bg-transparent px-4 py-2 lg:flex dark:bg-transparent\",\n        visible && \"bg-white/80 dark:bg-neutral-950/80\",\n        className,\n      )}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\nexport const NavItems = ({ items, className, onItemClick }: NavItemsProps) => {\n  const [hovered, setHovered] = useState<number | null>(null);\n\n  return (\n    <motion.div\n      onMouseLeave={() => setHovered(null)}\n      className={cn(\n        \"absolute inset-0 hidden flex-1 flex-row items-center justify-center space-x-2 text-sm font-medium text-zinc-600 transition duration-200 hover:text-zinc-800 lg:flex lg:space-x-2\",\n        className,\n      )}\n    >\n      {items.map((item, idx) => (\n        <a\n          onMouseEnter={() => setHovered(idx)}\n          onClick={onItemClick}\n          className=\"relative px-4 py-2 text-neutral-600 dark:text-neutral-300\"\n          key={`link-${idx}`}\n          href={item.link}\n        >\n          {hovered === idx && (\n            <motion.div\n              layoutId=\"hovered\"\n              className=\"absolute inset-0 h-full w-full rounded-full bg-gray-100 dark:bg-neutral-800\"\n            />\n          )}\n          <span className=\"relative z-20\">{item.name}</span>\n        </a>\n      ))}\n    </motion.div>\n  );\n};\n\nexport const MobileNav = ({ children, className, visible }: MobileNavProps) => {\n  return (\n    <motion.div\n      animate={{\n        backdropFilter: visible ? \"blur(10px)\" : \"none\",\n        boxShadow: visible\n          ? \"0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset\"\n          : \"none\",\n        width: visible ? \"90%\" : \"100%\",\n        paddingRight: visible ? \"12px\" : \"0px\",\n        paddingLeft: visible ? \"12px\" : \"0px\",\n        borderRadius: visible ? \"4px\" : \"2rem\",\n        y: visible ? 20 : 0,\n      }}\n      transition={{\n        type: \"spring\",\n        stiffness: 200,\n        damping: 50,\n      }}\n      className={cn(\n        \"relative z-50 mx-auto flex w-full max-w-[calc(100vw-2rem)] flex-col items-center justify-between bg-transparent px-0 py-2 lg:hidden\",\n        visible && \"bg-white/80 dark:bg-neutral-950/80\",\n        className,\n      )}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\nexport const MobileNavHeader = ({\n  children,\n  className,\n}: MobileNavHeaderProps) => {\n  return (\n    <div\n      className={cn(\n        \"flex w-full flex-row items-center justify-between\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const MobileNavMenu = ({\n  children,\n  className,\n  isOpen,\n  onClose,\n}: MobileNavMenuProps) => {\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className={cn(\n            \"absolute inset-x-0 top-16 z-50 flex w-full flex-col items-start justify-start gap-4 rounded-lg bg-white px-4 py-8 shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset] dark:bg-neutral-950\",\n            className,\n          )}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport const MobileNavToggle = ({\n  isOpen,\n  onClick,\n}: {\n  isOpen: boolean;\n  onClick: () => void;\n}) => {\n  return isOpen ? (\n    <IconX className=\"text-black dark:text-white\" onClick={onClick} />\n  ) : (\n    <IconMenu2 className=\"text-black dark:text-white\" onClick={onClick} />\n  );\n};\n\nexport const NavbarLogo = () => {\n  return (\n    <a\n      href=\"#\"\n      className=\"relative z-20 mr-4 flex items-center space-x-2 px-2 py-1 text-sm font-normal text-black\"\n    >\n      <img\n        src=\"https://assets.aceternity.com/logo-dark.png\"\n        alt=\"logo\"\n        width={30}\n        height={30}\n      />\n      <span className=\"font-medium text-black dark:text-white\">Startup</span>\n    </a>\n  );\n};\n\nexport const NavbarButton = ({\n  href,\n  as: Tag = \"a\",\n  children,\n  className,\n  variant = \"primary\",\n  ...props\n}: {\n  href?: string;\n  as?: React.ElementType;\n  children: React.ReactNode;\n  className?: string;\n  variant?: \"primary\" | \"secondary\" | \"dark\" | \"gradient\";\n} & (\n  | React.ComponentPropsWithoutRef<\"a\">\n  | React.ComponentPropsWithoutRef<\"button\">\n)) => {\n  const baseStyles =\n    \"px-4 py-2 rounded-md bg-white button bg-white text-black text-sm font-bold relative cursor-pointer hover:-translate-y-0.5 transition duration-200 inline-block text-center\";\n\n  const variantStyles = {\n    primary:\n      \"shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset]\",\n    secondary: \"bg-transparent shadow-none dark:text-white\",\n    dark: \"bg-black text-white shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset]\",\n    gradient:\n      \"bg-gradient-to-b from-blue-500 to-blue-700 text-white shadow-[0px_2px_0px_0px_rgba(255,255,255,0.3)_inset]\",\n  };\n\n  return (\n    <Tag\n      href={href || undefined}\n      className={cn(baseStyles, variantStyles[variant], className)}\n      {...props}\n    >\n      {children}\n    </Tag>\n  );\n};\n\n```","type": "navigation"}
{"source":"aceternity ui","name":"sticky-banner","prompt": "Generate an Aceternity UI component for a sticky animated top banner that hides on scroll using Tailwind, Motion, and React.","completion": "```jsx\n\"use client\";\nimport React, { SVGProps, useState } from \"react\";\nimport { motion, useMotionValueEvent, useScroll } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const StickyBanner = ({\n  className,\n  children,\n  hideOnScroll = false,\n}: {\n  className?: string;\n  children: React.ReactNode;\n  hideOnScroll?: boolean;\n}) => {\n  const [open, setOpen] = useState(true);\n  const { scrollY } = useScroll();\n\n  useMotionValueEvent(scrollY, \"change\", (latest) => {\n    console.log(latest);\n    if (hideOnScroll && latest > 40) {\n      setOpen(false);\n    } else {\n      setOpen(true);\n    }\n  });\n\n  return (\n    <motion.div\n      className={cn(\n        \"sticky inset-x-0 top-0 z-40 flex min-h-14 w-full items-center justify-center bg-transparent px-4 py-1\",\n        className,\n      )}\n      initial={{\n        y: -100,\n        opacity: 0,\n      }}\n      animate={{\n        y: open ? 0 : -100,\n        opacity: open ? 1 : 0,\n      }}\n      transition={{\n        duration: 0.3,\n        ease: \"easeInOut\",\n      }}\n    >\n      {children}\n\n      <motion.button\n        initial={{\n          scale: 0,\n        }}\n        animate={{\n          scale: 1,\n        }}\n        className=\"absolute top-1/2 right-2 -translate-y-1/2 cursor-pointer\"\n        onClick={() => setOpen(!open)}\n      >\n        <CloseIcon className=\"h-5 w-5 text-white\" />\n      </motion.button>\n    </motion.div>\n  );\n};\n\nconst CloseIcon = (props: SVGProps<SVGSVGElement>) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M18 6l-12 12\" />\n      <path d=\"M6 6l12 12\" />\n    </svg>\n  );\n};\n\n```","type": "banner"}
{"source":"aceternity ui","name":"world-map","prompt": "Generate an Aceternity UI component that renders a world map with animated curved path connections using SVG and DottedMap, styled with Tailwind and React.","completion": "```jsx\n\"use client\";\n\nimport { useRef } from \"react\";\nimport { motion } from \"motion/react\";\nimport DottedMap from \"dotted-map\";\n\nimport { useTheme } from \"next-themes\";\n\ninterface MapProps {\n  dots?: Array<{\n    start: { lat: number; lng: number; label?: string };\n    end: { lat: number; lng: number; label?: string };\n  }>;\n  lineColor?: string;\n}\n\nexport default function WorldMap({\n  dots = [],\n  lineColor = \"#0ea5e9\",\n}: MapProps) {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const map = new DottedMap({ height: 100, grid: \"diagonal\" });\n\n  const { theme } = useTheme();\n\n  const svgMap = map.getSVG({\n    radius: 0.22,\n    color: theme === \"dark\" ? \"#FFFFFF40\" : \"#00000040\",\n    shape: \"circle\",\n    backgroundColor: theme === \"dark\" ? \"black\" : \"white\",\n  });\n\n  const projectPoint = (lat: number, lng: number) => {\n    const x = (lng + 180) * (800 / 360);\n    const y = (90 - lat) * (400 / 180);\n    return { x, y };\n  };\n\n  const createCurvedPath = (\n    start: { x: number; y: number },\n    end: { x: number; y: number }\n  ) => {\n    const midX = (start.x + end.x) / 2;\n    const midY = Math.min(start.y, end.y) - 50;\n    return `M ${start.x} ${start.y} Q ${midX} ${midY} ${end.x} ${end.y}`;\n  };\n\n  return (\n    <div className=\"w-full aspect-[2/1] dark:bg-black bg-white rounded-lg  relative font-sans\">\n      <img\n        src={`data:image/svg+xml;utf8,${encodeURIComponent(svgMap)}`}\n        className=\"h-full w-full [mask-image:linear-gradient(to_bottom,transparent,white_10%,white_90%,transparent)] pointer-events-none select-none\"\n        alt=\"world map\"\n        height=\"495\"\n        width=\"1056\"\n        draggable={false}\n      />\n      <svg\n        ref={svgRef}\n        viewBox=\"0 0 800 400\"\n        className=\"w-full h-full absolute inset-0 pointer-events-none select-none\"\n      >\n        {dots.map((dot, i) => {\n          const startPoint = projectPoint(dot.start.lat, dot.start.lng);\n          const endPoint = projectPoint(dot.end.lat, dot.end.lng);\n          return (\n            <g key={`path-group-${i}`}>\n              <motion.path\n                d={createCurvedPath(startPoint, endPoint)}\n                fill=\"none\"\n                stroke=\"url(#path-gradient)\"\n                strokeWidth=\"1\"\n                initial={{\n                  pathLength: 0,\n                }}\n                animate={{\n                  pathLength: 1,\n                }}\n                transition={{\n                  duration: 1,\n                  delay: 0.5 * i,\n                  ease: \"easeOut\",\n                }}\n                key={`start-upper-${i}`}\n              ></motion.path>\n            </g>\n          );\n        })}\n\n        <defs>\n          <linearGradient id=\"path-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"white\" stopOpacity=\"0\" />\n            <stop offset=\"5%\" stopColor={lineColor} stopOpacity=\"1\" />\n            <stop offset=\"95%\" stopColor={lineColor} stopOpacity=\"1\" />\n            <stop offset=\"100%\" stopColor=\"white\" stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n\n        {dots.map((dot, i) => (\n          <g key={`points-group-${i}`}>\n            <g key={`start-${i}`}>\n              <circle\n                cx={projectPoint(dot.start.lat, dot.start.lng).x}\n                cy={projectPoint(dot.start.lat, dot.start.lng).y}\n                r=\"2\"\n                fill={lineColor}\n              />\n              <circle\n                cx={projectPoint(dot.start.lat, dot.start.lng).x}\n                cy={projectPoint(dot.start.lat, dot.start.lng).y}\n                r=\"2\"\n                fill={lineColor}\n                opacity=\"0.5\"\n              >\n                <animate\n                  attributeName=\"r\"\n                  from=\"2\"\n                  to=\"8\"\n                  dur=\"1.5s\"\n                  begin=\"0s\"\n                  repeatCount=\"indefinite\"\n                />\n                <animate\n                  attributeName=\"opacity\"\n                  from=\"0.5\"\n                  to=\"0\"\n                  dur=\"1.5s\"\n                  begin=\"0s\"\n                  repeatCount=\"indefinite\"\n                />\n              </circle>\n            </g>\n            <g key={`end-${i}`}>\n              <circle\n                cx={projectPoint(dot.end.lat, dot.end.lng).x}\n                cy={projectPoint(dot.end.lat, dot.end.lng).y}\n                r=\"2\"\n                fill={lineColor}\n              />\n              <circle\n                cx={projectPoint(dot.end.lat, dot.end.lng).x}\n                cy={projectPoint(dot.end.lat, dot.end.lng).y}\n                r=\"2\"\n                fill={lineColor}\n                opacity=\"0.5\"\n              >\n                <animate\n                  attributeName=\"r\"\n                  from=\"2\"\n                  to=\"8\"\n                  dur=\"1.5s\"\n                  begin=\"0s\"\n                  repeatCount=\"indefinite\"\n                />\n                <animate\n                  attributeName=\"opacity\"\n                  from=\"0.5\"\n                  to=\"0\"\n                  dur=\"1.5s\"\n                  begin=\"0s\"\n                  repeatCount=\"indefinite\"\n                />\n              </circle>\n            </g>\n          </g>\n        ))}\n      </svg>\n    </div>\n  );\n}\n\n```","type": "map"}
{"source":"aceternity ui","name":"google-gemini-effect","prompt": "Generate an Aceternity UI animation component that animates SVG paths on scroll using motion and gradients, styled with Tailwind and React.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, MotionValue } from \"motion/react\";\nimport React from \"react\";\n\nconst transition = {\n  duration: 0,\n  ease: \"linear\",\n};\n\nexport const GoogleGeminiEffect = ({\n  pathLengths,\n  title,\n  description,\n  className,\n}: {\n  pathLengths: MotionValue[];\n  title?: string;\n  description?: string;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"sticky top-80\", className)}>\n      <p className=\"text-lg md:text-7xl font-normal pb-4 text-center bg-clip-text text-transparent bg-gradient-to-b from-neutral-100 to-neutral-300\">\n        {title || `Build with Aceternity UI`}\n      </p>\n      <p className=\"text-xs md:text-xl font-normal text-center text-neutral-400 mt-4 max-w-lg mx-auto\">\n        {description ||\n          `Scroll this component and see the bottom SVG come to life wow this\n        works!`}\n      </p>\n      <div className=\"w-full h-[890px] -top-60 md:-top-40  flex items-center justify-center bg-red-transparent absolute \">\n        <button className=\"font-bold bg-white rounded-full md:px-4 md:py-2 px-2 py-1 md:mt-24 mt-8 z-30 md:text-base text-black text-xs  w-fit mx-auto \">\n          ui.aceternity.com\n        </button>\n      </div>\n      <svg\n        width=\"1440\"\n        height=\"890\"\n        viewBox=\"0 0 1440 890\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\" absolute -top-60  md:-top-40 w-full\"\n      >\n        <motion.path\n          d=\"M0 663C145.5 663 191 666.265 269 647C326.5 630 339.5 621 397.5 566C439 531.5 455 529.5 490 523C509.664 519.348 521 503.736 538 504.236C553.591 504.236 562.429 514.739 584.66 522.749C592.042 525.408 600.2 526.237 607.356 523.019C624.755 515.195 641.446 496.324 657 496.735C673.408 496.735 693.545 519.572 712.903 526.769C718.727 528.934 725.184 528.395 730.902 525.965C751.726 517.115 764.085 497.106 782 496.735C794.831 496.47 804.103 508.859 822.469 518.515C835.13 525.171 850.214 526.815 862.827 520.069C875.952 513.049 889.748 502.706 903.5 503.736C922.677 505.171 935.293 510.562 945.817 515.673C954.234 519.76 963.095 522.792 972.199 524.954C996.012 530.611 1007.42 534.118 1034 549C1077.5 573.359 1082.5 594.5 1140 629C1206 670 1328.5 662.5 1440 662.5\"\n          stroke=\"#FFB7C5\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[0],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0 587.5C147 587.5 277 587.5 310 573.5C348 563 392.5 543.5 408 535C434 523.5 426 526.235 479 515.235C494 512.729 523 510.435 534.5 512.735C554.5 516.735 555.5 523.235 576 523.735C592 523.735 616 496.735 633 497.235C648.671 497.235 661.31 515.052 684.774 524.942C692.004 527.989 700.2 528.738 707.349 525.505C724.886 517.575 741.932 498.33 757.5 498.742C773.864 498.742 791.711 520.623 810.403 527.654C816.218 529.841 822.661 529.246 828.451 526.991C849.246 518.893 861.599 502.112 879.5 501.742C886.47 501.597 896.865 506.047 907.429 510.911C930.879 521.707 957.139 519.639 982.951 520.063C1020.91 520.686 1037.5 530.797 1056.5 537C1102.24 556.627 1116.5 570.704 1180.5 579.235C1257.5 589.5 1279 587 1440 588\"\n          stroke=\"#FFDDB7\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[1],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0 514C147.5 514.333 294.5 513.735 380.5 513.735C405.976 514.94 422.849 515.228 436.37 515.123C477.503 514.803 518.631 506.605 559.508 511.197C564.04 511.706 569.162 512.524 575 513.735C588 516.433 616 521.702 627.5 519.402C647.5 515.402 659 499.235 680.5 499.235C700.5 499.235 725 529.235 742 528.735C757.654 528.735 768.77 510.583 791.793 500.59C798.991 497.465 807.16 496.777 814.423 499.745C832.335 507.064 850.418 524.648 866 524.235C882.791 524.235 902.316 509.786 921.814 505.392C926.856 504.255 932.097 504.674 937.176 505.631C966.993 511.248 970.679 514.346 989.5 514.735C1006.3 515.083 1036.5 513.235 1055.5 513.235C1114.5 513.235 1090.5 513.235 1124 513.235C1177.5 513.235 1178.99 514.402 1241 514.402C1317.5 514.402 1274.5 512.568 1440 513.235\"\n          stroke=\"#B1C5FF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[2],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0 438.5C150.5 438.5 261 438.318 323.5 456.5C351 464.5 387.517 484.001 423.5 494.5C447.371 501.465 472 503.735 487 507.735C503.786 512.212 504.5 516.808 523 518.735C547 521.235 564.814 501.235 584.5 501.235C604.5 501.235 626 529.069 643 528.569C658.676 528.569 672.076 511.63 695.751 501.972C703.017 499.008 711.231 498.208 718.298 501.617C735.448 509.889 751.454 529.98 767 529.569C783.364 529.569 801.211 507.687 819.903 500.657C825.718 498.469 832.141 499.104 837.992 501.194C859.178 508.764 873.089 523.365 891 523.735C907.8 524.083 923 504.235 963 506.735C1034.5 506.735 1047.5 492.68 1071 481.5C1122.5 457 1142.23 452.871 1185 446.5C1255.5 436 1294 439 1439.5 439\"\n          stroke=\"#4FABFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[3],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0.5 364C145.288 362.349 195 361.5 265.5 378C322 391.223 399.182 457.5 411 467.5C424.176 478.649 456.916 491.677 496.259 502.699C498.746 503.396 501.16 504.304 503.511 505.374C517.104 511.558 541.149 520.911 551.5 521.236C571.5 521.236 590 498.736 611.5 498.736C631.5 498.736 652.5 529.236 669.5 528.736C685.171 528.736 697.81 510.924 721.274 501.036C728.505 497.988 736.716 497.231 743.812 500.579C761.362 508.857 778.421 529.148 794 528.736C810.375 528.736 829.35 508.68 848.364 502.179C854.243 500.169 860.624 500.802 866.535 502.718C886.961 509.338 898.141 519.866 916 520.236C932.8 520.583 934.5 510.236 967.5 501.736C1011.5 491 1007.5 493.5 1029.5 480C1069.5 453.5 1072 440.442 1128.5 403.5C1180.5 369.5 1275 360.374 1439 364\"\n          stroke=\"#076EFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[4],\n          }}\n          transition={transition}\n        />\n\n        {/* Gaussian blur for the background paths */}\n\n        <path\n          d=\"M0 663C145.5 663 191 666.265 269 647C326.5 630 339.5 621 397.5 566C439 531.5 455 529.5 490 523C509.664 519.348 521 503.736 538 504.236C553.591 504.236 562.429 514.739 584.66 522.749C592.042 525.408 600.2 526.237 607.356 523.019C624.755 515.195 641.446 496.324 657 496.735C673.408 496.735 693.545 519.572 712.903 526.769C718.727 528.934 725.184 528.395 730.902 525.965C751.726 517.115 764.085 497.106 782 496.735C794.831 496.47 804.103 508.859 822.469 518.515C835.13 525.171 850.214 526.815 862.827 520.069C875.952 513.049 889.748 502.706 903.5 503.736C922.677 505.171 935.293 510.562 945.817 515.673C954.234 519.76 963.095 522.792 972.199 524.954C996.012 530.611 1007.42 534.118 1034 549C1077.5 573.359 1082.5 594.5 1140 629C1206 670 1328.5 662.5 1440 662.5\"\n          stroke=\"#FFB7C5\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0 587.5C147 587.5 277 587.5 310 573.5C348 563 392.5 543.5 408 535C434 523.5 426 526.235 479 515.235C494 512.729 523 510.435 534.5 512.735C554.5 516.735 555.5 523.235 576 523.735C592 523.735 616 496.735 633 497.235C648.671 497.235 661.31 515.052 684.774 524.942C692.004 527.989 700.2 528.738 707.349 525.505C724.886 517.575 741.932 498.33 757.5 498.742C773.864 498.742 791.711 520.623 810.403 527.654C816.218 529.841 822.661 529.246 828.451 526.991C849.246 518.893 861.599 502.112 879.5 501.742C886.47 501.597 896.865 506.047 907.429 510.911C930.879 521.707 957.139 519.639 982.951 520.063C1020.91 520.686 1037.5 530.797 1056.5 537C1102.24 556.627 1116.5 570.704 1180.5 579.235C1257.5 589.5 1279 587 1440 588\"\n          stroke=\"#FFDDB7\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0 514C147.5 514.333 294.5 513.735 380.5 513.735C405.976 514.94 422.849 515.228 436.37 515.123C477.503 514.803 518.631 506.605 559.508 511.197C564.04 511.706 569.162 512.524 575 513.735C588 516.433 616 521.702 627.5 519.402C647.5 515.402 659 499.235 680.5 499.235C700.5 499.235 725 529.235 742 528.735C757.654 528.735 768.77 510.583 791.793 500.59C798.991 497.465 807.16 496.777 814.423 499.745C832.335 507.064 850.418 524.648 866 524.235C882.791 524.235 902.316 509.786 921.814 505.392C926.856 504.255 932.097 504.674 937.176 505.631C966.993 511.248 970.679 514.346 989.5 514.735C1006.3 515.083 1036.5 513.235 1055.5 513.235C1114.5 513.235 1090.5 513.235 1124 513.235C1177.5 513.235 1178.99 514.402 1241 514.402C1317.5 514.402 1274.5 512.568 1440 513.235\"\n          stroke=\"#B1C5FF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0 438.5C150.5 438.5 261 438.318 323.5 456.5C351 464.5 387.517 484.001 423.5 494.5C447.371 501.465 472 503.735 487 507.735C503.786 512.212 504.5 516.808 523 518.735C547 521.235 564.814 501.235 584.5 501.235C604.5 501.235 626 529.069 643 528.569C658.676 528.569 672.076 511.63 695.751 501.972C703.017 499.008 711.231 498.208 718.298 501.617C735.448 509.889 751.454 529.98 767 529.569C783.364 529.569 801.211 507.687 819.903 500.657C825.718 498.469 832.141 499.104 837.992 501.194C859.178 508.764 873.089 523.365 891 523.735C907.8 524.083 923 504.235 963 506.735C1034.5 506.735 1047.5 492.68 1071 481.5C1122.5 457 1142.23 452.871 1185 446.5C1255.5 436 1294 439 1439.5 439\"\n          stroke=\"#4FABFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0.5 364C145.288 362.349 195 361.5 265.5 378C322 391.223 399.182 457.5 411 467.5C424.176 478.649 456.916 491.677 496.259 502.699C498.746 503.396 501.16 504.304 503.511 505.374C517.104 511.558 541.149 520.911 551.5 521.236C571.5 521.236 590 498.736 611.5 498.736C631.5 498.736 652.5 529.236 669.5 528.736C685.171 528.736 697.81 510.924 721.274 501.036C728.505 497.988 736.716 497.231 743.812 500.579C761.362 508.857 778.421 529.148 794 528.736C810.375 528.736 829.35 508.68 848.364 502.179C854.243 500.169 860.624 500.802 866.535 502.718C886.961 509.338 898.141 519.866 916 520.236C932.8 520.583 934.5 510.236 967.5 501.736C1011.5 491 1007.5 493.5 1029.5 480C1069.5 453.5 1072 440.442 1128.5 403.5C1180.5 369.5 1275 360.374 1439 364\"\n          stroke=\"#076EFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n\n        <defs>\n          <filter id=\"blurMe\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" />\n          </filter>\n        </defs>\n      </svg>\n    </div>\n  );\n};\n\n```","type": "animation"}
{"source":"aceternity ui","name":"tracing-beam","prompt": "Generate an Aceternity UI component that creates a vertical tracing beam animation synchronized with scroll using React and motion.","completion": "```jsx\n\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n  motion,\n  useTransform,\n  useScroll,\n  useVelocity,\n  useSpring,\n} from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const TracingBeam = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [svgHeight, setSvgHeight] = useState(0);\n\n  useEffect(() => {\n    if (contentRef.current) {\n      setSvgHeight(contentRef.current.offsetHeight);\n    }\n  }, []);\n\n  const y1 = useSpring(\n    useTransform(scrollYProgress, [0, 0.8], [50, svgHeight]),\n    {\n      stiffness: 500,\n      damping: 90,\n    },\n  );\n  const y2 = useSpring(\n    useTransform(scrollYProgress, [0, 1], [50, svgHeight - 200]),\n    {\n      stiffness: 500,\n      damping: 90,\n    },\n  );\n\n  return (\n    <motion.div\n      ref={ref}\n      className={cn(\"relative mx-auto h-full w-full max-w-4xl\", className)}\n    >\n      <div className=\"absolute top-3 -left-4 md:-left-20\">\n        <motion.div\n          transition={{\n            duration: 0.2,\n            delay: 0.5,\n          }}\n          animate={{\n            boxShadow:\n              scrollYProgress.get() > 0\n                ? \"none\"\n                : \"rgba(0, 0, 0, 0.24) 0px 3px 8px\",\n          }}\n          className=\"border-netural-200 ml-[27px] flex h-4 w-4 items-center justify-center rounded-full border shadow-sm\"\n        >\n          <motion.div\n            transition={{\n              duration: 0.2,\n              delay: 0.5,\n            }}\n            animate={{\n              backgroundColor: scrollYProgress.get() > 0 ? \"white\" : \"#10b981\",\n              borderColor: scrollYProgress.get() > 0 ? \"white\" : \"#059669\",\n            }}\n            className=\"h-2 w-2 rounded-full border border-neutral-300 bg-white\"\n          />\n        </motion.div>\n        <svg\n          viewBox={`0 0 20 ${svgHeight}`}\n          width=\"20\"\n          height={svgHeight} // Set the SVG height\n          className=\"ml-4 block\"\n          aria-hidden=\"true\"\n        >\n          <motion.path\n            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}\n            fill=\"none\"\n            stroke=\"#9091A0\"\n            strokeOpacity=\"0.16\"\n            transition={{\n              duration: 10,\n            }}\n          ></motion.path>\n          <motion.path\n            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}\n            fill=\"none\"\n            stroke=\"url(#gradient)\"\n            strokeWidth=\"1.25\"\n            className=\"motion-reduce:hidden\"\n            transition={{\n              duration: 10,\n            }}\n          ></motion.path>\n          <defs>\n            <motion.linearGradient\n              id=\"gradient\"\n              gradientUnits=\"userSpaceOnUse\"\n              x1=\"0\"\n              x2=\"0\"\n              y1={y1} // set y1 for gradient\n              y2={y2} // set y2 for gradient\n            >\n              <stop stopColor=\"#18CCFC\" stopOpacity=\"0\"></stop>\n              <stop stopColor=\"#18CCFC\"></stop>\n              <stop offset=\"0.325\" stopColor=\"#6344F5\"></stop>\n              <stop offset=\"1\" stopColor=\"#AE48FF\" stopOpacity=\"0\"></stop>\n            </motion.linearGradient>\n          </defs>\n        </svg>\n      </div>\n      <div ref={contentRef}>{children}</div>\n    </motion.div>\n  );\n};\n\n```","type": "scroll-animation"}
{"source":"aceternity ui","name":"3D-marquee","prompt": "Generate an Aceternity UI component for a 3D animated marquee of images with scroll motion and grid effects using Tailwind and React.","completion": "```jsx\n\"use client\";\n\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nexport const ThreeDMarquee = ({\n  images,\n  className,\n}: {\n  images: string[];\n  className?: string;\n}) => {\n  // Split the images array into 4 equal parts\n  const chunkSize = Math.ceil(images.length / 4);\n  const chunks = Array.from({ length: 4 }, (_, colIndex) => {\n    const start = colIndex * chunkSize;\n    return images.slice(start, start + chunkSize);\n  });\n  return (\n    <div\n      className={cn(\n        \"mx-auto block h-[600px] overflow-hidden rounded-2xl max-sm:h-100\",\n        className,\n      )}\n    >\n      <div className=\"flex size-full items-center justify-center\">\n        <div className=\"size-[1720px] shrink-0 scale-50 sm:scale-75 lg:scale-100\">\n          <div\n            style={{\n              transform: \"rotateX(55deg) rotateY(0deg) rotateZ(-45deg)\",\n            }}\n            className=\"relative top-96 right-[50%] grid size-full origin-top-left grid-cols-4 gap-8 transform-3d\"\n          >\n            {chunks.map((subarray, colIndex) => (\n              <motion.div\n                animate={{ y: colIndex % 2 === 0 ? 100 : -100 }}\n                transition={{\n                  duration: colIndex % 2 === 0 ? 10 : 15,\n                  repeat: Infinity,\n                  repeatType: \"reverse\",\n                }}\n                key={colIndex + \"marquee\"}\n                className=\"flex flex-col items-start gap-8\"\n              >\n                <GridLineVertical className=\"-left-4\" offset=\"80px\" />\n                {subarray.map((image, imageIndex) => (\n                  <div className=\"relative\" key={imageIndex + image}>\n                    <GridLineHorizontal className=\"-top-4\" offset=\"20px\" />\n                    <motion.img\n                      whileHover={{\n                        y: -10,\n                      }}\n                      transition={{\n                        duration: 0.3,\n                        ease: \"easeInOut\",\n                      }}\n                      key={imageIndex + image}\n                      src={image}\n                      alt={`Image ${imageIndex + 1}`}\n                      className=\"aspect-[970/700] rounded-lg object-cover ring ring-gray-950/5 hover:shadow-2xl\"\n                      width={970}\n                      height={700}\n                    />\n                  </div>\n                ))}\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst GridLineHorizontal = ({\n  className,\n  offset,\n}: {\n  className?: string;\n  offset?: string;\n}) => {\n  return (\n    <div\n      style={\n        {\n          \"--background\": \"#ffffff\",\n          \"--color\": \"rgba(0, 0, 0, 0.2)\",\n          \"--height\": \"1px\",\n          \"--width\": \"5px\",\n          \"--fade-stop\": \"90%\",\n          \"--offset\": offset || \"200px\", //-100px if you want to keep the line inside\n          \"--color-dark\": \"rgba(255, 255, 255, 0.2)\",\n          maskComposite: \"exclude\",\n        } as React.CSSProperties\n      }\n      className={cn(\n        \"absolute left-[calc(var(--offset)/2*-1)] h-[var(--height)] w-[calc(100%+var(--offset))]\",\n        \"bg-[linear-gradient(to_right,var(--color),var(--color)_50%,transparent_0,transparent)]\",\n        \"[background-size:var(--width)_var(--height)]\",\n        \"[mask:linear-gradient(to_left,var(--background)_var(--fade-stop),transparent),_linear-gradient(to_right,var(--background)_var(--fade-stop),transparent),_linear-gradient(black,black)]\",\n        \"[mask-composite:exclude]\",\n        \"z-30\",\n        \"dark:bg-[linear-gradient(to_right,var(--color-dark),var(--color-dark)_50%,transparent_0,transparent)]\",\n        className,\n      )}\n    ></div>\n  );\n};\n\nconst GridLineVertical = ({\n  className,\n  offset,\n}: {\n  className?: string;\n  offset?: string;\n}) => {\n  return (\n    <div\n      style={\n        {\n          \"--background\": \"#ffffff\",\n          \"--color\": \"rgba(0, 0, 0, 0.2)\",\n          \"--height\": \"5px\",\n          \"--width\": \"1px\",\n          \"--fade-stop\": \"90%\",\n          \"--offset\": offset || \"150px\", //-100px if you want to keep the line inside\n          \"--color-dark\": \"rgba(255, 255, 255, 0.2)\",\n          maskComposite: \"exclude\",\n        } as React.CSSProperties\n      }\n      className={cn(\n        \"absolute top-[calc(var(--offset)/2*-1)] h-[calc(100%+var(--offset))] w-[var(--width)]\",\n        \"bg-[linear-gradient(to_bottom,var(--color),var(--color)_50%,transparent_0,transparent)]\",\n        \"[background-size:var(--width)_var(--height)]\",\n        \"[mask:linear-gradient(to_top,var(--background)_var(--fade-stop),transparent),_linear-gradient(to_bottom,var(--background)_var(--fade-stop),transparent),_linear-gradient(black,black)]\",\n        \"[mask-composite:exclude]\",\n        \"z-30\",\n        \"dark:bg-[linear-gradient(to_bottom,var(--color-dark),var(--color-dark)_50%,transparent_0,transparent)]\",\n        className,\n      )}\n    ></div>\n  );\n};\n\n```", "type": "animation"}
{"source":"aceternity ui","name":"animated-modal-component","prompt":"Generate an Aceternity UI component for a 3D animated modal with trigger overlay and close logic using Tailwind React and motion.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport React, {\n  ReactNode,\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\ninterface ModalContextType {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const ModalProvider = ({ children }: { children: ReactNode }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <ModalContext.Provider value={{ open, setOpen }}>\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModal = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error(\"useModal must be used within a ModalProvider\");\n  }\n  return context;\n};\n\nexport function Modal({ children }: { children: ReactNode }) {\n  return <ModalProvider>{children}</ModalProvider>;\n}\n\nexport const ModalTrigger = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  const { setOpen } = useModal();\n  return (\n    <button\n      className={cn(\n        \"px-4 py-2 rounded-md text-black dark:text-white text-center relative overflow-hidden\",\n        className\n      )}\n      onClick={() => setOpen(true)}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport const ModalBody = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  const { open } = useModal();\n\n  useEffect(() => {\n    if (open) {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"auto\";\n    }\n  }, [open]);\n\n  const modalRef = useRef(null);\n  const { setOpen } = useModal();\n  useOutsideClick(modalRef, () => setOpen(false));\n\n  return (\n    <AnimatePresence>\n      {open && (\n        <motion.div\n          initial={{\n            opacity: 0,\n          }}\n          animate={{\n            opacity: 1,\n            backdropFilter: \"blur(10px)\",\n          }}\n          exit={{\n            opacity: 0,\n            backdropFilter: \"blur(0px)\",\n          }}\n          className=\"fixed [perspective:800px] [transform-style:preserve-3d] inset-0 h-full w-full flex items-center justify-center z-50\"\n        >\n          <Overlay />\n\n          <motion.div\n            ref={modalRef}\n            className={cn(\n              \"min-h-[50%] max-h-[90%] md:max-w-[40%] bg-white dark:bg-neutral-950 border border-transparent dark:border-neutral-800 md:rounded-2xl relative z-50 flex flex-col flex-1 overflow-hidden\",\n              className\n            )}\n            initial={{\n              opacity: 0,\n              scale: 0.5,\n              rotateX: 40,\n              y: 40,\n            }}\n            animate={{\n              opacity: 1,\n              scale: 1,\n              rotateX: 0,\n              y: 0,\n            }}\n            exit={{\n              opacity: 0,\n              scale: 0.8,\n              rotateX: 10,\n            }}\n            transition={{\n              type: \"spring\",\n              stiffness: 260,\n              damping: 15,\n            }}\n          >\n            <CloseIcon />\n            {children}\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport const ModalContent = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"flex flex-col flex-1 p-8 md:p-10\", className)}>\n      {children}\n    </div>\n  );\n};\n\nexport const ModalFooter = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"flex justify-end p-4 bg-gray-100 dark:bg-neutral-900\",\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst Overlay = ({ className }: { className?: string }) => {\n  return (\n    <motion.div\n      initial={{\n        opacity: 0,\n      }}\n      animate={{\n        opacity: 1,\n        backdropFilter: \"blur(10px)\",\n      }}\n      exit={{\n        opacity: 0,\n        backdropFilter: \"blur(0px)\",\n      }}\n      className={`fixed inset-0 h-full w-full bg-black bg-opacity-50 z-50 ${className}`}\n    ></motion.div>\n  );\n};\n\nconst CloseIcon = () => {\n  const { setOpen } = useModal();\n  return (\n    <button\n      onClick={() => setOpen(false)}\n      className=\"absolute top-4 right-4 group\"\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"text-black dark:text-white h-4 w-4 group-hover:scale-125 group-hover:rotate-3 transition duration-200\"\n      >\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M18 6l-12 12\" />\n        <path d=\"M6 6l12 12\" />\n      </svg>\n    </button>\n  );\n};\n\nexport const useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement>,\n  callback: Function\n) => {\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      callback(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, callback]);\n};","type":"modal"}
{"source":"aceternity ui","name":"animated-tooltip","prompt": "Generate an Aceternity UI component for an animated tooltip that displays name and designation on hover over user avatars using Tailwind and React.","completion": "```jsx\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport {\n  motion,\n  useTransform,\n  AnimatePresence,\n  useMotionValue,\n  useSpring,\n} from \"motion/react\";\n\nexport const AnimatedTooltip = ({\n  items,\n}: {\n  items: {\n    id: number;\n    name: string;\n    designation: string;\n    image: string;\n  }[];\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const springConfig = { stiffness: 100, damping: 5 };\n  const x = useMotionValue(0); // going to set this value on mouse move\n  // rotate the tooltip\n  const rotate = useSpring(\n    useTransform(x, [-100, 100], [-45, 45]),\n    springConfig,\n  );\n  // translate the tooltip\n  const translateX = useSpring(\n    useTransform(x, [-100, 100], [-50, 50]),\n    springConfig,\n  );\n  const handleMouseMove = (event: any) => {\n    const halfWidth = event.target.offsetWidth / 2;\n    x.set(event.nativeEvent.offsetX - halfWidth); // set the x value, which is then used in transform and rotate\n  };\n\n  return (\n    <>\n      {items.map((item, idx) => (\n        <div\n          className=\"group relative -mr-4\"\n          key={item.name}\n          onMouseEnter={() => setHoveredIndex(item.id)}\n          onMouseLeave={() => setHoveredIndex(null)}\n        >\n          <AnimatePresence mode=\"popLayout\">\n            {hoveredIndex === item.id && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.6 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  scale: 1,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 260,\n                    damping: 10,\n                  },\n                }}\n                exit={{ opacity: 0, y: 20, scale: 0.6 }}\n                style={{\n                  translateX: translateX,\n                  rotate: rotate,\n                  whiteSpace: \"nowrap\",\n                }}\n                className=\"absolute -top-16 left-1/2 z-50 flex -translate-x-1/2 flex-col items-center justify-center rounded-md bg-black px-4 py-2 text-xs shadow-xl\"\n              >\n                <div className=\"absolute inset-x-10 -bottom-px z-30 h-px w-[20%] bg-gradient-to-r from-transparent via-emerald-500 to-transparent\" />\n                <div className=\"absolute -bottom-px left-10 z-30 h-px w-[40%] bg-gradient-to-r from-transparent via-sky-500 to-transparent\" />\n                <div className=\"relative z-30 text-base font-bold text-white\">\n                  {item.name}\n                </div>\n                <div className=\"text-xs text-white\">{item.designation}</div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n          <img\n            onMouseMove={handleMouseMove}\n            height={100}\n            width={100}\n            src={item.image}\n            alt={item.name}\n            className=\"relative !m-0 h-14 w-14 rounded-full border-2 border-white object-cover object-top !p-0 transition duration-500 group-hover:z-30 group-hover:scale-105\"\n          />\n        </div>\n      ))}\n    </>\n  );\n};\n\n```","type": "tooltip"}
{"source":"aceternity ui","name":"aurora-background","prompt": "Generate an Aceternity UI component for a full-screen aurora background effect using animated gradients in Tailwind and React, with optional radial masking.","completion": "```jsx\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport {\n  motion,\n  useTransform,\n  AnimatePresence,\n  useMotionValue,\n  useSpring,\n} from \"motion/react\";\n\nexport const AnimatedTooltip = ({\n  items,\n}: {\n  items: {\n    id: number;\n    name: string;\n    designation: string;\n    image: string;\n  }[];\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const springConfig = { stiffness: 100, damping: 5 };\n  const x = useMotionValue(0); // going to set this value on mouse move\n  // rotate the tooltip\n  const rotate = useSpring(\n    useTransform(x, [-100, 100], [-45, 45]),\n    springConfig,\n  );\n  // translate the tooltip\n  const translateX = useSpring(\n    useTransform(x, [-100, 100], [-50, 50]),\n    springConfig,\n  );\n  const handleMouseMove = (event: any) => {\n    const halfWidth = event.target.offsetWidth / 2;\n    x.set(event.nativeEvent.offsetX - halfWidth); // set the x value, which is then used in transform and rotate\n  };\n\n  return (\n    <>\n      {items.map((item, idx) => (\n        <div\n          className=\"group relative -mr-4\"\n          key={item.name}\n          onMouseEnter={() => setHoveredIndex(item.id)}\n          onMouseLeave={() => setHoveredIndex(null)}\n        >\n          <AnimatePresence mode=\"popLayout\">\n            {hoveredIndex === item.id && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.6 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  scale: 1,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 260,\n                    damping: 10,\n                  },\n                }}\n                exit={{ opacity: 0, y: 20, scale: 0.6 }}\n                style={{\n                  translateX: translateX,\n                  rotate: rotate,\n                  whiteSpace: \"nowrap\",\n                }}\n                className=\"absolute -top-16 left-1/2 z-50 flex -translate-x-1/2 flex-col items-center justify-center rounded-md bg-black px-4 py-2 text-xs shadow-xl\"\n              >\n                <div className=\"absolute inset-x-10 -bottom-px z-30 h-px w-[20%] bg-gradient-to-r from-transparent via-emerald-500 to-transparent\" />\n                <div className=\"absolute -bottom-px left-10 z-30 h-px w-[40%] bg-gradient-to-r from-transparent via-sky-500 to-transparent\" />\n                <div className=\"relative z-30 text-base font-bold text-white\">\n                  {item.name}\n                </div>\n                <div className=\"text-xs text-white\">{item.designation}</div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n          <img\n            onMouseMove={handleMouseMove}\n            height={100}\n            width={100}\n            src={item.image}\n            alt={item.name}\n            className=\"relative !m-0 h-14 w-14 rounded-full border-2 border-white object-cover object-top !p-0 transition duration-500 group-hover:z-30 group-hover:scale-105\"\n          />\n        </div>\n      ))}\n    </>\n  );\n};\n\n```","type": "background"}
{"source":"aceternity ui","name":"background-beams","prompt": "Generate an Aceternity UI component that renders animated background beam paths using SVG and motion for visual enhancement.","completion": "```jsx\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const BackgroundBeams = React.memo(\n  ({ className }: { className?: string }) => {\n    const paths = [\n      \"M-380 -189C-380 -189 -312 216 152 343C616 470 684 875 684 875\",\n      \"M-373 -197C-373 -197 -305 208 159 335C623 462 691 867 691 867\",\n      \"M-366 -205C-366 -205 -298 200 166 327C630 454 698 859 698 859\",\n      // ... truncated for brevity (include full list in dataset)\n    ];\n\n    return (\n      <div\n        className={cn(\n          \"absolute inset-0 flex h-full w-full items-center justify-center [mask-repeat:no-repeat] [mask-size:40px]\",\n          className,\n        )}\n      >\n        <svg\n          className=\"pointer-events-none absolute z-0 h-full w-full\"\n          width=\"100%\"\n          height=\"100%\"\n          viewBox=\"0 0 696 316\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d={paths.join('M')}\n            stroke=\"url(#paint0_radial_242_278)\"\n            strokeOpacity=\"0.05\"\n            strokeWidth=\"0.5\"\n          />\n\n          {paths.map((path, index) => (\n            <motion.path\n              key={`path-` + index}\n              d={path}\n              stroke={`url(#linearGradient-${index})`}\n              strokeOpacity=\"0.4\"\n              strokeWidth=\"0.5\"\n            />\n          ))}\n\n          <defs>\n            {paths.map((_, index) => (\n              <motion.linearGradient\n                id={`linearGradient-${index}`}\n                key={`gradient-${index}`}\n                initial={{ x1: \"0%\", x2: \"0%\", y1: \"0%\", y2: \"0%\" }}\n                animate={{\n                  x1: [\"0%\", \"100%\"],\n                  x2: [\"0%\", \"95%\"],\n                  y1: [\"0%\", \"100%\"],\n                  y2: [\"0%\", `${93 + Math.random() * 8}%`],\n                }}\n                transition={{\n                  duration: Math.random() * 10 + 10,\n                  ease: \"easeInOut\",\n                  repeat: Infinity,\n                  delay: Math.random() * 10,\n                }}\n              >\n                <stop stopColor=\"#18CCFC\" stopOpacity=\"0\" />\n                <stop stopColor=\"#18CCFC\" />\n                <stop offset=\"32.5%\" stopColor=\"#6344F5\" />\n                <stop offset=\"100%\" stopColor=\"#AE48FF\" stopOpacity=\"0\" />\n              </motion.linearGradient>\n            ))}\n\n            <radialGradient\n              id=\"paint0_radial_242_278\"\n              cx=\"0\"\n              cy=\"0\"\n              r=\"1\"\n              gradientUnits=\"userSpaceOnUse\"\n              gradientTransform=\"translate(352 34) rotate(90) scale(555 1560.62)\"\n            >\n              <stop offset=\"0.0666667\" stopColor=\"#d4d4d4\" />\n              <stop offset=\"0.243243\" stopColor=\"#d4d4d4\" />\n              <stop offset=\"0.43594\" stopColor=\"white\" stopOpacity=\"0\" />\n            </radialGradient>\n          </defs>\n        </svg>\n      </div>\n    );\n  }\n);\n\nBackgroundBeams.displayName = \"BackgroundBeams\";\n```","type": "background-animation"}
{"source":"aceternity ui","name":"background-gradient-animation","prompt": "Generate an Aceternity UI component for an animated radial background gradient that responds to mouse movement using Tailwind, React, and CSS variables.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport const BackgroundGradientAnimation = ({\n  gradientBackgroundStart = \"rgb(108, 0, 162)\",\n  gradientBackgroundEnd = \"rgb(0, 17, 82)\",\n  firstColor = \"18, 113, 255\",\n  secondColor = \"221, 74, 255\",\n  thirdColor = \"100, 220, 255\",\n  fourthColor = \"200, 50, 50\",\n  fifthColor = \"180, 180, 50\",\n  pointerColor = \"140, 100, 255\",\n  size = \"80%\",\n  blendingValue = \"hard-light\",\n  children,\n  className,\n  interactive = true,\n  containerClassName,\n}: {\n  gradientBackgroundStart?: string;\n  gradientBackgroundEnd?: string;\n  firstColor?: string;\n  secondColor?: string;\n  thirdColor?: string;\n  fourthColor?: string;\n  fifthColor?: string;\n  pointerColor?: string;\n  size?: string;\n  blendingValue?: string;\n  children?: React.ReactNode;\n  className?: string;\n  interactive?: boolean;\n  containerClassName?: string;\n}) => {\n  const interactiveRef = useRef<HTMLDivElement>(null);\n\n  const [curX, setCurX] = useState(0);\n  const [curY, setCurY] = useState(0);\n  const [tgX, setTgX] = useState(0);\n  const [tgY, setTgY] = useState(0);\n  useEffect(() => {\n    document.body.style.setProperty(\n      \"--gradient-background-start\",\n      gradientBackgroundStart\n    );\n    document.body.style.setProperty(\n      \"--gradient-background-end\",\n      gradientBackgroundEnd\n    );\n    document.body.style.setProperty(\"--first-color\", firstColor);\n    document.body.style.setProperty(\"--second-color\", secondColor);\n    document.body.style.setProperty(\"--third-color\", thirdColor);\n    document.body.style.setProperty(\"--fourth-color\", fourthColor);\n    document.body.style.setProperty(\"--fifth-color\", fifthColor);\n    document.body.style.setProperty(\"--pointer-color\", pointerColor);\n    document.body.style.setProperty(\"--size\", size);\n    document.body.style.setProperty(\"--blending-value\", blendingValue);\n  }, []);\n\n  useEffect(() => {\n    function move() {\n      if (!interactiveRef.current) {\n        return;\n      }\n      setCurX(curX + (tgX - curX) / 20);\n      setCurY(curY + (tgY - curY) / 20);\n      interactiveRef.current.style.transform = `translate(${Math.round(\n        curX\n      )}px, ${Math.round(curY)}px)`;\n    }\n\n    move();\n  }, [tgX, tgY]);\n\n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (interactiveRef.current) {\n      const rect = interactiveRef.current.getBoundingClientRect();\n      setTgX(event.clientX - rect.left);\n      setTgY(event.clientY - rect.top);\n    }\n  };\n\n  const [isSafari, setIsSafari] = useState(false);\n  useEffect(() => {\n    setIsSafari(/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\n  }, []);\n\n  return (\n    <div\n      className={cn(\n        \"h-screen w-screen relative overflow-hidden top-0 left-0 bg-[linear-gradient(40deg,var(--gradient-background-start),var(--gradient-background-end))]\",\n        containerClassName\n      )}\n    >\n      <svg className=\"hidden\">\n        <defs>\n          <filter id=\"blurMe\">\n            <feGaussianBlur\n              in=\"SourceGraphic\"\n              stdDeviation=\"10\"\n              result=\"blur\"\n            />\n            <feColorMatrix\n              in=\"blur\"\n              mode=\"matrix\"\n              values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8\"\n              result=\"goo\"\n            />\n            <feBlend in=\"SourceGraphic\" in2=\"goo\" />\n          </filter>\n        </defs>\n      </svg>\n      <div className={cn(\"\", className)}>{children}</div>\n      <div\n        className={cn(\n          \"gradients-container h-full w-full blur-lg\",\n          isSafari ? \"blur-2xl\" : \"[filter:url(#blurMe)_blur(40px)]\"\n        )}\n      >\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_var(--first-color)_0,_var(--first-color)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:center_center]`,\n            `animate-first`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--second-color),_0.8)_0,_rgba(var(--second-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%-400px)]`,\n            `animate-second`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%+400px)]`,\n            `animate-third`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%-200px)]`,\n            `animate-fourth`,\n            `opacity-70`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.8)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%-800px)_calc(50%+800px)]`,\n            `animate-fifth`,\n            `opacity-100`\n          )}\n        ></div>\n\n        {interactive && (\n          <div\n            ref={interactiveRef}\n            onMouseMove={handleMouseMove}\n            className={cn(\n              `absolute [background:radial-gradient(circle_at_center,_rgba(var(--pointer-color),_0.8)_0,_rgba(var(--pointer-color),_0)_50%)_no-repeat]`,\n              `[mix-blend-mode:var(--blending-value)] w-full h-full -top-1/2 -left-1/2`,\n              `opacity-70`\n            )}\n          ></div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n```","type": "background-animation"}
{"source":"aceternity ui","name":"bento-grid","prompt": "Generate an Aceternity UI component for a responsive bento grid layout with animated hover effects using Tailwind and React.","completion": "```jsx\nimport { cn } from \"@/lib/utils\";\n\nexport const BentoGrid = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"mx-auto grid max-w-7xl grid-cols-1 gap-4 md:auto-rows-[18rem] md:grid-cols-3\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const BentoGridItem = ({\n  className,\n  title,\n  description,\n  header,\n  icon,\n}: {\n  className?: string;\n  title?: string | React.ReactNode;\n  description?: string | React.ReactNode;\n  header?: React.ReactNode;\n  icon?: React.ReactNode;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"group/bento shadow-input row-span-1 flex flex-col justify-between space-y-4 rounded-xl border border-neutral-200 bg-white p-4 transition duration-200 hover:shadow-xl dark:border-white/[0.2] dark:bg-black dark:shadow-none\",\n        className,\n      )}\n    >\n      {header}\n      <div className=\"transition duration-200 group-hover/bento:translate-x-2\">\n        {icon}\n        <div className=\"mt-2 mb-2 font-sans font-bold text-neutral-600 dark:text-neutral-200\">\n          {title}\n        </div>\n        <div className=\"font-sans text-xs font-normal text-neutral-600 dark:text-neutral-300\">\n          {description}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n```","type": "layout"}
{"source":"aceternity ui","name":"canvas-reveal-effect","prompt": "Generate an Aceternity UI component that reveals a pixelated dot matrix effect using shaders and @react-three/fiber inside a full-screen canvas.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport React, { useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nexport const CanvasRevealEffect = ({\n  animationSpeed = 0.4,\n  opacities = [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1],\n  colors = [[0, 255, 255]],\n  containerClassName,\n  dotSize,\n  showGradient = true,\n}: {\n  /**\n   * 0.1 - slower\n   * 1.0 - faster\n   */\n  animationSpeed?: number;\n  opacities?: number[];\n  colors?: number[][];\n  containerClassName?: string;\n  dotSize?: number;\n  showGradient?: boolean;\n}) => {\n  return (\n    <div className={cn(\"h-full relative bg-white w-full\", containerClassName)}>\n      <div className=\"h-full w-full\">\n        <DotMatrix\n          colors={colors ?? [[0, 255, 255]]}\n          dotSize={dotSize ?? 3}\n          opacities={\n            opacities ?? [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]\n          }\n          shader={`\n              float animation_speed_factor = ${animationSpeed.toFixed(1)};\n              float intro_offset = distance(u_resolution / 2.0 / u_total_size, st2) * 0.01 + (random(st2) * 0.15);\n              opacity *= step(intro_offset, u_time * animation_speed_factor);\n              opacity *= clamp((1.0 - step(intro_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\n            `}\n          center={[\"x\", \"y\"]}\n        />\n      </div>\n      {showGradient && (\n        <div className=\"absolute inset-0 bg-gradient-to-t from-gray-950 to-[84%]\" />\n      )}\n    </div>\n  );\n};\n\ninterface DotMatrixProps {\n  colors?: number[][];\n  opacities?: number[];\n  totalSize?: number;\n  dotSize?: number;\n  shader?: string;\n  center?: (\"x\" | \"y\")[];\n}\n\nconst DotMatrix: React.FC<DotMatrixProps> = ({\n  colors = [[0, 0, 0]],\n  opacities = [0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14],\n  totalSize = 4,\n  dotSize = 2,\n  shader = \"\",\n  center = [\"x\", \"y\"],\n}) => {\n  const uniforms = React.useMemo(() => {\n    let colorsArray = [\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n    ];\n    if (colors.length === 2) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[1],\n      ];\n    } else if (colors.length === 3) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[2],\n        colors[2],\n      ];\n    }\n\n    return {\n      u_colors: {\n        value: colorsArray.map((color) => [\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n        ]),\n        type: \"uniform3fv\",\n      },\n      u_opacities: {\n        value: opacities,\n        type: \"uniform1fv\",\n      },\n      u_total_size: {\n        value: totalSize,\n        type: \"uniform1f\",\n      },\n      u_dot_size: {\n        value: dotSize,\n        type: \"uniform1f\",\n      },\n    };\n  }, [colors, opacities, totalSize, dotSize]);\n\n  return (\n    <Shader\n      source={`\n        precision mediump float;\n        in vec2 fragCoord;\n\n        uniform float u_time;\n        uniform float u_opacities[10];\n        uniform vec3 u_colors[6];\n        uniform float u_total_size;\n        uniform float u_dot_size;\n        uniform vec2 u_resolution;\n        out vec4 fragColor;\n        float PHI = 1.61803398874989484820459;\n        float random(vec2 xy) {\n            return fract(tan(distance(xy * PHI, xy) * 0.5) * xy.x);\n        }\n        float map(float value, float min1, float max1, float min2, float max2) {\n            return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n        }\n        void main() {\n            vec2 st = fragCoord.xy;\n            ${\n              center.includes(\"x\")\n                ? \"st.x -= abs(floor((mod(u_resolution.x, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n            ${\n              center.includes(\"y\")\n                ? \"st.y -= abs(floor((mod(u_resolution.y, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n      float opacity = step(0.0, st.x);\n      opacity *= step(0.0, st.y);\n\n      vec2 st2 = vec2(int(st.x / u_total_size), int(st.y / u_total_size));\n\n      float frequency = 5.0;\n      float show_offset = random(st2);\n      float rand = random(st2 * floor((u_time / frequency) + show_offset + frequency) + 1.0);\n      opacity *= u_opacities[int(rand * 10.0)];\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.x / u_total_size));\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.y / u_total_size));\n\n      vec3 color = u_colors[int(show_offset * 6.0)];\n\n      ${shader}\n\n      fragColor = vec4(color, opacity);\n      fragColor.rgb *= fragColor.a;\n        }`}\n      uniforms={uniforms}\n      maxFps={60}\n    />\n  );\n};\n\ntype Uniforms = {\n  [key: string]: {\n    value: number[] | number[][] | number;\n    type: string;\n  };\n};\nconst ShaderMaterial = ({\n  source,\n  uniforms,\n  maxFps = 60,\n}: {\n  source: string;\n  hovered?: boolean;\n  maxFps?: number;\n  uniforms: Uniforms;\n}) => {\n  const { size } = useThree();\n  const ref = useRef<THREE.Mesh>();\n  let lastFrameTime = 0;\n\n  useFrame(({ clock }) => {\n    if (!ref.current) return;\n    const timestamp = clock.getElapsedTime();\n    if (timestamp - lastFrameTime < 1 / maxFps) {\n      return;\n    }\n    lastFrameTime = timestamp;\n\n    const material: any = ref.current.material;\n    const timeLocation = material.uniforms.u_time;\n    timeLocation.value = timestamp;\n  });\n\n  const getUniforms = () => {\n    const preparedUniforms: any = {};\n\n    for (const uniformName in uniforms) {\n      const uniform: any = uniforms[uniformName];\n\n      switch (uniform.type) {\n        case \"uniform1f\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1f\" };\n          break;\n        case \"uniform3f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector3().fromArray(uniform.value),\n            type: \"3f\",\n          };\n          break;\n        case \"uniform1fv\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1fv\" };\n          break;\n        case \"uniform3fv\":\n          preparedUniforms[uniformName] = {\n            value: uniform.value.map((v: number[]) =>\n              new THREE.Vector3().fromArray(v)\n            ),\n            type: \"3fv\",\n          };\n          break;\n        case \"uniform2f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector2().fromArray(uniform.value),\n            type: \"2f\",\n          };\n          break;\n        default:\n          console.error(`Invalid uniform type for '${uniformName}'.`);\n          break;\n      }\n    }\n\n    preparedUniforms[\"u_time\"] = { value: 0, type: \"1f\" };\n    preparedUniforms[\"u_resolution\"] = {\n      value: new THREE.Vector2(size.width * 2, size.height * 2),\n    }; // Initialize u_resolution\n    return preparedUniforms;\n  };\n\n  // Shader material\n  const material = useMemo(() => {\n    const materialObject = new THREE.ShaderMaterial({\n      vertexShader: `\n      precision mediump float;\n      in vec2 coordinates;\n      uniform vec2 u_resolution;\n      out vec2 fragCoord;\n      void main(){\n        float x = position.x;\n        float y = position.y;\n        gl_Position = vec4(x, y, 0.0, 1.0);\n        fragCoord = (position.xy + vec2(1.0)) * 0.5 * u_resolution;\n        fragCoord.y = u_resolution.y - fragCoord.y;\n      }\n      `,\n      fragmentShader: source,\n      uniforms: getUniforms(),\n      glslVersion: THREE.GLSL3,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneFactor,\n    });\n\n    return materialObject;\n  }, [size.width, size.height, source]);\n\n  return (\n    <mesh ref={ref as any}>\n      <planeGeometry args={[2, 2]} />\n      <primitive object={material} attach=\"material\" />\n    </mesh>\n  );\n};\n\nconst Shader: React.FC<ShaderProps> = ({ source, uniforms, maxFps = 60 }) => {\n  return (\n    <Canvas className=\"absolute inset-0  h-full w-full\">\n      <ShaderMaterial source={source} uniforms={uniforms} maxFps={maxFps} />\n    </Canvas>\n  );\n};\ninterface ShaderProps {\n  source: string;\n  uniforms: {\n    [key: string]: {\n      value: number[] | number[][] | number;\n      type: string;\n    };\n  };\n  maxFps?: number;\n}\n\n```","type": "visual"}
{"source":"aceternity ui","name":"card-stack-animation","prompt": "Generate an Aceternity UI component for a rotating card stack animation using React and motion, where each card rotates every few seconds with scale and offset.","completion": "```jsx\n\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { motion } from \"motion/react\";\n\nlet interval: any;\n\ntype Card = {\n  id: number;\n  name: string;\n  designation: string;\n  content: React.ReactNode;\n};\n\nexport const CardStack = ({\n  items,\n  offset,\n  scaleFactor,\n}: {\n  items: Card[];\n  offset?: number;\n  scaleFactor?: number;\n}) => {\n  const CARD_OFFSET = offset || 10;\n  const SCALE_FACTOR = scaleFactor || 0.06;\n  const [cards, setCards] = useState<Card[]>(items);\n\n  useEffect(() => {\n    startFlipping();\n\n    return () => clearInterval(interval);\n  }, []);\n  const startFlipping = () => {\n    interval = setInterval(() => {\n      setCards((prevCards: Card[]) => {\n        const newArray = [...prevCards]; // create a copy of the array\n        newArray.unshift(newArray.pop()!); // move the last element to the front\n        return newArray;\n      });\n    }, 5000);\n  };\n\n  return (\n    <div className=\"relative  h-60 w-60 md:h-60 md:w-96\">\n      {cards.map((card, index) => {\n        return (\n          <motion.div\n            key={card.id}\n            className=\"absolute dark:bg-black bg-white h-60 w-60 md:h-60 md:w-96 rounded-3xl p-4 shadow-xl border border-neutral-200 dark:border-white/[0.1]  shadow-black/[0.1] dark:shadow-white/[0.05] flex flex-col justify-between\"\n            style={{\n              transformOrigin: \"top center\",\n            }}\n            animate={{\n              top: index * -CARD_OFFSET,\n              scale: 1 - index * SCALE_FACTOR, // decrease scale for cards that are behind\n              zIndex: cards.length - index, //  decrease z-index for the cards that are behind\n            }}\n          >\n            <div className=\"font-normal text-neutral-700 dark:text-neutral-200\">\n              {card.content}\n            </div>\n            <div>\n              <p className=\"text-neutral-500 font-medium dark:text-white\">\n                {card.name}\n              </p>\n              <p className=\"text-neutral-400 font-normal dark:text-neutral-200\">\n                {card.designation}\n              </p>\n            </div>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n};\n\n```","type": "animation"}
{"source":"aceternity ui","name":"hover-background-overlay-card","prompt": "Generate an Aceternity UI component for a card that overlays a background GIF on hover using Tailwind and React.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function CardDemo() {\n  return (\n    <div className=\"max-w-xs w-full\">\n      <div\n        className={cn(\n          \"group w-full cursor-pointer overflow-hidden relative card h-96 rounded-md shadow-xl mx-auto flex flex-col justify-end p-4 border border-transparent dark:border-neutral-800\",\n          \"bg-[url(https://images.unsplash.com/photo-1476842634003-7dcca8f832de?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1650&q=80)] bg-cover\",\n          // Preload hover image by setting it in a pseudo-element\n          \"before:bg-[url(https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNWlodTF3MjJ3NnJiY3Rlc2J0ZmE0c28yeWoxc3gxY2VtZzA5ejF1NSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/syEfLvksYQnmM/giphy.gif)] before:fixed before:inset-0 before:opacity-0 before:z-[-1]\",\n          \"hover:bg-[url(https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNWlodTF3MjJ3NnJiY3Rlc2J0ZmE0c28yeWoxc3gxY2VtZzA5ejF1NSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/syEfLvksYQnmM/giphy.gif)]\",\n          \"hover:after:content-[''] hover:after:absolute hover:after:inset-0 hover:after:bg-black hover:after:opacity-50\",\n          \"transition-all duration-500\"\n        )}\n      >\n        <div className=\"text relative z-50\">\n          <h1 className=\"font-bold text-xl md:text-3xl text-gray-50 relative\">\n            Background Overlays\n          </h1>\n          <p className=\"font-normal text-base text-gray-50 relative my-4\">\n            This card is for some special elements, like displaying background\n            gifs on hover only.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n```","type": "animation"}
{"source":"aceternity ui","name":"animated-skeleton-card","prompt": "Generate an Aceternity UI component for a skeleton-loading animated card that displays icons with motion effects and sparkles using Tailwind and React.","completion": "```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\n\n\nexport default function CardDemo() {\n  return (\n    <div className=\"max-w-xs w-full group/card\">\n      <div\n        className={cn(\n          \" cursor-pointer overflow-hidden relative card h-96 rounded-md shadow-xl  max-w-sm mx-auto backgroundImage flex flex-col justify-between p-4\",\n          \"bg-[url(https://images.unsplash.com/photo-1544077960-604201fe74bc?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1651&q=80)] bg-cover\"\n        )}\n      >\n        <div className=\"absolute w-full h-full top-0 left-0 transition duration-300 group-hover/card:bg-black opacity-60\"></div>\n        <div className=\"flex flex-row items-center space-x-4 z-10\">\n          <img\n            height=\"100\"\n            width=\"100\"\n            alt=\"Avatar\"\n            src=\"/manu.png\"\n            className=\"h-10 w-10 rounded-full border-2 object-cover\"\n          />\n          <div className=\"flex flex-col\">\n            <p className=\"font-normal text-base text-gray-50 relative z-10\">\n              Manu Arora\n            </p>\n            <p className=\"text-sm text-gray-400\">2 min read</p>\n          </div>\n        </div>\n        <div className=\"text content\">\n          <h1 className=\"font-bold text-xl md:text-2xl text-gray-50 relative z-10\">\n            Author Card\n          </h1>\n          <p className=\"font-normal text-sm text-gray-50 relative z-10 my-4\">\n            Card with Author avatar, complete name and time to read - most\n            suitable for blogs.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n```","type": "animation"}
{"source":"aceternity ui","name":"ToolShowcaseCard","prompt": "Generate an Aceternity UI component for an animated card that showcases a set of popular tool logos with floating sparkles and glowing gradients using Tailwind, React, and motion.","completion": "```jsx\n\"use client\";\nimport { animate, motion } from \"motion/react\";\nimport React, { useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { GoCopilot } from \"react-icons/go\";\n\nexport default function ToolShowcaseCard() {\n  return (\n    <Card>\n      <CardSkeletonContainer>\n        <Skeleton />\n      </CardSkeletonContainer>\n      <CardTitle>Damn good card</CardTitle>\n      <CardDescription>\n        A card that showcases a set of tools that you use to create your product.\n      </CardDescription>\n    </Card>\n  );\n}\n\nconst Skeleton = () => {\n  const scale = [1, 1.1, 1];\n  const transform = [\"translateY(0px)\", \"translateY(-4px)\", \"translateY(0px)\"];\n  const sequence = [\n    [\".circle-1\", { scale, transform }, { duration: 0.8 }],\n    [\".circle-2\", { scale, transform }, { duration: 0.8 }],\n    [\".circle-3\", { scale, transform }, { duration: 0.8 }],\n    [\".circle-4\", { scale, transform }, { duration: 0.8 }],\n    [\".circle-5\", { scale, transform }, { duration: 0.8 }],\n  ];\n\n  useEffect(() => {\n    animate(sequence, { repeat: Infinity, repeatDelay: 1 });\n  }, []);\n\n  return (\n    <div className=\"p-8 overflow-hidden h-full relative flex items-center justify-center\">\n      <div className=\"flex flex-row shrink-0 justify-center items-center gap-2\">\n        <Container className=\"h-8 w-8 circle-1\">\n          <ClaudeLogo className=\"h-4 w-4\" />\n        </Container>\n        <Container className=\"h-12 w-12 circle-2\">\n          <GoCopilot className=\"h-6 w-6 dark:text-white\" />\n        </Container>\n        <Container className=\"circle-3\">\n          <OpenAILogo className=\"h-8 w-8 dark:text-white\" />\n        </Container>\n        <Container className=\"h-12 w-12 circle-4\">\n          <MetaIconOutline className=\"h-6 w-6\" />\n        </Container>\n        <Container className=\"h-8 w-8 circle-5\">\n          <GeminiLogo className=\"h-4 w-4\" />\n        </Container>\n      </div>\n\n      <div className=\"h-40 w-px absolute top-20 m-auto z-40 bg-gradient-to-b from-transparent via-cyan-500 to-transparent animate-move\">\n        <div className=\"w-10 h-32 top-1/2 -translate-y-1/2 absolute -left-10\">\n          <Sparkles />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Sparkles = () => {\n  const randomMove = () => Math.random() * 2 - 1;\n  const randomOpacity = () => Math.random();\n  const random = () => Math.random();\n  return (\n    <div className=\"absolute inset-0\">\n      {[...Array(12)].map((_, i) => (\n        <motion.span\n          key={`star-${i}`}\n          animate={{\n            top: `calc(${random() * 100}% + ${randomMove()}px)`,\n            left: `calc(${random() * 100}% + ${randomMove()}px)`,\n            opacity: randomOpacity(),\n            scale: [1, 1.2, 0],\n          }}\n          transition={{\n            duration: random() * 2 + 4,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n          style={{\n            position: \"absolute\",\n            top: `${random() * 100}%`,\n            left: `${random() * 100}%`,\n            width: `2px`,\n            height: `2px`,\n            borderRadius: \"50%\",\n            zIndex: 1,\n          }}\n          className=\"inline-block bg-black dark:bg-white\"\n        ></motion.span>\n      ))}\n    </div>\n  );\n};\n\n// The Card, CardTitle, CardDescription, CardSkeletonContainer, Container, and logos are as defined.\n```","type": "animation"}
{"source":"aceternity ui","name":"container-scroll-card","prompt": "Generate an Aceternity UI component for a scroll-based animated 3D card container that reveals content with scaling and rotating effects using Tailwind and React.","completion": "```jsx\n\"use client\";\nimport React, { useRef } from \"react\";\nimport { useScroll, useTransform, motion, MotionValue } from \"motion/react\";\n\nexport const ContainerScroll = ({\n  titleComponent,\n  children,\n}: {\n  titleComponent: string | React.ReactNode;\n  children: React.ReactNode;\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n  });\n  const [isMobile, setIsMobile] = React.useState(false);\n\n  React.useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    checkMobile();\n    window.addEventListener(\"resize\", checkMobile);\n    return () => {\n      window.removeEventListener(\"resize\", checkMobile);\n    };\n  }, []);\n\n  const scaleDimensions = () => {\n    return isMobile ? [0.7, 0.9] : [1.05, 1];\n  };\n\n  const rotate = useTransform(scrollYProgress, [0, 1], [20, 0]);\n  const scale = useTransform(scrollYProgress, [0, 1], scaleDimensions());\n  const translate = useTransform(scrollYProgress, [0, 1], [0, -100]);\n\n  return (\n    <div\n      className=\"h-[60rem] md:h-[80rem] flex items-center justify-center relative p-2 md:p-20\"\n      ref={containerRef}\n    >\n      <div\n        className=\"py-10 md:py-40 w-full relative\"\n        style={{\n          perspective: \"1000px\",\n        }}\n      >\n        <Header translate={translate} titleComponent={titleComponent} />\n        <Card rotate={rotate} translate={translate} scale={scale}>\n          {children}\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport const Header = ({ translate, titleComponent }: any) => {\n  return (\n    <motion.div\n      style={{\n        translateY: translate,\n      }}\n      className=\"div max-w-5xl mx-auto text-center\"\n    >\n      {titleComponent}\n    </motion.div>\n  );\n};\n\nexport const Card = ({\n  rotate,\n  scale,\n  children,\n}: {\n  rotate: MotionValue<number>;\n  scale: MotionValue<number>;\n  translate: MotionValue<number>;\n  children: React.ReactNode;\n}) => {\n  return (\n    <motion.div\n      style={{\n        rotateX: rotate,\n        scale,\n        boxShadow:\n          \"0 0 #0000004d, 0 9px 20px #0000004a, 0 37px 37px #00000042, 0 84px 50px #00000026, 0 149px 60px #0000000a, 0 233px 65px #00000003\",\n      }}\n      className=\"max-w-5xl -mt-12 mx-auto h-[30rem] md:h-[40rem] w-full border-4 border-[#6C6C6C] p-2 md:p-6 bg-[#222222] rounded-[30px] shadow-2xl\"\n    >\n      <div className=\" h-full w-full  overflow-hidden rounded-2xl bg-gray-100 dark:bg-zinc-900 md:rounded-2xl md:p-4 \">\n        {children}\n      </div>\n    </motion.div>\n  );\n};\n\n```","type": "animation"}
{"source":"aceternity ui","name":"evervault-card","prompt": "Generate an Aceternity UI component for an interactive Evervault-style card that reveals animated code pattern on hover using radial gradient masks and motion effects in Tailwind and React.","completion": "```jsx\n\"use client\";\nimport { useMotionValue } from \"motion/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMotionTemplate, motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const EvervaultCard = ({\n  text,\n  className,\n}: {\n  text?: string;\n  className?: string;\n}) => {\n  let mouseX = useMotionValue(0);\n  let mouseY = useMotionValue(0);\n\n  const [randomString, setRandomString] = useState(\"\");\n\n  useEffect(() => {\n    let str = generateRandomString(1500);\n    setRandomString(str);\n  }, []);\n\n  function onMouseMove({ currentTarget, clientX, clientY }: any) {\n    let { left, top } = currentTarget.getBoundingClientRect();\n    mouseX.set(clientX - left);\n    mouseY.set(clientY - top);\n\n    const str = generateRandomString(1500);\n    setRandomString(str);\n  }\n\n  return (\n    <div\n      className={cn(\n        \"p-0.5  bg-transparent aspect-square  flex items-center justify-center w-full h-full relative\",\n        className\n      )}\n    >\n      <div\n        onMouseMove={onMouseMove}\n        className=\"group/card rounded-3xl w-full relative overflow-hidden bg-transparent flex items-center justify-center h-full\"\n      >\n        <CardPattern\n          mouseX={mouseX}\n          mouseY={mouseY}\n          randomString={randomString}\n        />\n        <div className=\"relative z-10 flex items-center justify-center\">\n          <div className=\"relative h-44 w-44  rounded-full flex items-center justify-center text-white font-bold text-4xl\">\n            <div className=\"absolute w-full h-full bg-white/[0.8] dark:bg-black/[0.8] blur-sm rounded-full\" />\n            <span className=\"dark:text-white text-black z-20\">{text}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport function CardPattern({ mouseX, mouseY, randomString }: any) {\n  let maskImage = useMotionTemplate`radial-gradient(250px at ${mouseX}px ${mouseY}px, white, transparent)`;\n  let style = { maskImage, WebkitMaskImage: maskImage };\n\n  return (\n    <div className=\"pointer-events-none\">\n      <div className=\"absolute inset-0 rounded-2xl  [mask-image:linear-gradient(white,transparent)] group-hover/card:opacity-50\"></div>\n      <motion.div\n        className=\"absolute inset-0 rounded-2xl bg-gradient-to-r from-green-500 to-blue-700 opacity-0  group-hover/card:opacity-100 backdrop-blur-xl transition duration-500\"\n        style={style}\n      />\n      <motion.div\n        className=\"absolute inset-0 rounded-2xl opacity-0 mix-blend-overlay  group-hover/card:opacity-100\"\n        style={style}\n      >\n        <p className=\"absolute inset-x-0 text-xs h-full break-words whitespace-pre-wrap text-white font-mono font-bold transition duration-500\">\n          {randomString}\n        </p>\n      </motion.div>\n    </div>\n  );\n}\n\nconst characters =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\nexport const generateRandomString = (length: number) => {\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n};\n\nexport const Icon = ({ className, ...rest }: any) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"1.5\"\n      stroke=\"currentColor\"\n      className={className}\n      {...rest}\n    >\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6v12m6-6H6\" />\n    </svg>\n  );\n};\n\n```","type": "animation"}
{"source":"aceternity ui","name":"flip-words","prompt": "Generate an Aceternity UI component for a text animation that flips between multiple words with smooth transitions using Motion and React.","completion": "```jsx\n\"use client\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { AnimatePresence, motion, LayoutGroup } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const FlipWords = ({\n  words,\n  duration = 3000,\n  className,\n}: {\n  words: string[];\n  duration?: number;\n  className?: string;\n}) => {\n  const [currentWord, setCurrentWord] = useState(words[0]);\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n  // thanks for the fix Julian - https://github.com/Julian-AT\n  const startAnimation = useCallback(() => {\n    const word = words[words.indexOf(currentWord) + 1] || words[0];\n    setCurrentWord(word);\n    setIsAnimating(true);\n  }, [currentWord, words]);\n\n  useEffect(() => {\n    if (!isAnimating)\n      setTimeout(() => {\n        startAnimation();\n      }, duration);\n  }, [isAnimating, duration, startAnimation]);\n\n  return (\n    <AnimatePresence\n      onExitComplete={() => {\n        setIsAnimating(false);\n      }}\n    >\n      <motion.div\n        initial={{\n          opacity: 0,\n          y: 10,\n        }}\n        animate={{\n          opacity: 1,\n          y: 0,\n        }}\n        transition={{\n          type: \"spring\",\n          stiffness: 100,\n          damping: 10,\n        }}\n        exit={{\n          opacity: 0,\n          y: -40,\n          x: 40,\n          filter: \"blur(8px)\",\n          scale: 2,\n          position: \"absolute\",\n        }}\n        className={cn(\n          \"z-10 inline-block relative text-left text-neutral-900 dark:text-neutral-100 px-2\",\n          className\n        )}\n        key={currentWord}\n      >\n        {/* edit suggested by Sajal: https://x.com/DewanganSajal */}\n        {currentWord.split(\" \").map((word, wordIndex) => (\n          <motion.span\n            key={word + wordIndex}\n            initial={{ opacity: 0, y: 10, filter: \"blur(8px)\" }}\n            animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n            transition={{\n              delay: wordIndex * 0.3,\n              duration: 0.3,\n            }}\n            className=\"inline-block whitespace-nowrap\"\n          >\n            {word.split(\"\").map((letter, letterIndex) => (\n              <motion.span\n                key={word + letterIndex}\n                initial={{ opacity: 0, y: 10, filter: \"blur(8px)\" }}\n                animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n                transition={{\n                  delay: wordIndex * 0.3 + letterIndex * 0.05,\n                  duration: 0.2,\n                }}\n                className=\"inline-block\"\n              >\n                {letter}\n              </motion.span>\n            ))}\n            <span className=\"inline-block\">&nbsp;</span>\n          </motion.span>\n        ))}\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\n```","type": "animation"}
{"source":"aceternity ui","name":"globe-visualizer","prompt": "Generate an Aceternity UI component that renders an interactive 3D globe using Three.js and React Three Fiber, featuring animated arcs, data points, lighting, and atmospheric effects.","completion": "```jsx\n\"use client\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Color, Scene, Fog, PerspectiveCamera, Vector3 } from \"three\";\nimport ThreeGlobe from \"three-globe\";\nimport { useThree, Canvas, extend } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport countries from \"@/data/globe.json\";\ndeclare module \"@react-three/fiber\" {\n  interface ThreeElements {\n    threeGlobe: ThreeElements[\"mesh\"] & {\n      new (): ThreeGlobe;\n    };\n  }\n}\n\nextend({ ThreeGlobe: ThreeGlobe });\n\nconst RING_PROPAGATION_SPEED = 3;\nconst aspect = 1.2;\nconst cameraZ = 300;\n\ntype Position = {\n  order: number;\n  startLat: number;\n  startLng: number;\n  endLat: number;\n  endLng: number;\n  arcAlt: number;\n  color: string;\n};\n\nexport type GlobeConfig = {\n  pointSize?: number;\n  globeColor?: string;\n  showAtmosphere?: boolean;\n  atmosphereColor?: string;\n  atmosphereAltitude?: number;\n  emissive?: string;\n  emissiveIntensity?: number;\n  shininess?: number;\n  polygonColor?: string;\n  ambientLight?: string;\n  directionalLeftLight?: string;\n  directionalTopLight?: string;\n  pointLight?: string;\n  arcTime?: number;\n  arcLength?: number;\n  rings?: number;\n  maxRings?: number;\n  initialPosition?: {\n    lat: number;\n    lng: number;\n  };\n  autoRotate?: boolean;\n  autoRotateSpeed?: number;\n};\n\ninterface WorldProps {\n  globeConfig: GlobeConfig;\n  data: Position[];\n}\n\nlet numbersOfRings = [0];\n\nexport function Globe({ globeConfig, data }: WorldProps) {\n  const globeRef = useRef<ThreeGlobe | null>(null);\n  const groupRef = useRef();\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  const defaultProps = {\n    pointSize: 1,\n    atmosphereColor: \"#ffffff\",\n    showAtmosphere: true,\n    atmosphereAltitude: 0.1,\n    polygonColor: \"rgba(255,255,255,0.7)\",\n    globeColor: \"#1d072e\",\n    emissive: \"#000000\",\n    emissiveIntensity: 0.1,\n    shininess: 0.9,\n    arcTime: 2000,\n    arcLength: 0.9,\n    rings: 1,\n    maxRings: 3,\n    ...globeConfig,\n  };\n\n  // Initialize globe only once\n  useEffect(() => {\n    if (!globeRef.current && groupRef.current) {\n      globeRef.current = new ThreeGlobe();\n      (groupRef.current as any).add(globeRef.current);\n      setIsInitialized(true);\n    }\n  }, []);\n\n  // Build material when globe is initialized or when relevant props change\n  useEffect(() => {\n    if (!globeRef.current || !isInitialized) return;\n\n    const globeMaterial = globeRef.current.globeMaterial() as unknown as {\n      color: Color;\n      emissive: Color;\n      emissiveIntensity: number;\n      shininess: number;\n    };\n    globeMaterial.color = new Color(globeConfig.globeColor);\n    globeMaterial.emissive = new Color(globeConfig.emissive);\n    globeMaterial.emissiveIntensity = globeConfig.emissiveIntensity || 0.1;\n    globeMaterial.shininess = globeConfig.shininess || 0.9;\n  }, [\n    isInitialized,\n    globeConfig.globeColor,\n    globeConfig.emissive,\n    globeConfig.emissiveIntensity,\n    globeConfig.shininess,\n  ]);\n\n  // Build data when globe is initialized or when data changes\n  useEffect(() => {\n    if (!globeRef.current || !isInitialized || !data) return;\n\n    const arcs = data;\n    let points = [];\n    for (let i = 0; i < arcs.length; i++) {\n      const arc = arcs[i];\n      const rgb = hexToRgb(arc.color) as { r: number; g: number; b: number };\n      points.push({\n        size: defaultProps.pointSize,\n        order: arc.order,\n        color: arc.color,\n        lat: arc.startLat,\n        lng: arc.startLng,\n      });\n      points.push({\n        size: defaultProps.pointSize,\n        order: arc.order,\n        color: arc.color,\n        lat: arc.endLat,\n        lng: arc.endLng,\n      });\n    }\n\n    // remove duplicates for same lat and lng\n    const filteredPoints = points.filter(\n      (v, i, a) =>\n        a.findIndex((v2) =>\n          [\"lat\", \"lng\"].every(\n            (k) => v2[k as \"lat\" | \"lng\"] === v[k as \"lat\" | \"lng\"],\n          ),\n        ) === i,\n    );\n\n    globeRef.current\n      .hexPolygonsData(countries.features)\n      .hexPolygonResolution(3)\n      .hexPolygonMargin(0.7)\n      .showAtmosphere(defaultProps.showAtmosphere)\n      .atmosphereColor(defaultProps.atmosphereColor)\n      .atmosphereAltitude(defaultProps.atmosphereAltitude)\n      .hexPolygonColor(() => defaultProps.polygonColor);\n\n    globeRef.current\n      .arcsData(data)\n      .arcStartLat((d) => (d as { startLat: number }).startLat * 1)\n      .arcStartLng((d) => (d as { startLng: number }).startLng * 1)\n      .arcEndLat((d) => (d as { endLat: number }).endLat * 1)\n      .arcEndLng((d) => (d as { endLng: number }).endLng * 1)\n      .arcColor((e: any) => (e as { color: string }).color)\n      .arcAltitude((e) => (e as { arcAlt: number }).arcAlt * 1)\n      .arcStroke(() => [0.32, 0.28, 0.3][Math.round(Math.random() * 2)])\n      .arcDashLength(defaultProps.arcLength)\n      .arcDashInitialGap((e) => (e as { order: number }).order * 1)\n      .arcDashGap(15)\n      .arcDashAnimateTime(() => defaultProps.arcTime);\n\n    globeRef.current\n      .pointsData(filteredPoints)\n      .pointColor((e) => (e as { color: string }).color)\n      .pointsMerge(true)\n      .pointAltitude(0.0)\n      .pointRadius(2);\n\n    globeRef.current\n      .ringsData([])\n      .ringColor(() => defaultProps.polygonColor)\n      .ringMaxRadius(defaultProps.maxRings)\n      .ringPropagationSpeed(RING_PROPAGATION_SPEED)\n      .ringRepeatPeriod(\n        (defaultProps.arcTime * defaultProps.arcLength) / defaultProps.rings,\n      );\n  }, [\n    isInitialized,\n    data,\n    defaultProps.pointSize,\n    defaultProps.showAtmosphere,\n    defaultProps.atmosphereColor,\n    defaultProps.atmosphereAltitude,\n    defaultProps.polygonColor,\n    defaultProps.arcLength,\n    defaultProps.arcTime,\n    defaultProps.rings,\n    defaultProps.maxRings,\n  ]);\n\n  // Handle rings animation with cleanup\n  useEffect(() => {\n    if (!globeRef.current || !isInitialized || !data) return;\n\n    const interval = setInterval(() => {\n      if (!globeRef.current) return;\n\n      const newNumbersOfRings = genRandomNumbers(\n        0,\n        data.length,\n        Math.floor((data.length * 4) / 5),\n      );\n\n      const ringsData = data\n        .filter((d, i) => newNumbersOfRings.includes(i))\n        .map((d) => ({\n          lat: d.startLat,\n          lng: d.startLng,\n          color: d.color,\n        }));\n\n      globeRef.current.ringsData(ringsData);\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isInitialized, data]);\n\n  return <group ref={groupRef} />;\n}\n\nexport function WebGLRendererConfig() {\n  const { gl, size } = useThree();\n\n  useEffect(() => {\n    gl.setPixelRatio(window.devicePixelRatio);\n    gl.setSize(size.width, size.height);\n    gl.setClearColor(0xffaaff, 0);\n  }, []);\n\n  return null;\n}\n\nexport function World(props: WorldProps) {\n  const { globeConfig } = props;\n  const scene = new Scene();\n  scene.fog = new Fog(0xffffff, 400, 2000);\n  return (\n    <Canvas scene={scene} camera={new PerspectiveCamera(50, aspect, 180, 1800)}>\n      <WebGLRendererConfig />\n      <ambientLight color={globeConfig.ambientLight} intensity={0.6} />\n      <directionalLight\n        color={globeConfig.directionalLeftLight}\n        position={new Vector3(-400, 100, 400)}\n      />\n      <directionalLight\n        color={globeConfig.directionalTopLight}\n        position={new Vector3(-200, 500, 200)}\n      />\n      <pointLight\n        color={globeConfig.pointLight}\n        position={new Vector3(-200, 500, 200)}\n        intensity={0.8}\n      />\n      <Globe {...props} />\n      <OrbitControls\n        enablePan={false}\n        enableZoom={false}\n        minDistance={cameraZ}\n        maxDistance={cameraZ}\n        autoRotateSpeed={1}\n        autoRotate={true}\n        minPolarAngle={Math.PI / 3.5}\n        maxPolarAngle={Math.PI - Math.PI / 3}\n      />\n    </Canvas>\n  );\n}\n\nexport function hexToRgb(hex: string) {\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null;\n}\n\nexport function genRandomNumbers(min: number, max: number, count: number) {\n  const arr = [];\n  while (arr.length < count) {\n    const r = Math.floor(Math.random() * (max - min)) + min;\n    if (arr.indexOf(r) === -1) arr.push(r);\n  }\n\n  return arr;\n}\n\n```","type": "3d-visualization"}
{"source":"aceternity ui","name":"glare-card-effect","prompt": "Generate an Aceternity UI component for a glare-based interactive card with pointer movement tilt and dynamic background effects using React and Tailwind.","completion": "```jsx\nimport { cn } from \"@/lib/utils\";\nimport { useRef } from \"react\";\n\nexport const GlareCard = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  const isPointerInside = useRef(false);\n  const refElement = useRef<HTMLDivElement>(null);\n  const state = useRef({\n    glare: {\n      x: 50,\n      y: 50,\n    },\n    background: {\n      x: 50,\n      y: 50,\n    },\n    rotate: {\n      x: 0,\n      y: 0,\n    },\n  });\n  const containerStyle = {\n    \"--m-x\": \"50%\",\n    \"--m-y\": \"50%\",\n    \"--r-x\": \"0deg\",\n    \"--r-y\": \"0deg\",\n    \"--bg-x\": \"50%\",\n    \"--bg-y\": \"50%\",\n    \"--duration\": \"300ms\",\n    \"--foil-size\": \"100%\",\n    \"--opacity\": \"0\",\n    \"--radius\": \"48px\",\n    \"--easing\": \"ease\",\n    \"--transition\": \"var(--duration) var(--easing)\",\n  } as any;\n\n  const backgroundStyle = {\n    \"--step\": \"5%\",\n    \"--foil-svg\": `url(\"data:image/svg+xml,%3Csvg width='26' height='26' viewBox='0 0 26 26' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M2.99994 3.419C2.99994 3.419 21.6142 7.43646 22.7921 12.153C23.97 16.8695 3.41838 23.0306 3.41838 23.0306' stroke='white' stroke-width='5' stroke-miterlimit='3.86874' stroke-linecap='round' style='mix-blend-mode:darken'/%3E%3C/svg%3E\")`,\n    \"--pattern\": \"var(--foil-svg) center/100% no-repeat\",\n    \"--rainbow\":\n      \"repeating-linear-gradient( 0deg,rgb(255,119,115) calc(var(--step) * 1),rgba(255,237,95,1) calc(var(--step) * 2),rgba(168,255,95,1) calc(var(--step) * 3),rgba(131,255,247,1) calc(var(--step) * 4),rgba(120,148,255,1) calc(var(--step) * 5),rgb(216,117,255) calc(var(--step) * 6),rgb(255,119,115) calc(var(--step) * 7) ) 0% var(--bg-y)/200% 700% no-repeat\",\n    \"--diagonal\":\n      \"repeating-linear-gradient( 128deg,#0e152e 0%,hsl(180,10%,60%) 3.8%,hsl(180,10%,60%) 4.5%,hsl(180,10%,60%) 5.2%,#0e152e 10%,#0e152e 12% ) var(--bg-x) var(--bg-y)/300% no-repeat\",\n    \"--shade\":\n      \"radial-gradient( farthest-corner circle at var(--m-x) var(--m-y),rgba(255,255,255,0.1) 12%,rgba(255,255,255,0.15) 20%,rgba(255,255,255,0.25) 120% ) var(--bg-x) var(--bg-y)/300% no-repeat\",\n    backgroundBlendMode: \"hue, hue, hue, overlay\",\n  };\n\n  const updateStyles = () => {\n    if (refElement.current) {\n      console.log(state.current);\n      const { background, rotate, glare } = state.current;\n      refElement.current?.style.setProperty(\"--m-x\", `${glare.x}%`);\n      refElement.current?.style.setProperty(\"--m-y\", `${glare.y}%`);\n      refElement.current?.style.setProperty(\"--r-x\", `${rotate.x}deg`);\n      refElement.current?.style.setProperty(\"--r-y\", `${rotate.y}deg`);\n      refElement.current?.style.setProperty(\"--bg-x\", `${background.x}%`);\n      refElement.current?.style.setProperty(\"--bg-y\", `${background.y}%`);\n    }\n  };\n  return (\n    <div\n      style={containerStyle}\n      className=\"relative isolate [contain:layout_style] [perspective:600px] transition-transform duration-[var(--duration)] ease-[var(--easing)] delay-[var(--delay)] will-change-transform w-[320px] [aspect-ratio:17/21]\"\n      ref={refElement}\n      onPointerMove={(event) => {\n        const rotateFactor = 0.4;\n        const rect = event.currentTarget.getBoundingClientRect();\n        const position = {\n          x: event.clientX - rect.left,\n          y: event.clientY - rect.top,\n        };\n        const percentage = {\n          x: (100 / rect.width) * position.x,\n          y: (100 / rect.height) * position.y,\n        };\n        const delta = {\n          x: percentage.x - 50,\n          y: percentage.y - 50,\n        };\n\n        const { background, rotate, glare } = state.current;\n        background.x = 50 + percentage.x / 4 - 12.5;\n        background.y = 50 + percentage.y / 3 - 16.67;\n        rotate.x = -(delta.x / 3.5);\n        rotate.y = delta.y / 2;\n        rotate.x *= rotateFactor;\n        rotate.y *= rotateFactor;\n        glare.x = percentage.x;\n        glare.y = percentage.y;\n\n        updateStyles();\n      }}\n      onPointerEnter={() => {\n        isPointerInside.current = true;\n        if (refElement.current) {\n          setTimeout(() => {\n            if (isPointerInside.current) {\n              refElement.current?.style.setProperty(\"--duration\", \"0s\");\n            }\n          }, 300);\n        }\n      }}\n      onPointerLeave={() => {\n        isPointerInside.current = false;\n        if (refElement.current) {\n          refElement.current.style.removeProperty(\"--duration\");\n          refElement.current?.style.setProperty(\"--r-x\", `0deg`);\n          refElement.current?.style.setProperty(\"--r-y\", `0deg`);\n        }\n      }}\n    >\n      <div className=\"h-full grid will-change-transform origin-center transition-transform duration-[var(--duration)] ease-[var(--easing)] delay-[var(--delay)] [transform:rotateY(var(--r-x))_rotateX(var(--r-y))] rounded-[var(--radius)] border border-slate-800 hover:[--opacity:0.6] hover:[--duration:200ms] hover:[--easing:linear] hover:filter-none overflow-hidden\">\n        <div className=\"w-full h-full grid [grid-area:1/1] mix-blend-soft-light [clip-path:inset(0_0_0_0_round_var(--radius))]\">\n          <div className={cn(\"h-full w-full bg-slate-950\", className)}>\n            {children}\n          </div>\n        </div>\n        <div className=\"w-full h-full grid [grid-area:1/1] mix-blend-soft-light [clip-path:inset(0_0_1px_0_round_var(--radius))] opacity-[var(--opacity)] transition-opacity transition-background duration-[var(--duration)] ease-[var(--easing)] delay-[var(--delay)] will-change-background [background:radial-gradient(farthest-corner_circle_at_var(--m-x)_var(--m-y),_rgba(255,255,255,0.8)_10%,_rgba(255,255,255,0.65)_20%,_rgba(255,255,255,0)_90%)]\" />\n        <div\n          className=\"w-full h-full grid [grid-area:1/1] mix-blend-color-dodge opacity-[var(--opacity)] will-change-background transition-opacity [clip-path:inset(0_0_1px_0_round_var(--radius))] [background-blend-mode:hue_hue_hue_overlay] [background:var(--pattern),_var(--rainbow),_var(--diagonal),_var(--shade)] relative after:content-[''] after:grid-area-[inherit] after:bg-repeat-[inherit] after:bg-attachment-[inherit] after:bg-origin-[inherit] after:bg-clip-[inherit] after:bg-[inherit] after:mix-blend-exclusion after:[background-size:var(--foil-size),_200%_400%,_800%,_200%] after:[background-position:center,_0%_var(--bg-y),_calc(var(--bg-x)*_-1)_calc(var(--bg-y)*_-1),_var(--bg-x)_var(--bg-y)] after:[background-blend-mode:soft-light,_hue,_hard-light]\"\n          style={{ ...backgroundStyle }}\n        />\n      </div>\n    </div>\n  );\n};\nn```","type": "animated-effect"}
{"source":"aceternity ui","name":"glowing-effect","prompt":"Generate an Aceternity UI component for a glowing border effect that follows mouse movement using animated gradients and CSS variables in React and Tailwind.","completion":"```jsx\n\"use client\";\n\nimport { memo, useCallback, useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { animate } from \"motion/react\";\n\ninterface GlowingEffectProps {\n  blur?: number;\n  inactiveZone?: number;\n  proximity?: number;\n  spread?: number;\n  variant?: \"default\" | \"white\";\n  glow?: boolean;\n  className?: string;\n  disabled?: boolean;\n  movementDuration?: number;\n  borderWidth?: number;\n}\nconst GlowingEffect = memo(\n  ({\n    blur = 0,\n    inactiveZone = 0.7,\n    proximity = 0,\n    spread = 20,\n    variant = \"default\",\n    glow = false,\n    className,\n    movementDuration = 2,\n    borderWidth = 1,\n    disabled = true,\n  }: GlowingEffectProps) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const lastPosition = useRef({ x: 0, y: 0 });\n    const animationFrameRef = useRef<number>(0);\n\n    const handleMove = useCallback(\n      (e?: MouseEvent | { x: number; y: number }) => {\n        if (!containerRef.current) return;\n\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n        }\n\n        animationFrameRef.current = requestAnimationFrame(() => {\n          const element = containerRef.current;\n          if (!element) return;\n\n          const { left, top, width, height } = element.getBoundingClientRect();\n          const mouseX = e?.x ?? lastPosition.current.x;\n          const mouseY = e?.y ?? lastPosition.current.y;\n\n          if (e) {\n            lastPosition.current = { x: mouseX, y: mouseY };\n          }\n\n          const center = [left + width * 0.5, top + height * 0.5];\n          const distanceFromCenter = Math.hypot(\n            mouseX - center[0],\n            mouseY - center[1]\n          );\n          const inactiveRadius = 0.5 * Math.min(width, height) * inactiveZone;\n\n          if (distanceFromCenter < inactiveRadius) {\n            element.style.setProperty(\"--active\", \"0\");\n            return;\n          }\n\n          const isActive =\n            mouseX > left - proximity &&\n            mouseX < left + width + proximity &&\n            mouseY > top - proximity &&\n            mouseY < top + height + proximity;\n\n          element.style.setProperty(\"--active\", isActive ? \"1\" : \"0\");\n\n          if (!isActive) return;\n\n          const currentAngle =\n            parseFloat(element.style.getPropertyValue(\"--start\")) || 0;\n          let targetAngle =\n            (180 * Math.atan2(mouseY - center[1], mouseX - center[0])) /\n              Math.PI +\n            90;\n\n          const angleDiff = ((targetAngle - currentAngle + 180) % 360) - 180;\n          const newAngle = currentAngle + angleDiff;\n\n          animate(currentAngle, newAngle, {\n            duration: movementDuration,\n            ease: [0.16, 1, 0.3, 1],\n            onUpdate: (value) => {\n              element.style.setProperty(\"--start\", String(value));\n            },\n          });\n        });\n      },\n      [inactiveZone, proximity, movementDuration]\n    );\n\n    useEffect(() => {\n      if (disabled) return;\n\n      const handleScroll = () => handleMove();\n      const handlePointerMove = (e: PointerEvent) => handleMove(e);\n\n      window.addEventListener(\"scroll\", handleScroll, { passive: true });\n      document.body.addEventListener(\"pointermove\", handlePointerMove, {\n        passive: true,\n      });\n\n      return () => {\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n        }\n        window.removeEventListener(\"scroll\", handleScroll);\n        document.body.removeEventListener(\"pointermove\", handlePointerMove);\n      };\n    }, [handleMove, disabled]);\n\n    return (\n      <>\n        <div\n          className={cn(\n            \"pointer-events-none absolute -inset-px hidden rounded-[inherit] border opacity-0 transition-opacity\",\n            glow && \"opacity-100\",\n            variant === \"white\" && \"border-white\",\n            disabled && \"!block\"\n          )}\n        />\n        <div\n          ref={containerRef}\n          style={\n            {\n              \"--blur\": `${blur}px`,\n              \"--spread\": spread,\n              \"--start\": \"0\",\n              \"--active\": \"0\",\n              \"--glowingeffect-border-width\": `${borderWidth}px`,\n              \"--repeating-conic-gradient-times\": \"5\",\n              \"--gradient\":\n                variant === \"white\"\n                  ? `repeating-conic-gradient(\n                  from 236.84deg at 50% 50%,\n                  var(--black),\n                  var(--black) calc(25% / var(--repeating-conic-gradient-times))\n                )`\n                  : `radial-gradient(circle, #dd7bbb 10%, #dd7bbb00 20%),\n                radial-gradient(circle at 40% 40%, #d79f1e 5%, #d79f1e00 15%),\n                radial-gradient(circle at 60% 60%, #5a922c 10%, #5a922c00 20%), \n                radial-gradient(circle at 40% 60%, #4c7894 10%, #4c789400 20%),\n                repeating-conic-gradient(\n                  from 236.84deg at 50% 50%,\n                  #dd7bbb 0%,\n                  #d79f1e calc(25% / var(--repeating-conic-gradient-times)),\n                  #5a922c calc(50% / var(--repeating-conic-gradient-times)), \n                  #4c7894 calc(75% / var(--repeating-conic-gradient-times)),\n                  #dd7bbb calc(100% / var(--repeating-conic-gradient-times))\n                )`,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"pointer-events-none absolute inset-0 rounded-[inherit] opacity-100 transition-opacity\",\n            glow && \"opacity-100\",\n            blur > 0 && \"blur-[var(--blur)] \",\n            className,\n            disabled && \"!hidden\"\n          )}\n        >\n          <div\n            className={cn(\n              \"glow\",\n              \"rounded-[inherit]\",\n              'after:content-[\"\"] after:rounded-[inherit] after:absolute after:inset-[calc(-1*var(--glowingeffect-border-width))]',\n              \"after:[border:var(--glowingeffect-border-width)_solid_transparent]\",\n              \"after:[background:var(--gradient)] after:[background-attachment:fixed]\",\n              \"after:opacity-[var(--active)] after:transition-opacity after:duration-300\",\n              \"after:[mask-clip:padding-box,border-box]\",\n              \"after:[mask-composite:intersect]\",\n              \"after:[mask-image:linear-gradient(#0000,#0000),conic-gradient(from_calc((var(--start)-var(--spread))*1deg),#00000000_0deg,#fff,#00000000_calc(var(--spread)*2deg))]\"\n            )}\n          />\n        </div>\n      </>\n    );\n  }\n);\n\nGlowingEffect.displayName = \"GlowingEffect\";\n\nexport { GlowingEffect };\n\n```","type":"animated-effect"}
{"source":"aceternity ui","name":"glowing-stars-background-card","prompt":"Generate an Aceternity UI component for a glowing stars animated background card that reacts to mouse hover using React, Tailwind, and Motion.","completion":"```jsx\n\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const GlowingStarsBackgroundCard = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  const [mouseEnter, setMouseEnter] = useState(false);\n\n  return (\n    <div\n      onMouseEnter={() => {\n        setMouseEnter(true);\n      }}\n      onMouseLeave={() => {\n        setMouseEnter(false);\n      }}\n      className={cn(\n        \"bg-[linear-gradient(110deg,#333_0.6%,#222)] p-4 max-w-md max-h-[20rem] h-full w-full rounded-xl border border-[#eaeaea] dark:border-neutral-600\",\n        className\n      )}\n    >\n      <div className=\"flex justify-center items-center\">\n        <Illustration mouseEnter={mouseEnter} />\n      </div>\n      <div className=\"px-2 pb-6\">{children}</div>\n    </div>\n  );\n};\n\nexport const GlowingStarsDescription = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <p className={cn(\"text-base text-white max-w-[16rem]\", className)}>\n      {children}\n    </p>\n  );\n};\n\nexport const GlowingStarsTitle = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <h2 className={cn(\"font-bold text-2xl text-[#eaeaea]\", className)}>\n      {children}\n    </h2>\n  );\n};\n\nexport const Illustration = ({ mouseEnter }: { mouseEnter: boolean }) => {\n  const stars = 108;\n  const columns = 18;\n\n  const [glowingStars, setGlowingStars] = useState<number[]>([]);\n\n  const highlightedStars = useRef<number[]>([]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      highlightedStars.current = Array.from({ length: 5 }, () =>\n        Math.floor(Math.random() * stars)\n      );\n      setGlowingStars([...highlightedStars.current]);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div\n      className=\"h-48 p-1 w-full\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n        gap: `1px`,\n      }}\n    >\n      {[...Array(stars)].map((_, starIdx) => {\n        const isGlowing = glowingStars.includes(starIdx);\n        const delay = (starIdx % 10) * 0.1;\n        const staticDelay = starIdx * 0.01;\n        return (\n          <div\n            key={`matrix-col-${starIdx}}`}\n            className=\"relative flex items-center justify-center\"\n          >\n            <Star\n              isGlowing={mouseEnter ? true : isGlowing}\n              delay={mouseEnter ? staticDelay : delay}\n            />\n            {mouseEnter && <Glow delay={staticDelay} />}\n            <AnimatePresence mode=\"wait\">\n              {isGlowing && <Glow delay={delay} />}\n            </AnimatePresence>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst Star = ({ isGlowing, delay }: { isGlowing: boolean; delay: number }) => {\n  return (\n    <motion.div\n      key={delay}\n      initial={{\n        scale: 1,\n      }}\n      animate={{\n        scale: isGlowing ? [1, 1.2, 2.5, 2.2, 1.5] : 1,\n        background: isGlowing ? \"#fff\" : \"#666\",\n      }}\n      transition={{\n        duration: 2,\n        ease: \"easeInOut\",\n        delay: delay,\n      }}\n      className={cn(\"bg-[#666] h-[1px] w-[1px] rounded-full relative z-20\")}\n    ></motion.div>\n  );\n};\n\nconst Glow = ({ delay }: { delay: number }) => {\n  return (\n    <motion.div\n      initial={{\n        opacity: 0,\n      }}\n      animate={{\n        opacity: 1,\n      }}\n      transition={{\n        duration: 2,\n        ease: \"easeInOut\",\n        delay: delay,\n      }}\n      exit={{\n        opacity: 0,\n      }}\n      className=\"absolute  left-1/2 -translate-x-1/2 z-10 h-[4px] w-[4px] rounded-full bg-blue-500 blur-[1px] shadow-2xl shadow-blue-400\"\n    />\n  );\n};\n\n```","type":"animated-effect"}
{"source":"aceternity ui","name":"grid-background-demo","prompt":"Generate an Aceternity UI component for a CSS grid background with radial mask fade and centered heading using Tailwind and React.","completion":"```jsx\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\nexport function GridBackgroundDemo() {\n  return (\n    <div\n      className=\"relative flex h-[50rem] w-full items-center justify-center bg-white dark:bg-black\">\n      <div\n        className={cn(\n          \"absolute inset-0\",\n          \"[background-size:40px_40px]\",\n          \"[background-image:linear-gradient(to_right,#e4e4e7_1px,transparent_1px),linear-gradient(to_bottom,#e4e4e7_1px,transparent_1px)]\",\n          \"dark:[background-image:linear-gradient(to_right,#262626_1px,transparent_1px),linear-gradient(to_bottom,#262626_1px,transparent_1px)]\"\n        )} />\n      <div\n        className=\"pointer-events-none absolute inset-0 flex items-center justify-center bg-white [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)] dark:bg-black\"></div>\n      <p\n        className=\"relative z-20 bg-gradient-to-b from-neutral-200 to-neutral-500 bg-clip-text py-8 text-4xl font-bold text-transparent sm:text-7xl\">\n        Backgrounds\n      </p>\n    </div>\n  );\n};\n\n```","type":"background-effect"}
{"source":"aceternity ui","name":"grid-small-background-demo","prompt":"Generate an Aceternity UI component for a small CSS grid background with a radial mask and centered text using Tailwind and React.","completion":"```jsx\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\nexport function GridSmallBackgroundDemo() {\n  return (\n    <div\n      className=\"relative flex h-[50rem] w-full items-center justify-center bg-white dark:bg-black\">\n      <div\n        className={cn(\n          \"absolute inset-0\",\n          \"[background-size:20px_20px]\",\n          \"[background-image:linear-gradient(to_right,#e4e4e7_1px,transparent_1px),linear-gradient(to_bottom,#e4e4e7_1px,transparent_1px)]\",\n          \"dark:[background-image:linear-gradient(to_right,#262626_1px,transparent_1px),linear-gradient(to_bottom,#262626_1px,transparent_1px)]\"\n        )} />\n      <div\n        className=\"pointer-events-none absolute inset-0 flex items-center justify-center bg-white [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)] dark:bg-black\"></div>\n      <p\n        className=\"relative z-20 bg-gradient-to-b from-neutral-200 to-neutral-500 bg-clip-text py-8 text-4xl font-bold text-transparent sm:text-7xl\">\n        Backgrounds\n      </p>\n    </div>\n  );\n};\n\n```","type":"background-effect"}
{"source":"aceternity ui","name":"dot-background-demo","prompt":"Generate an Aceternity UI component that creates a dot grid background with a center radial mask and overlaid gradient text using Tailwind and React.","completion":"```jsx\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\nexport function DotBackgroundDemo() {\n  return (\n    <div\n      className=\"relative flex h-[50rem] w-full items-center justify-center bg-white dark:bg-black\">\n      <div\n        className={cn(\n          \"absolute inset-0\",\n          \"[background-size:20px_20px]\",\n          \"[background-image:radial-gradient(#d4d4d4_1px,transparent_1px)]\",\n          \"dark:[background-image:radial-gradient(#404040_1px,transparent_1px)]\"\n        )} />\n      <div\n        className=\"pointer-events-none absolute inset-0 flex items-center justify-center bg-white [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)] dark:bg-black\"></div>\n      <p\n        className=\"relative z-20 bg-gradient-to-b from-neutral-200 to-neutral-500 bg-clip-text py-8 text-4xl font-bold text-transparent sm:text-7xl\">\n        Backgrounds\n      </p>\n    </div>\n  );\n};\n\n```","type":"background-effect"}
{"source":"aceternity ui","name":"hero-highlight","prompt":"Generate an Aceternity UI component for a hero section with interactive radial highlight animation using dot SVG backgrounds and motion values for cursor tracking, built with Tailwind and React.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { useMotionValue, motion, useMotionTemplate } from \"motion/react\";\nimport React from \"react\";\n\nexport const HeroHighlight = ({\n  children,\n  className,\n  containerClassName,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  containerClassName?: string;\n}) => {\n  let mouseX = useMotionValue(0);\n  let mouseY = useMotionValue(0);\n\n  // SVG patterns for different states and themes\n  const dotPatterns = {\n    light: {\n      default: `url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='16' height='16' fill='none'%3E%3Ccircle fill='%23d4d4d4' id='pattern-circle' cx='10' cy='10' r='2.5'%3E%3C/circle%3E%3C/svg%3E\")`,\n      hover: `url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='16' height='16' fill='none'%3E%3Ccircle fill='%236366f1' id='pattern-circle' cx='10' cy='10' r='2.5'%3E%3C/circle%3E%3C/svg%3E\")`,\n    },\n    dark: {\n      default: `url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='16' height='16' fill='none'%3E%3Ccircle fill='%23404040' id='pattern-circle' cx='10' cy='10' r='2.5'%3E%3C/circle%3E%3C/svg%3E\")`,\n      hover: `url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='16' height='16' fill='none'%3E%3Ccircle fill='%238183f4' id='pattern-circle' cx='10' cy='10' r='2.5'%3E%3C/circle%3E%3C/svg%3E\")`,\n    },\n  };\n\n  function handleMouseMove({\n    currentTarget,\n    clientX,\n    clientY,\n  }: React.MouseEvent<HTMLDivElement>) {\n    if (!currentTarget) return;\n    let { left, top } = currentTarget.getBoundingClientRect();\n\n    mouseX.set(clientX - left);\n    mouseY.set(clientY - top);\n  }\n  return (\n    <div\n      className={cn(\n        \"group relative flex h-[40rem] w-full items-center justify-center bg-white dark:bg-black\",\n        containerClassName,\n      )}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        className=\"pointer-events-none absolute inset-0 dark:hidden\"\n        style={{\n          backgroundImage: dotPatterns.light.default,\n        }}\n      />\n      <div\n        className=\"pointer-events-none absolute inset-0 hidden dark:block\"\n        style={{\n          backgroundImage: dotPatterns.dark.default,\n        }}\n      />\n      <motion.div\n        className=\"pointer-events-none absolute inset-0 opacity-0 transition duration-300 group-hover:opacity-100 dark:hidden\"\n        style={{\n          backgroundImage: dotPatterns.light.hover,\n          WebkitMaskImage: useMotionTemplate`\n            radial-gradient(\n              200px circle at ${mouseX}px ${mouseY}px,\n              black 0%,\n              transparent 100%\n            )\n          `,\n          maskImage: useMotionTemplate`\n            radial-gradient(\n              200px circle at ${mouseX}px ${mouseY}px,\n              black 0%,\n              transparent 100%\n            )\n          `,\n        }}\n      />\n      <motion.div\n        className=\"pointer-events-none absolute inset-0 hidden opacity-0 transition duration-300 group-hover:opacity-100 dark:block\"\n        style={{\n          backgroundImage: dotPatterns.dark.hover,\n          WebkitMaskImage: useMotionTemplate`\n            radial-gradient(\n              200px circle at ${mouseX}px ${mouseY}px,\n              black 0%,\n              transparent 100%\n            )\n          `,\n          maskImage: useMotionTemplate`\n            radial-gradient(\n              200px circle at ${mouseX}px ${mouseY}px,\n              black 0%,\n              transparent 100%\n            )\n          `,\n        }}\n      />\n\n      <div className={cn(\"relative z-20\", className)}>{children}</div>\n    </div>\n  );\n};\n\nexport const Highlight = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <motion.span\n      initial={{\n        backgroundSize: \"0% 100%\",\n      }}\n      animate={{\n        backgroundSize: \"100% 100%\",\n      }}\n      transition={{\n        duration: 2,\n        ease: \"linear\",\n        delay: 0.5,\n      }}\n      style={{\n        backgroundRepeat: \"no-repeat\",\n        backgroundPosition: \"left center\",\n        display: \"inline\",\n      }}\n      className={cn(\n        `relative inline-block rounded-lg bg-gradient-to-r from-indigo-300 to-purple-300 px-1 pb-1 dark:from-indigo-500 dark:to-purple-500`,\n        className,\n      )}\n    >\n      {children}\n    </motion.span>\n  );\n};\n\n```","type":"background-effect"}
{"source":"aceternity ui","name":"hero-parallax","prompt":"Generate an Aceternity UI component for a parallax-style hero section with horizontally scrolling rows of product cards that animate on scroll using Tailwind and React motion.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport {\n  motion,\n  useScroll,\n  useTransform,\n  useSpring,\n  MotionValue,\n} from \"motion/react\";\n\n\n\nexport const HeroParallax = ({\n  products,\n}: {\n  products: {\n    title: string;\n    link: string;\n    thumbnail: string;\n  }[];\n}) => {\n  const firstRow = products.slice(0, 5);\n  const secondRow = products.slice(5, 10);\n  const thirdRow = products.slice(10, 15);\n  const ref = React.useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n\n  const springConfig = { stiffness: 300, damping: 30, bounce: 100 };\n\n  const translateX = useSpring(\n    useTransform(scrollYProgress, [0, 1], [0, 1000]),\n    springConfig\n  );\n  const translateXReverse = useSpring(\n    useTransform(scrollYProgress, [0, 1], [0, -1000]),\n    springConfig\n  );\n  const rotateX = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [15, 0]),\n    springConfig\n  );\n  const opacity = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [0.2, 1]),\n    springConfig\n  );\n  const rotateZ = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [20, 0]),\n    springConfig\n  );\n  const translateY = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [-700, 500]),\n    springConfig\n  );\n  return (\n    <div\n      ref={ref}\n      className=\"h-[300vh] py-40 overflow-hidden  antialiased relative flex flex-col self-auto [perspective:1000px] [transform-style:preserve-3d]\"\n    >\n      <Header />\n      <motion.div\n        style={{\n          rotateX,\n          rotateZ,\n          translateY,\n          opacity,\n        }}\n        className=\"\"\n      >\n        <motion.div className=\"flex flex-row-reverse space-x-reverse space-x-20 mb-20\">\n          {firstRow.map((product) => (\n            <ProductCard\n              product={product}\n              translate={translateX}\n              key={product.title}\n            />\n          ))}\n        </motion.div>\n        <motion.div className=\"flex flex-row  mb-20 space-x-20 \">\n          {secondRow.map((product) => (\n            <ProductCard\n              product={product}\n              translate={translateXReverse}\n              key={product.title}\n            />\n          ))}\n        </motion.div>\n        <motion.div className=\"flex flex-row-reverse space-x-reverse space-x-20\">\n          {thirdRow.map((product) => (\n            <ProductCard\n              product={product}\n              translate={translateX}\n              key={product.title}\n            />\n          ))}\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport const Header = () => {\n  return (\n    <div className=\"max-w-7xl relative mx-auto py-20 md:py-40 px-4 w-full  left-0 top-0\">\n      <h1 className=\"text-2xl md:text-7xl font-bold dark:text-white\">\n        The Ultimate <br /> development studio\n      </h1>\n      <p className=\"max-w-2xl text-base md:text-xl mt-8 dark:text-neutral-200\">\n        We build beautiful products with the latest technologies and frameworks.\n        We are a team of passionate developers and designers that love to build\n        amazing products.\n      </p>\n    </div>\n  );\n};\n\nexport const ProductCard = ({\n  product,\n  translate,\n}: {\n  product: {\n    title: string;\n    link: string;\n    thumbnail: string;\n  };\n  translate: MotionValue<number>;\n}) => {\n  return (\n    <motion.div\n      style={{\n        x: translate,\n      }}\n      whileHover={{\n        y: -20,\n      }}\n      key={product.title}\n      className=\"group/product h-96 w-[30rem] relative shrink-0\"\n    >\n      <a\n        href={product.link}\n        className=\"block group-hover/product:shadow-2xl \"\n      >\n        <img\n          src={product.thumbnail}\n          height=\"600\"\n          width=\"600\"\n          className=\"object-cover object-left-top absolute h-full w-full inset-0\"\n          alt={product.title}\n        />\n      </a>\n      <div className=\"absolute inset-0 h-full w-full opacity-0 group-hover/product:opacity-80 bg-black pointer-events-none\"></div>\n      <h2 className=\"absolute bottom-4 left-4 opacity-0 group-hover/product:opacity-100 text-white\">\n        {product.title}\n      </h2>\n    </motion.div>\n  );\n};\n\n```","type":"animation"}
{"source":"aceternity ui","name":"infinite-moving-cards","prompt":"Generate an Aceternity UI component for an infinitely scrolling row of testimonial cards with adjustable speed and direction, using Tailwind and React.","completion":"```jsx\n\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useState } from \"react\";\n\nexport const InfiniteMovingCards = ({\n  items,\n  direction = \"left\",\n  speed = \"fast\",\n  pauseOnHover = true,\n  className,\n}: {\n  items: {\n    quote: string;\n    name: string;\n    title: string;\n  }[];\n  direction?: \"left\" | \"right\";\n  speed?: \"fast\" | \"normal\" | \"slow\";\n  pauseOnHover?: boolean;\n  className?: string;\n}) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const scrollerRef = React.useRef<HTMLUListElement>(null);\n\n  useEffect(() => {\n    addAnimation();\n  }, []);\n  const [start, setStart] = useState(false);\n  function addAnimation() {\n    if (containerRef.current && scrollerRef.current) {\n      const scrollerContent = Array.from(scrollerRef.current.children);\n\n      scrollerContent.forEach((item) => {\n        const duplicatedItem = item.cloneNode(true);\n        if (scrollerRef.current) {\n          scrollerRef.current.appendChild(duplicatedItem);\n        }\n      });\n\n      getDirection();\n      getSpeed();\n      setStart(true);\n    }\n  }\n  const getDirection = () => {\n    if (containerRef.current) {\n      if (direction === \"left\") {\n        containerRef.current.style.setProperty(\n          \"--animation-direction\",\n          \"forwards\",\n        );\n      } else {\n        containerRef.current.style.setProperty(\n          \"--animation-direction\",\n          \"reverse\",\n        );\n      }\n    }\n  };\n  const getSpeed = () => {\n    if (containerRef.current) {\n      if (speed === \"fast\") {\n        containerRef.current.style.setProperty(\"--animation-duration\", \"20s\");\n      } else if (speed === \"normal\") {\n        containerRef.current.style.setProperty(\"--animation-duration\", \"40s\");\n      } else {\n        containerRef.current.style.setProperty(\"--animation-duration\", \"80s\");\n      }\n    }\n  };\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"scroller relative z-20 max-w-7xl overflow-hidden [mask-image:linear-gradient(to_right,transparent,white_20%,white_80%,transparent)]\",\n        className,\n      )}\n    >\n      <ul\n        ref={scrollerRef}\n        className={cn(\n          \"flex w-max min-w-full shrink-0 flex-nowrap gap-4 py-4\",\n          start && \"animate-scroll\",\n          pauseOnHover && \"hover:[animation-play-state:paused]\",\n        )}\n      >\n        {items.map((item, idx) => (\n          <li\n            className=\"relative w-[350px] max-w-full shrink-0 rounded-2xl border border-b-0 border-zinc-200 bg-[linear-gradient(180deg,#fafafa,#f5f5f5)] px-8 py-6 md:w-[450px] dark:border-zinc-700 dark:bg-[linear-gradient(180deg,#27272a,#18181b)]\"\n            key={item.name}\n          >\n            <blockquote>\n              <div\n                aria-hidden=\"true\"\n                className=\"user-select-none pointer-events-none absolute -top-0.5 -left-0.5 -z-1 h-[calc(100%_+_4px)] w-[calc(100%_+_4px)]\"\n              ></div>\n              <span className=\"relative z-20 text-sm leading-[1.6] font-normal text-neutral-800 dark:text-gray-100\">\n                {item.quote}\n              </span>\n              <div className=\"relative z-20 mt-6 flex flex-row items-center\">\n                <span className=\"flex flex-col gap-1\">\n                  <span className=\"text-sm leading-[1.6] font-normal text-neutral-500 dark:text-gray-400\">\n                    {item.name}\n                  </span>\n                  <span className=\"text-sm leading-[1.6] font-normal text-neutral-500 dark:text-gray-400\">\n                    {item.title}\n                  </span>\n                </span>\n              </div>\n            </blockquote>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n```","type":"animation"}
{"source":"aceternity ui","name":"lamp-demo","prompt":"Generate an Aceternity UI component for a futuristic lamp animation using conic gradients and blur effects with Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function LampDemo() {\n  return (\n    <LampContainer>\n      <motion.h1\n        initial={{ opacity: 0.5, y: 100 }}\n        whileInView={{ opacity: 1, y: 0 }}\n        transition={{\n          delay: 0.3,\n          duration: 0.8,\n          ease: \"easeInOut\",\n        }}\n        className=\"mt-8 bg-gradient-to-br from-slate-300 to-slate-500 py-4 bg-clip-text text-center text-4xl font-medium tracking-tight text-transparent md:text-7xl\"\n      >\n        Build lamps <br /> the right way\n      </motion.h1>\n    </LampContainer>\n  );\n}\n\nexport const LampContainer = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"relative flex min-h-screen flex-col items-center justify-center overflow-hidden bg-slate-950 w-full rounded-md z-0\",\n        className\n      )}\n    >\n      <div className=\"relative flex w-full flex-1 scale-y-125 items-center justify-center isolate z-0 \">\n        <motion.div\n          initial={{ opacity: 0.5, width: \"15rem\" }}\n          whileInView={{ opacity: 1, width: \"30rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          style={{\n            backgroundImage: `conic-gradient(var(--conic-position), var(--tw-gradient-stops))`,\n          }}\n          className=\"absolute inset-auto right-1/2 h-56 overflow-visible w-[30rem] bg-gradient-conic from-cyan-500 via-transparent to-transparent text-white [--conic-position:from_70deg_at_center_top]\"\n        >\n          <div className=\"absolute  w-[100%] left-0 bg-slate-950 h-40 bottom-0 z-20 [mask-image:linear-gradient(to_top,white,transparent)]\" />\n          <div className=\"absolute  w-40 h-[100%] left-0 bg-slate-950  bottom-0 z-20 [mask-image:linear-gradient(to_right,white,transparent)]\" />\n        </motion.div>\n        <motion.div\n          initial={{ opacity: 0.5, width: \"15rem\" }}\n          whileInView={{ opacity: 1, width: \"30rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          style={{\n            backgroundImage: `conic-gradient(var(--conic-position), var(--tw-gradient-stops))`,\n          }}\n          className=\"absolute inset-auto left-1/2 h-56 w-[30rem] bg-gradient-conic from-transparent via-transparent to-cyan-500 text-white [--conic-position:from_290deg_at_center_top]\"\n        >\n          <div className=\"absolute  w-40 h-[100%] right-0 bg-slate-950  bottom-0 z-20 [mask-image:linear-gradient(to_left,white,transparent)]\" />\n          <div className=\"absolute  w-[100%] right-0 bg-slate-950 h-40 bottom-0 z-20 [mask-image:linear-gradient(to_top,white,transparent)]\" />\n        </motion.div>\n        <div className=\"absolute top-1/2 h-48 w-full translate-y-12 scale-x-150 bg-slate-950 blur-2xl\"></div>\n        <div className=\"absolute top-1/2 z-50 h-48 w-full bg-transparent opacity-10 backdrop-blur-md\"></div>\n        <div className=\"absolute inset-auto z-50 h-36 w-[28rem] -translate-y-1/2 rounded-full bg-cyan-500 opacity-50 blur-3xl\"></div>\n        <motion.div\n          initial={{ width: \"8rem\" }}\n          whileInView={{ width: \"16rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          className=\"absolute inset-auto z-30 h-36 w-64 -translate-y-[6rem] rounded-full bg-cyan-400 blur-2xl\"\n        ></motion.div>\n        <motion.div\n          initial={{ width: \"15rem\" }}\n          whileInView={{ width: \"30rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          className=\"absolute inset-auto z-50 h-0.5 w-[30rem] -translate-y-[7rem] bg-cyan-400 \"\n        ></motion.div>\n\n        <div className=\"absolute inset-auto z-40 h-44 w-full -translate-y-[12.5rem] bg-slate-950 \"></div>\n      </div>\n\n      <div className=\"relative z-50 flex -translate-y-80 flex-col items-center px-5\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n```","type":"animation"}
{"source":"aceternity ui","name":"layout-grid","prompt":"Generate an Aceternity UI component for an interactive layout grid where cards expand on click using React and Tailwind animations.","completion":"```jsx\n\"use client\";\nimport React, { useState } from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Card = {\n  id: number;\n  content: JSX.Element | React.ReactNode | string;\n  className: string;\n  thumbnail: string;\n};\n\nexport const LayoutGrid = ({ cards }: { cards: Card[] }) => {\n  const [selected, setSelected] = useState<Card | null>(null);\n  const [lastSelected, setLastSelected] = useState<Card | null>(null);\n\n  const handleClick = (card: Card) => {\n    setLastSelected(selected);\n    setSelected(card);\n  };\n\n  const handleOutsideClick = () => {\n    setLastSelected(selected);\n    setSelected(null);\n  };\n\n  return (\n    <div className=\"w-full h-full p-10 grid grid-cols-1 md:grid-cols-3  max-w-7xl mx-auto gap-4 relative\">\n      {cards.map((card, i) => (\n        <div key={i} className={cn(card.className, \"\")}>\n          <motion.div\n            onClick={() => handleClick(card)}\n            className={cn(\n              card.className,\n              \"relative overflow-hidden\",\n              selected?.id === card.id\n                ? \"rounded-lg cursor-pointer absolute inset-0 h-1/2 w-full md:w-1/2 m-auto z-50 flex justify-center items-center flex-wrap flex-col\"\n                : lastSelected?.id === card.id\n                ? \"z-40 bg-white rounded-xl h-full w-full\"\n                : \"bg-white rounded-xl h-full w-full\"\n            )}\n            layoutId={`card-${card.id}`}\n          >\n            {selected?.id === card.id && <SelectedCard selected={selected} />}\n            <ImageComponent card={card} />\n          </motion.div>\n        </div>\n      ))}\n      <motion.div\n        onClick={handleOutsideClick}\n        className={cn(\n          \"absolute h-full w-full left-0 top-0 bg-black opacity-0 z-10\",\n          selected?.id ? \"pointer-events-auto\" : \"pointer-events-none\"\n        )}\n        animate={{ opacity: selected?.id ? 0.3 : 0 }}\n      />\n    </div>\n  );\n};\n\nconst ImageComponent = ({ card }: { card: Card }) => {\n  return (\n    <motion.img\n      layoutId={`image-${card.id}-image`}\n      src={card.thumbnail}\n      height=\"500\"\n      width=\"500\"\n      className={cn(\n        \"object-cover object-top absolute inset-0 h-full w-full transition duration-200\"\n      )}\n      alt=\"thumbnail\"\n    />\n  );\n};\n\nconst SelectedCard = ({ selected }: { selected: Card | null }) => {\n  return (\n    <div className=\"bg-transparent h-full w-full flex flex-col justify-end rounded-lg shadow-2xl relative z-[60]\">\n      <motion.div\n        initial={{\n          opacity: 0,\n        }}\n        animate={{\n          opacity: 0.6,\n        }}\n        className=\"absolute inset-0 h-full w-full bg-black opacity-60 z-10\"\n      />\n      <motion.div\n        layoutId={`content-${selected?.id}`}\n        initial={{\n          opacity: 0,\n          y: 100,\n        }}\n        animate={{\n          opacity: 1,\n          y: 0,\n        }}\n        exit={{\n          opacity: 0,\n          y: 100,\n        }}\n        transition={{\n          duration: 0.3,\n          ease: \"easeInOut\",\n        }}\n        className=\"relative px-8 pb-4 z-[70]\"\n      >\n        {selected?.content}\n      </motion.div>\n    </div>\n  );\n};\n\n```","type":"animation"}
{"source":"aceternity ui","name":"link-preview-hover-card","prompt":"Generate an Aceternity UI component for a link preview hover card using Radix HoverCard, React, Tailwind, and animated preview images from Microlink.","completion":"```jsx\n\"use client\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\n\nimport { encode } from \"qss\";\nimport React from \"react\";\nimport {\n  AnimatePresence,\n  motion,\n  useMotionValue,\n  useSpring,\n} from \"motion/react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype LinkPreviewProps = {\n  children: React.ReactNode;\n  url: string;\n  className?: string;\n  width?: number;\n  height?: number;\n  quality?: number;\n  layout?: string;\n} & (\n  | { isStatic: true; imageSrc: string }\n  | { isStatic?: false; imageSrc?: never }\n);\n\nexport const LinkPreview = ({\n  children,\n  url,\n  className,\n  width = 200,\n  height = 125,\n  quality = 50,\n  layout = \"fixed\",\n  isStatic = false,\n  imageSrc = \"\",\n}: LinkPreviewProps) => {\n  let src;\n  if (!isStatic) {\n    const params = encode({\n      url,\n      screenshot: true,\n      meta: false,\n      embed: \"screenshot.url\",\n      colorScheme: \"dark\",\n      \"viewport.isMobile\": true,\n      \"viewport.deviceScaleFactor\": 1,\n      \"viewport.width\": width * 3,\n      \"viewport.height\": height * 3,\n    });\n    src = `https://api.microlink.io/?${params}`;\n  } else {\n    src = imageSrc;\n  }\n\n  const [isOpen, setOpen] = React.useState(false);\n\n  const [isMounted, setIsMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  const springConfig = { stiffness: 100, damping: 15 };\n  const x = useMotionValue(0);\n\n  const translateX = useSpring(x, springConfig);\n\n  const handleMouseMove = (event: any) => {\n    const targetRect = event.target.getBoundingClientRect();\n    const eventOffsetX = event.clientX - targetRect.left;\n    const offsetFromCenter = (eventOffsetX - targetRect.width / 2) / 2; // Reduce the effect to make it subtle\n    x.set(offsetFromCenter);\n  };\n\n  return (\n    <>\n      {isMounted ? (\n        <div className=\"hidden\">\n          <img\n            src={src}\n            width={width}\n            height={height}\n            alt=\"hidden image\"\n          />\n        </div>\n      ) : null}\n\n      <HoverCardPrimitive.Root\n        openDelay={50}\n        closeDelay={100}\n        onOpenChange={(open) => {\n          setOpen(open);\n        }}\n      >\n        <HoverCardPrimitive.Trigger\n          onMouseMove={handleMouseMove}\n          className={cn(\"text-black dark:text-white\", className)}\n          href={url}\n        >\n          {children}\n        </HoverCardPrimitive.Trigger>\n\n        <HoverCardPrimitive.Content\n          className=\"[transform-origin:var(--radix-hover-card-content-transform-origin)]\"\n          side=\"top\"\n          align=\"center\"\n          sideOffset={10}\n        >\n          <AnimatePresence>\n            {isOpen && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.6 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  scale: 1,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 260,\n                    damping: 20,\n                  },\n                }}\n                exit={{ opacity: 0, y: 20, scale: 0.6 }}\n                className=\"shadow-xl rounded-xl\"\n                style={{\n                  x: translateX,\n                }}\n              >\n                <a\n                  href={url}\n                  className=\"block p-1 bg-white border-2 border-transparent shadow rounded-xl hover:border-neutral-200 dark:hover:border-neutral-800\"\n                  style={{ fontSize: 0 }}\n                >\n                  <img\n                    src={isStatic ? imageSrc : src}\n                    width={width}\n                    height={height}\n                    className=\"rounded-lg\"\n                    alt=\"preview image\"\n                  />\n                </a>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </HoverCardPrimitive.Content>\n      </HoverCardPrimitive.Root>\n    </>\n  );\n};\n\n```","type":"tooltip"}
{"source":"aceternity ui","name":"meteor-effect-background","prompt":"Generate an Aceternity UI component for a meteor background animation effect using React, Tailwind, and Motion for smooth entry and randomized meteor trails.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"motion/react\";\nimport React from \"react\";\n\nexport const Meteors = ({\n  number,\n  className,\n}: {\n  number?: number;\n  className?: string;\n}) => {\n  const meteors = new Array(number || 20).fill(true);\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {meteors.map((el, idx) => {\n        const meteorCount = number || 20;\n        // Calculate position to evenly distribute meteors across container width\n        const position = idx * (800 / meteorCount) - 400; // Spread across 800px range, centered\n\n        return (\n          <span\n            key={\"meteor\" + idx}\n            className={cn(\n              \"animate-meteor-effect absolute h-0.5 w-0.5 rotate-[45deg] rounded-[9999px] bg-slate-500 shadow-[0_0_0_1px_#ffffff10]\",\n              \"before:absolute before:top-1/2 before:h-[1px] before:w-[50px] before:-translate-y-[50%] before:transform before:bg-gradient-to-r before:from-[#64748b] before:to-transparent before:content-['']\",\n              className,\n            )}\n            style={{\n              top: \"-40px\", // Start above the container\n              left: position + \"px\",\n              animationDelay: Math.random() * 5 + \"s\", // Random delay between 0-5s\n              animationDuration: Math.floor(Math.random() * (10 - 5) + 5) + \"s\", // Keep some randomness in duration\n            }}\n          ></span>\n        );\n      })}\n    </motion.div>\n  );\n};\n\n```","type":"animation"}
{"source":"aceternity ui","name":"moving-border","prompt":"Generate an Aceternity UI component for a glowing button with a moving border animation using React, Tailwind CSS, and Motion.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport {\n  motion,\n  useAnimationFrame,\n  useMotionTemplate,\n  useMotionValue,\n  useTransform,\n} from \"motion/react\";\nimport { useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Button({\n  borderRadius = \"1.75rem\",\n  children,\n  as: Component = \"button\",\n  containerClassName,\n  borderClassName,\n  duration,\n  className,\n  ...otherProps\n}: {\n  borderRadius?: string;\n  children: React.ReactNode;\n  as?: any;\n  containerClassName?: string;\n  borderClassName?: string;\n  duration?: number;\n  className?: string;\n  [key: string]: any;\n}) {\n  return (\n    <Component\n      className={cn(\n        \"relative h-16 w-40 overflow-hidden bg-transparent p-[1px] text-xl\",\n        containerClassName,\n      )}\n      style={{\n        borderRadius: borderRadius,\n      }}\n      {...otherProps}\n    >\n      <div\n        className=\"absolute inset-0\"\n        style={{ borderRadius: `calc(${borderRadius} * 0.96)` }}\n      >\n        <MovingBorder duration={duration} rx=\"30%\" ry=\"30%\">\n          <div\n            className={cn(\n              \"h-20 w-20 bg-[radial-gradient(#0ea5e9_40%,transparent_60%)] opacity-[0.8]\",\n              borderClassName,\n            )}\n          />\n        </MovingBorder>\n      </div>\n\n      <div\n        className={cn(\n          \"relative flex h-full w-full items-center justify-center border border-slate-800 bg-slate-900/[0.8] text-sm text-white antialiased backdrop-blur-xl\",\n          className,\n        )}\n        style={{\n          borderRadius: `calc(${borderRadius} * 0.96)`,\n        }}\n      >\n        {children}\n      </div>\n    </Component>\n  );\n}\n\nexport const MovingBorder = ({\n  children,\n  duration = 3000,\n  rx,\n  ry,\n  ...otherProps\n}: {\n  children: React.ReactNode;\n  duration?: number;\n  rx?: string;\n  ry?: string;\n  [key: string]: any;\n}) => {\n  const pathRef = useRef<any>();\n  const progress = useMotionValue<number>(0);\n\n  useAnimationFrame((time) => {\n    const length = pathRef.current?.getTotalLength();\n    if (length) {\n      const pxPerMillisecond = length / duration;\n      progress.set((time * pxPerMillisecond) % length);\n    }\n  });\n\n  const x = useTransform(\n    progress,\n    (val) => pathRef.current?.getPointAtLength(val).x,\n  );\n  const y = useTransform(\n    progress,\n    (val) => pathRef.current?.getPointAtLength(val).y,\n  );\n\n  const transform = useMotionTemplate`translateX(${x}px) translateY(${y}px) translateX(-50%) translateY(-50%)`;\n\n  return (\n    <>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        preserveAspectRatio=\"none\"\n        className=\"absolute h-full w-full\"\n        width=\"100%\"\n        height=\"100%\"\n        {...otherProps}\n      >\n        <rect\n          fill=\"none\"\n          width=\"100%\"\n          height=\"100%\"\n          rx={rx}\n          ry={ry}\n          ref={pathRef}\n        />\n      </svg>\n      <motion.div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          display: \"inline-block\",\n          transform,\n        }}\n      >\n        {children}\n      </motion.div>\n    </>\n  );\n};\n\n```","type":"button"}
{"source":"aceternity ui","name":"parallax-scroll","prompt":"Generate an Aceternity UI component that implements a parallax scrolling grid of images using Tailwind, React, and motion.","completion":"```jsx\n\"use client\";\nimport { useScroll, useTransform } from \"motion/react\";\nimport { useRef } from \"react\";\nimport { motion } from \"motion/react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport const ParallaxScroll = ({\n  images,\n  className,\n}: {\n  images: string[];\n  className?: string;\n}) => {\n  const gridRef = useRef<any>(null);\n  const { scrollYProgress } = useScroll({\n    container: gridRef, // remove this if your container is not fixed height\n    offset: [\"start start\", \"end start\"], // remove this if your container is not fixed height\n  });\n\n  const translateFirst = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const translateSecond = useTransform(scrollYProgress, [0, 1], [0, 200]);\n  const translateThird = useTransform(scrollYProgress, [0, 1], [0, -200]);\n\n  const third = Math.ceil(images.length / 3);\n\n  const firstPart = images.slice(0, third);\n  const secondPart = images.slice(third, 2 * third);\n  const thirdPart = images.slice(2 * third);\n\n  return (\n    <div\n      className={cn(\"h-[40rem] items-start overflow-y-auto w-full\", className)}\n      ref={gridRef}\n    >\n      <div\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 items-start  max-w-5xl mx-auto gap-10 py-40 px-10\"\n        ref={gridRef}\n      >\n        <div className=\"grid gap-10\">\n          {firstPart.map((el, idx) => (\n            <motion.div\n              style={{ y: translateFirst }} // Apply the translateY motion value here\n              key={\"grid-1\" + idx}\n            >\n              <img\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {secondPart.map((el, idx) => (\n            <motion.div style={{ y: translateSecond }} key={\"grid-2\" + idx}>\n              <img\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {thirdPart.map((el, idx) => (\n            <motion.div style={{ y: translateThird }} key={\"grid-3\" + idx}>\n              <img\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n```","type":"scroll"}
{"source":"aceternity ui","name":"parallax-scroll-multidirectional","prompt":"Generate an Aceternity UI component that creates a multi-directional parallax scroll effect with rotation on a grid of images using Tailwind, React, and motion.","completion":"```jsx\n\"use client\";\nimport { useScroll, useTransform } from \"motion/react\";\nimport { useRef } from \"react\";\nimport { motion } from \"motion/react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport const ParallaxScrollSecond = ({\n  images,\n  className,\n}: {\n  images: string[];\n  className?: string;\n}) => {\n  const gridRef = useRef<any>(null);\n  const { scrollYProgress } = useScroll({\n    container: gridRef, // remove this if your container is not fixed height\n    offset: [\"start start\", \"end start\"], // remove this if your container is not fixed height\n  });\n\n  const translateYFirst = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const translateXFirst = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const rotateXFirst = useTransform(scrollYProgress, [0, 1], [0, -20]);\n\n  const translateYThird = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const translateXThird = useTransform(scrollYProgress, [0, 1], [0, 200]);\n  const rotateXThird = useTransform(scrollYProgress, [0, 1], [0, 20]);\n\n  const third = Math.ceil(images.length / 3);\n\n  const firstPart = images.slice(0, third);\n  const secondPart = images.slice(third, 2 * third);\n  const thirdPart = images.slice(2 * third);\n\n  return (\n    <div\n      className={cn(\"h-[40rem] items-start overflow-y-auto w-full\", className)}\n      ref={gridRef}\n    >\n      <div\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 items-start max-w-5xl mx-auto gap-10 py-40 px-10\"\n        ref={gridRef}\n      >\n        <div className=\"grid gap-10\">\n          {firstPart.map((el, idx) => (\n            <motion.div\n              style={{\n                y: translateYFirst,\n                x: translateXFirst,\n                rotateZ: rotateXFirst,\n              }} // Apply the translateY motion value here\n              key={\"grid-1\" + idx}\n            >\n              <img\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {secondPart.map((el, idx) => (\n            <motion.div key={\"grid-2\" + idx}>\n              <img\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {thirdPart.map((el, idx) => (\n            <motion.div\n              style={{\n                y: translateYThird,\n                x: translateXThird,\n                rotateZ: rotateXThird,\n              }}\n              key={\"grid-3\" + idx}\n            >\n              <img\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n```","type":"scroll"}
{"source":"aceternity ui","name":"placeholder-vanish-input","prompt":"Generate an Aceternity UI component for a disappearing animated input with rotating placeholders using Tailwind and React.","completion":"```jsx\n\"use client\";\n\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function PlaceholdersAndVanishInput({\n  placeholders,\n  onChange,\n  onSubmit,\n}: {\n  placeholders: string[];\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n}) {\n  const [currentPlaceholder, setCurrentPlaceholder] = useState(0);\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const startAnimation = () => {\n    intervalRef.current = setInterval(() => {\n      setCurrentPlaceholder((prev) => (prev + 1) % placeholders.length);\n    }, 3000);\n  };\n  const handleVisibilityChange = () => {\n    if (document.visibilityState !== \"visible\" && intervalRef.current) {\n      clearInterval(intervalRef.current); // Clear the interval when the tab is not visible\n      intervalRef.current = null;\n    } else if (document.visibilityState === \"visible\") {\n      startAnimation(); // Restart the interval when the tab becomes visible\n    }\n  };\n\n  useEffect(() => {\n    startAnimation();\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [placeholders]);\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const newDataRef = useRef<any[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [value, setValue] = useState(\"\");\n  const [animating, setAnimating] = useState(false);\n\n  const draw = useCallback(() => {\n    if (!inputRef.current) return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    canvas.width = 800;\n    canvas.height = 800;\n    ctx.clearRect(0, 0, 800, 800);\n    const computedStyles = getComputedStyle(inputRef.current);\n\n    const fontSize = parseFloat(computedStyles.getPropertyValue(\"font-size\"));\n    ctx.font = `${fontSize * 2}px ${computedStyles.fontFamily}`;\n    ctx.fillStyle = \"#FFF\";\n    ctx.fillText(value, 16, 40);\n\n    const imageData = ctx.getImageData(0, 0, 800, 800);\n    const pixelData = imageData.data;\n    const newData: any[] = [];\n\n    for (let t = 0; t < 800; t++) {\n      let i = 4 * t * 800;\n      for (let n = 0; n < 800; n++) {\n        let e = i + 4 * n;\n        if (\n          pixelData[e] !== 0 &&\n          pixelData[e + 1] !== 0 &&\n          pixelData[e + 2] !== 0\n        ) {\n          newData.push({\n            x: n,\n            y: t,\n            color: [\n              pixelData[e],\n              pixelData[e + 1],\n              pixelData[e + 2],\n              pixelData[e + 3],\n            ],\n          });\n        }\n      }\n    }\n\n    newDataRef.current = newData.map(({ x, y, color }) => ({\n      x,\n      y,\n      r: 1,\n      color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n    }));\n  }, [value]);\n\n  useEffect(() => {\n    draw();\n  }, [value, draw]);\n\n  const animate = (start: number) => {\n    const animateFrame = (pos: number = 0) => {\n      requestAnimationFrame(() => {\n        const newArr = [];\n        for (let i = 0; i < newDataRef.current.length; i++) {\n          const current = newDataRef.current[i];\n          if (current.x < pos) {\n            newArr.push(current);\n          } else {\n            if (current.r <= 0) {\n              current.r = 0;\n              continue;\n            }\n            current.x += Math.random() > 0.5 ? 1 : -1;\n            current.y += Math.random() > 0.5 ? 1 : -1;\n            current.r -= 0.05 * Math.random();\n            newArr.push(current);\n          }\n        }\n        newDataRef.current = newArr;\n        const ctx = canvasRef.current?.getContext(\"2d\");\n        if (ctx) {\n          ctx.clearRect(pos, 0, 800, 800);\n          newDataRef.current.forEach((t) => {\n            const { x: n, y: i, r: s, color: color } = t;\n            if (n > pos) {\n              ctx.beginPath();\n              ctx.rect(n, i, s, s);\n              ctx.fillStyle = color;\n              ctx.strokeStyle = color;\n              ctx.stroke();\n            }\n          });\n        }\n        if (newDataRef.current.length > 0) {\n          animateFrame(pos - 8);\n        } else {\n          setValue(\"\");\n          setAnimating(false);\n        }\n      });\n    };\n    animateFrame(start);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && !animating) {\n      vanishAndSubmit();\n    }\n  };\n\n  const vanishAndSubmit = () => {\n    setAnimating(true);\n    draw();\n\n    const value = inputRef.current?.value || \"\";\n    if (value && inputRef.current) {\n      const maxX = newDataRef.current.reduce(\n        (prev, current) => (current.x > prev ? current.x : prev),\n        0\n      );\n      animate(maxX);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    vanishAndSubmit();\n    onSubmit && onSubmit(e);\n  };\n  return (\n    <form\n      className={cn(\n        \"w-full relative max-w-xl mx-auto bg-white dark:bg-zinc-800 h-12 rounded-full overflow-hidden shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),_0px_1px_0px_0px_rgba(25,28,33,0.02),_0px_0px_0px_1px_rgba(25,28,33,0.08)] transition duration-200\",\n        value && \"bg-gray-50\"\n      )}\n      onSubmit={handleSubmit}\n    >\n      <canvas\n        className={cn(\n          \"absolute pointer-events-none  text-base transform scale-50 top-[20%] left-2 sm:left-8 origin-top-left filter invert dark:invert-0 pr-20\",\n          !animating ? \"opacity-0\" : \"opacity-100\"\n        )}\n        ref={canvasRef}\n      />\n      <input\n        onChange={(e) => {\n          if (!animating) {\n            setValue(e.target.value);\n            onChange && onChange(e);\n          }\n        }}\n        onKeyDown={handleKeyDown}\n        ref={inputRef}\n        value={value}\n        type=\"text\"\n        className={cn(\n          \"w-full relative text-sm sm:text-base z-50 border-none dark:text-white bg-transparent text-black h-full rounded-full focus:outline-none focus:ring-0 pl-4 sm:pl-10 pr-20\",\n          animating && \"text-transparent dark:text-transparent\"\n        )}\n      />\n\n      <button\n        disabled={!value}\n        type=\"submit\"\n        className=\"absolute right-2 top-1/2 z-50 -translate-y-1/2 h-8 w-8 rounded-full disabled:bg-gray-100 bg-black dark:bg-zinc-900 dark:disabled:bg-zinc-800 transition duration-200 flex items-center justify-center\"\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"text-gray-300 h-4 w-4\"\n        >\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <motion.path\n            d=\"M5 12l14 0\"\n            initial={{\n              strokeDasharray: \"50%\",\n              strokeDashoffset: \"50%\",\n            }}\n            animate={{\n              strokeDashoffset: value ? 0 : \"50%\",\n            }}\n            transition={{\n              duration: 0.3,\n              ease: \"linear\",\n            }}\n          />\n          <path d=\"M13 18l6 -6\" />\n          <path d=\"M13 6l6 6\" />\n        </motion.svg>\n      </button>\n\n      <div className=\"absolute inset-0 flex items-center rounded-full pointer-events-none\">\n        <AnimatePresence mode=\"wait\">\n          {!value && (\n            <motion.p\n              initial={{\n                y: 5,\n                opacity: 0,\n              }}\n              key={`current-placeholder-${currentPlaceholder}`}\n              animate={{\n                y: 0,\n                opacity: 1,\n              }}\n              exit={{\n                y: -15,\n                opacity: 0,\n              }}\n              transition={{\n                duration: 0.3,\n                ease: \"linear\",\n              }}\n              className=\"dark:text-zinc-500 text-sm sm:text-base font-normal text-neutral-500 pl-4 sm:pl-12 text-left w-[calc(100%-2rem)] truncate\"\n            >\n              {placeholders[currentPlaceholder]}\n            </motion.p>\n          )}\n        </AnimatePresence>\n      </div>\n    </form>\n  );\n}\n\n```","type":"form"}
{"source":"aceternity ui","name":"sidebar-provider-component","prompt":"Generate an Aceternity UI component for a responsive sidebar with animated mobile and desktop views using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useState, createContext, useContext } from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { IconMenu2, IconX } from \"@tabler/icons-react\";\n\ninterface Links {\n  label: string;\n  href: string;\n  icon: React.JSX.Element | React.ReactNode;\n}\n\ninterface SidebarContextProps {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  animate: boolean;\n}\n\nconst SidebarContext = createContext<SidebarContextProps | undefined>(\n  undefined\n);\n\nexport const useSidebar = () => {\n  const context = useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider\");\n  }\n  return context;\n};\n\nexport const SidebarProvider = ({\n  children,\n  open: openProp,\n  setOpen: setOpenProp,\n  animate = true,\n}: {\n  children: React.ReactNode;\n  open?: boolean;\n  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;\n  animate?: boolean;\n}) => {\n  const [openState, setOpenState] = useState(false);\n\n  const open = openProp !== undefined ? openProp : openState;\n  const setOpen = setOpenProp !== undefined ? setOpenProp : setOpenState;\n\n  return (\n    <SidebarContext.Provider value={{ open, setOpen, animate: animate }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n};\n\nexport const Sidebar = ({\n  children,\n  open,\n  setOpen,\n  animate,\n}: {\n  children: React.ReactNode;\n  open?: boolean;\n  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;\n  animate?: boolean;\n}) => {\n  return (\n    <SidebarProvider open={open} setOpen={setOpen} animate={animate}>\n      {children}\n    </SidebarProvider>\n  );\n};\n\nexport const SidebarBody = (props: React.ComponentProps<typeof motion.div>) => {\n  return (\n    <>\n      <DesktopSidebar {...props} />\n      <MobileSidebar {...(props as React.ComponentProps<\"div\">)} />\n    </>\n  );\n};\n\nexport const DesktopSidebar = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof motion.div>) => {\n  const { open, setOpen, animate } = useSidebar();\n  return (\n    <>\n      <motion.div\n        className={cn(\n          \"h-full px-4 py-4 hidden  md:flex md:flex-col bg-neutral-100 dark:bg-neutral-800 w-[300px] shrink-0\",\n          className\n        )}\n        animate={{\n          width: animate ? (open ? \"300px\" : \"60px\") : \"300px\",\n        }}\n        onMouseEnter={() => setOpen(true)}\n        onMouseLeave={() => setOpen(false)}\n        {...props}\n      >\n        {children}\n      </motion.div>\n    </>\n  );\n};\n\nexport const MobileSidebar = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  const { open, setOpen } = useSidebar();\n  return (\n    <>\n      <div\n        className={cn(\n          \"h-10 px-4 py-4 flex flex-row md:hidden  items-center justify-between bg-neutral-100 dark:bg-neutral-800 w-full\"\n        )}\n        {...props}\n      >\n        <div className=\"flex justify-end z-20 w-full\">\n          <IconMenu2\n            className=\"text-neutral-800 dark:text-neutral-200\"\n            onClick={() => setOpen(!open)}\n          />\n        </div>\n        <AnimatePresence>\n          {open && (\n            <motion.div\n              initial={{ x: \"-100%\", opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: \"-100%\", opacity: 0 }}\n              transition={{\n                duration: 0.3,\n                ease: \"easeInOut\",\n              }}\n              className={cn(\n                \"fixed h-full w-full inset-0 bg-white dark:bg-neutral-900 p-10 z-[100] flex flex-col justify-between\",\n                className\n              )}\n            >\n              <div\n                className=\"absolute right-10 top-10 z-50 text-neutral-800 dark:text-neutral-200\"\n                onClick={() => setOpen(!open)}\n              >\n                <IconX />\n              </div>\n              {children}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </>\n  );\n};\n\nexport const SidebarLink = ({\n  link,\n  className,\n  ...props\n}: {\n  link: Links;\n  className?: string;\n}) => {\n  const { open, animate } = useSidebar();\n  return (\n    <a\n      href={link.href}\n      className={cn(\n        \"flex items-center justify-start gap-2  group/sidebar py-2\",\n        className\n      )}\n      {...props}\n    >\n      {link.icon}\n\n      <motion.span\n        animate={{\n          display: animate ? (open ? \"inline-block\" : \"none\") : \"inline-block\",\n          opacity: animate ? (open ? 1 : 0) : 1,\n        }}\n        className=\"text-neutral-700 dark:text-neutral-200 text-sm group-hover/sidebar:translate-x-1 transition duration-150 whitespace-pre inline-block !p-0 !m-0\"\n      >\n        {link.label}\n      </motion.span>\n    </a>\n  );\n};\n\n```","type":"navigation"}
{"source":"aceternity ui","name":"signup-form","prompt":"Generate an Aceternity UI component for a signup form with multiple fields and third-party login buttons using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconBrandGithub,\n  IconBrandGoogle,\n  IconBrandOnlyfans,\n} from \"@tabler/icons-react\";\n\nexport default function SignupFormDemo() {\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    console.log(\"Form submitted\");\n  };\n  return (\n    <div className=\"shadow-input mx-auto w-full max-w-md rounded-none bg-white p-4 md:rounded-2xl md:p-8 dark:bg-black\">\n      <h2 className=\"text-xl font-bold text-neutral-800 dark:text-neutral-200\">\n        Welcome to Aceternity\n      </h2>\n      <p className=\"mt-2 max-w-sm text-sm text-neutral-600 dark:text-neutral-300\">\n        Login to aceternity if you can because we don&apos;t have a login flow\n        yet\n      </p>\n\n      <form className=\"my-8\" onSubmit={handleSubmit}>\n        <div className=\"mb-4 flex flex-col space-y-2 md:flex-row md:space-y-0 md:space-x-2\">\n          <LabelInputContainer>\n            <Label htmlFor=\"firstname\">First name</Label>\n            <Input id=\"firstname\" placeholder=\"Tyler\" type=\"text\" />\n          </LabelInputContainer>\n          <LabelInputContainer>\n            <Label htmlFor=\"lastname\">Last name</Label>\n            <Input id=\"lastname\" placeholder=\"Durden\" type=\"text\" />\n          </LabelInputContainer>\n        </div>\n        <LabelInputContainer className=\"mb-4\">\n          <Label htmlFor=\"email\">Email Address</Label>\n          <Input id=\"email\" placeholder=\"projectmayhem@fc.com\" type=\"email\" />\n        </LabelInputContainer>\n        <LabelInputContainer className=\"mb-4\">\n          <Label htmlFor=\"password\">Password</Label>\n          <Input id=\"password\" placeholder=\"••••••••\" type=\"password\" />\n        </LabelInputContainer>\n        <LabelInputContainer className=\"mb-8\">\n          <Label htmlFor=\"twitterpassword\">Your twitter password</Label>\n          <Input\n            id=\"twitterpassword\"\n            placeholder=\"••••••••\"\n            type=\"twitterpassword\"\n          />\n        </LabelInputContainer>\n\n        <button\n          className=\"group/btn relative block h-10 w-full rounded-md bg-gradient-to-br from-black to-neutral-600 font-medium text-white shadow-[0px_1px_0px_0px_#ffffff40_inset,0px_-1px_0px_0px_#ffffff40_inset] dark:bg-zinc-800 dark:from-zinc-900 dark:to-zinc-900 dark:shadow-[0px_1px_0px_0px_#27272a_inset,0px_-1px_0px_0px_#27272a_inset]\"\n          type=\"submit\"\n        >\n          Sign up &rarr;\n          <BottomGradient />\n        </button>\n\n        <div className=\"my-8 h-[1px] w-full bg-gradient-to-r from-transparent via-neutral-300 to-transparent dark:via-neutral-700\" />\n\n        <div className=\"flex flex-col space-y-4\">\n          <button\n            className=\"group/btn shadow-input relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_#262626]\"\n            type=\"submit\"\n          >\n            <IconBrandGithub className=\"h-4 w-4 text-neutral-800 dark:text-neutral-300\" />\n            <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\n              GitHub\n            </span>\n            <BottomGradient />\n          </button>\n          <button\n            className=\"group/btn shadow-input relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_#262626]\"\n            type=\"submit\"\n          >\n            <IconBrandGoogle className=\"h-4 w-4 text-neutral-800 dark:text-neutral-300\" />\n            <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\n              Google\n            </span>\n            <BottomGradient />\n          </button>\n          <button\n            className=\"group/btn shadow-input relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_#262626]\"\n            type=\"submit\"\n          >\n            <IconBrandOnlyfans className=\"h-4 w-4 text-neutral-800 dark:text-neutral-300\" />\n            <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\n              OnlyFans\n            </span>\n            <BottomGradient />\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nconst BottomGradient = () => {\n  return (\n    <>\n      <span className=\"absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-cyan-500 to-transparent opacity-0 transition duration-500 group-hover/btn:opacity-100\" />\n      <span className=\"absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-indigo-500 to-transparent opacity-0 blur-sm transition duration-500 group-hover/btn:opacity-100\" />\n    </>\n  );\n};\n\nconst LabelInputContainer = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"flex w-full flex-col space-y-2\", className)}>\n      {children}\n    </div>\n  );\n};\n\n\"use client\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useMotionTemplate, useMotionValue, motion } from \"motion/react\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    const radius = 100; // change this to increase the rdaius of the hover effect\n    const [visible, setVisible] = React.useState(false);\n\n    let mouseX = useMotionValue(0);\n    let mouseY = useMotionValue(0);\n\n    function handleMouseMove({ currentTarget, clientX, clientY }: any) {\n      let { left, top } = currentTarget.getBoundingClientRect();\n\n      mouseX.set(clientX - left);\n      mouseY.set(clientY - top);\n    }\n    return (\n      <motion.div\n        style={{\n          background: useMotionTemplate`\n        radial-gradient(\n          ${visible ? radius + \"px\" : \"0px\"} circle at ${mouseX}px ${mouseY}px,\n          #3b82f6,\n          transparent 80%\n        )\n      `,\n        }}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={() => setVisible(true)}\n        onMouseLeave={() => setVisible(false)}\n        className=\"group/input rounded-lg p-[2px] transition duration-300\"\n      >\n        <input\n          type={type}\n          className={cn(\n            `shadow-input dark:placeholder-text-neutral-600 flex h-10 w-full rounded-md border-none bg-gray-50 px-3 py-2 text-sm text-black transition duration-400 group-hover/input:shadow-none file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400 focus-visible:ring-[2px] focus-visible:ring-neutral-400 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 dark:bg-zinc-800 dark:text-white dark:shadow-[0px_0px_1px_1px_#404040] dark:focus-visible:ring-neutral-600`,\n            className,\n          )}\n          ref={ref}\n          {...props}\n        />\n      </motion.div>\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n\n\"use client\";\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"text-sm font-medium text-black dark:text-white leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n      className\n    )}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n\n```","type":"form"}
{"source":"aceternity ui","name":"sparkles-core","prompt":"Generate an Aceternity UI component for a customizable particle animation background using Tailwind, React, and tsparticles.","completion":"```jsx\n\"use client\";\nimport React, { useId, useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport type { Container, SingleOrMultiple } from \"@tsparticles/engine\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"motion/react\";\n\ntype ParticlesProps = {\n  id?: string;\n  className?: string;\n  background?: string;\n  particleSize?: number;\n  minSize?: number;\n  maxSize?: number;\n  speed?: number;\n  particleColor?: string;\n  particleDensity?: number;\n};\nexport const SparklesCore = (props: ParticlesProps) => {\n  const {\n    id,\n    className,\n    background,\n    minSize,\n    maxSize,\n    speed,\n    particleColor,\n    particleDensity,\n  } = props;\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      await loadSlim(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const controls = useAnimation();\n\n  const particlesLoaded = async (container?: Container) => {\n    if (container) {\n      controls.start({\n        opacity: 1,\n        transition: {\n          duration: 1,\n        },\n      });\n    }\n  };\n\n  const generatedId = useId();\n  return (\n    <motion.div animate={controls} className={cn(\"opacity-0\", className)}>\n      {init && (\n        <Particles\n          id={id || generatedId}\n          className={cn(\"h-full w-full\")}\n          particlesLoaded={particlesLoaded}\n          options={{\n            background: {\n              color: {\n                value: background || \"#0d47a1\",\n              },\n            },\n            fullScreen: {\n              enable: false,\n              zIndex: 1,\n            },\n\n            fpsLimit: 120,\n            interactivity: {\n              events: {\n                onClick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n                onHover: {\n                  enable: false,\n                  mode: \"repulse\",\n                },\n                resize: true as any,\n              },\n              modes: {\n                push: {\n                  quantity: 4,\n                },\n                repulse: {\n                  distance: 200,\n                  duration: 0.4,\n                },\n              },\n            },\n            particles: {\n              bounce: {\n                horizontal: {\n                  value: 1,\n                },\n                vertical: {\n                  value: 1,\n                },\n              },\n              collisions: {\n                absorb: {\n                  speed: 2,\n                },\n                bounce: {\n                  horizontal: {\n                    value: 1,\n                  },\n                  vertical: {\n                    value: 1,\n                  },\n                },\n                enable: false,\n                maxSpeed: 50,\n                mode: \"bounce\",\n                overlap: {\n                  enable: true,\n                  retries: 0,\n                },\n              },\n              color: {\n                value: particleColor || \"#ffffff\",\n                animation: {\n                  h: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  s: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  l: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                },\n              },\n              effect: {\n                close: true,\n                fill: true,\n                options: {},\n                type: {} as SingleOrMultiple<string> | undefined,\n              },\n              groups: {},\n              move: {\n                angle: {\n                  offset: 0,\n                  value: 90,\n                },\n                attract: {\n                  distance: 200,\n                  enable: false,\n                  rotate: {\n                    x: 3000,\n                    y: 3000,\n                  },\n                },\n                center: {\n                  x: 50,\n                  y: 50,\n                  mode: \"percent\",\n                  radius: 0,\n                },\n                decay: 0,\n                distance: {},\n                direction: \"none\",\n                drift: 0,\n                enable: true,\n                gravity: {\n                  acceleration: 9.81,\n                  enable: false,\n                  inverse: false,\n                  maxSpeed: 50,\n                },\n                path: {\n                  clamp: true,\n                  delay: {\n                    value: 0,\n                  },\n                  enable: false,\n                  options: {},\n                },\n                outModes: {\n                  default: \"out\",\n                },\n                random: false,\n                size: false,\n                speed: {\n                  min: 0.1,\n                  max: 1,\n                },\n                spin: {\n                  acceleration: 0,\n                  enable: false,\n                },\n                straight: false,\n                trail: {\n                  enable: false,\n                  length: 10,\n                  fill: {},\n                },\n                vibrate: false,\n                warp: false,\n              },\n              number: {\n                density: {\n                  enable: true,\n                  width: 400,\n                  height: 400,\n                },\n                limit: {\n                  mode: \"delete\",\n                  value: 0,\n                },\n                value: particleDensity || 120,\n              },\n              opacity: {\n                value: {\n                  min: 0.1,\n                  max: 1,\n                },\n                animation: {\n                  count: 0,\n                  enable: true,\n                  speed: speed || 4,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              reduceDuplicates: false,\n              shadow: {\n                blur: 0,\n                color: {\n                  value: \"#000\",\n                },\n                enable: false,\n                offset: {\n                  x: 0,\n                  y: 0,\n                },\n              },\n              shape: {\n                close: true,\n                fill: true,\n                options: {},\n                type: \"circle\",\n              },\n              size: {\n                value: {\n                  min: minSize || 1,\n                  max: maxSize || 3,\n                },\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 5,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              stroke: {\n                width: 0,\n              },\n              zIndex: {\n                value: 0,\n                opacityRate: 1,\n                sizeRate: 1,\n                velocityRate: 1,\n              },\n              destroy: {\n                bounds: {},\n                mode: \"none\",\n                split: {\n                  count: 1,\n                  factor: {\n                    value: 3,\n                  },\n                  rate: {\n                    value: {\n                      min: 4,\n                      max: 9,\n                    },\n                  },\n                  sizeOffset: true,\n                },\n              },\n              roll: {\n                darken: {\n                  enable: false,\n                  value: 0,\n                },\n                enable: false,\n                enlighten: {\n                  enable: false,\n                  value: 0,\n                },\n                mode: \"vertical\",\n                speed: 25,\n              },\n              tilt: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                enable: false,\n              },\n              twinkle: {\n                lines: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n                particles: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n              },\n              wobble: {\n                distance: 5,\n                enable: false,\n                speed: {\n                  angle: 50,\n                  move: 10,\n                },\n              },\n              life: {\n                count: 0,\n                delay: {\n                  value: 0,\n                  sync: false,\n                },\n                duration: {\n                  value: 0,\n                  sync: false,\n                },\n              },\n              rotate: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                path: false,\n              },\n              orbit: {\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 1,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                },\n                enable: false,\n                opacity: 1,\n                rotation: {\n                  value: 45,\n                },\n                width: 1,\n              },\n              links: {\n                blink: false,\n                color: {\n                  value: \"#fff\",\n                },\n                consent: false,\n                distance: 100,\n                enable: false,\n                frequency: 1,\n                opacity: 1,\n                shadow: {\n                  blur: 5,\n                  color: {\n                    value: \"#000\",\n                  },\n                  enable: false,\n                },\n                triangles: {\n                  enable: false,\n                  frequency: 1,\n                },\n                width: 1,\n                warp: false,\n              },\n              repulse: {\n                value: 0,\n                enabled: false,\n                distance: 1,\n                duration: 1,\n                factor: 1,\n                speed: 1,\n              },\n            },\n            detectRetina: true,\n          }}\n        />\n      )}\n    </motion.div>\n  );\n};\n\n```","type":"visual effect"}
{"source":"aceternity ui","name":"spotlight-new","prompt":"Generate an Aceternity UI component that creates a bidirectional animated spotlight effect using motion gradients with React and Tailwind.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\n\ntype SpotlightProps = {\n  gradientFirst?: string;\n  gradientSecond?: string;\n  gradientThird?: string;\n  translateY?: number;\n  width?: number;\n  height?: number;\n  smallWidth?: number;\n  duration?: number;\n  xOffset?: number;\n};\n\nexport const Spotlight = ({\n  gradientFirst = \"radial-gradient(68.54% 68.72% at 55.02% 31.46%, hsla(210, 100%, 85%, .08) 0, hsla(210, 100%, 55%, .02) 50%, hsla(210, 100%, 45%, 0) 80%)\",\n  gradientSecond = \"radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .06) 0, hsla(210, 100%, 55%, .02) 80%, transparent 100%)\",\n  gradientThird = \"radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .04) 0, hsla(210, 100%, 45%, .02) 80%, transparent 100%)\",\n  translateY = -350,\n  width = 560,\n  height = 1380,\n  smallWidth = 240,\n  duration = 7,\n  xOffset = 100,\n}: SpotlightProps = {}) => {\n  return (\n    <motion.div\n      initial={{\n        opacity: 0,\n      }}\n      animate={{\n        opacity: 1,\n      }}\n      transition={{\n        duration: 1.5,\n      }}\n      className=\"pointer-events-none absolute inset-0 h-full w-full\"\n    >\n      <motion.div\n        animate={{\n          x: [0, xOffset, 0],\n        }}\n        transition={{\n          duration,\n          repeat: Infinity,\n          repeatType: \"reverse\",\n          ease: \"easeInOut\",\n        }}\n        className=\"absolute top-0 left-0 w-screen h-screen z-40 pointer-events-none\"\n      >\n        <div\n          style={{\n            transform: `translateY(${translateY}px) rotate(-45deg)`,\n            background: gradientFirst,\n            width: `${width}px`,\n            height: `${height}px`,\n          }}\n          className={`absolute top-0 left-0`}\n        />\n\n        <div\n          style={{\n            transform: \"rotate(-45deg) translate(5%, -50%)\",\n            background: gradientSecond,\n            width: `${smallWidth}px`,\n            height: `${height}px`,\n          }}\n          className={`absolute top-0 left-0 origin-top-left`}\n        />\n\n        <div\n          style={{\n            transform: \"rotate(-45deg) translate(-180%, -70%)\",\n            background: gradientThird,\n            width: `${smallWidth}px`,\n            height: `${height}px`,\n          }}\n          className={`absolute top-0 left-0 origin-top-left`}\n        />\n      </motion.div>\n\n      <motion.div\n        animate={{\n          x: [0, -xOffset, 0],\n        }}\n        transition={{\n          duration,\n          repeat: Infinity,\n          repeatType: \"reverse\",\n          ease: \"easeInOut\",\n        }}\n        className=\"absolute top-0 right-0 w-screen h-screen z-40 pointer-events-none\"\n      >\n        <div\n          style={{\n            transform: `translateY(${translateY}px) rotate(45deg)`,\n            background: gradientFirst,\n            width: `${width}px`,\n            height: `${height}px`,\n          }}\n          className={`absolute top-0 right-0`}\n        />\n\n        <div\n          style={{\n            transform: \"rotate(45deg) translate(-5%, -50%)\",\n            background: gradientSecond,\n            width: `${smallWidth}px`,\n            height: `${height}px`,\n          }}\n          className={`absolute top-0 right-0 origin-top-right`}\n        />\n\n        <div\n          style={{\n            transform: \"rotate(45deg) translate(180%, -70%)\",\n            background: gradientThird,\n            width: `${smallWidth}px`,\n            height: `${height}px`,\n          }}\n          className={`absolute top-0 right-0 origin-top-right`}\n        />\n      </motion.div>\n    </motion.div>\n  );\n};\n\n```","type":"visual effect"}
{"source":"aceternity ui","name":"spotlight","prompt":"Generate an Aceternity UI component for a spotlight SVG overlay with blur effect using Tailwind and React.","completion":"```jsx\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ntype SpotlightProps = {\n  className?: string;\n  fill?: string;\n};\n\nexport const Spotlight = ({ className, fill }: SpotlightProps) => {\n  return (\n    <svg\n      className={cn(\n        \"animate-spotlight pointer-events-none absolute z-[1]  h-[169%] w-[138%] lg:w-[84%] opacity-0\",\n        className\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 3787 2842\"\n      fill=\"none\"\n    >\n      <g filter=\"url(#filter)\">\n        <ellipse\n          cx=\"1924.71\"\n          cy=\"273.501\"\n          rx=\"1924.71\"\n          ry=\"273.501\"\n          transform=\"matrix(-0.822377 -0.568943 -0.568943 0.822377 3631.88 2291.09)\"\n          fill={fill || \"white\"}\n          fillOpacity=\"0.21\"\n        ></ellipse>\n      </g>\n      <defs>\n        <filter\n          id=\"filter\"\n          x=\"0.860352\"\n          y=\"0.838989\"\n          width=\"3785.16\"\n          height=\"2840.26\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"></feFlood>\n          <feBlend\n            mode=\"normal\"\n            in=\"SourceGraphic\"\n            in2=\"BackgroundImageFix\"\n            result=\"shape\"\n          ></feBlend>\n          <feGaussianBlur\n            stdDeviation=\"151\"\n            result=\"effect1_foregroundBlur_1065_8\"\n          ></feGaussianBlur>\n        </filter>\n      </defs>\n    </svg>\n  );\n};\n\n```","type":"visual-effect"}
{"source":"aceternity ui","name":"sticky-scroll-reveal","prompt":"Generate an Aceternity UI component for a sticky scrolling interface that highlights changing text content with a dynamic gradient preview using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useMotionValueEvent, useScroll } from \"motion/react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const StickyScroll = ({\n  content,\n  contentClassName,\n}: {\n  content: {\n    title: string;\n    description: string;\n    content?: React.ReactNode | any;\n  }[];\n  contentClassName?: string;\n}) => {\n  const [activeCard, setActiveCard] = React.useState(0);\n  const ref = useRef<any>(null);\n  const { scrollYProgress } = useScroll({\n    // uncomment line 22 and comment line 23 if you DONT want the overflow container and want to have it change on the entire page scroll\n    // target: ref\n    container: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n  const cardLength = content.length;\n\n  useMotionValueEvent(scrollYProgress, \"change\", (latest) => {\n    const cardsBreakpoints = content.map((_, index) => index / cardLength);\n    const closestBreakpointIndex = cardsBreakpoints.reduce(\n      (acc, breakpoint, index) => {\n        const distance = Math.abs(latest - breakpoint);\n        if (distance < Math.abs(latest - cardsBreakpoints[acc])) {\n          return index;\n        }\n        return acc;\n      },\n      0,\n    );\n    setActiveCard(closestBreakpointIndex);\n  });\n\n  const backgroundColors = [\n    \"#0f172a\", // slate-900\n    \"#000000\", // black\n    \"#171717\", // neutral-900\n  ];\n  const linearGradients = [\n    \"linear-gradient(to bottom right, #06b6d4, #10b981)\", // cyan-500 to emerald-500\n    \"linear-gradient(to bottom right, #ec4899, #6366f1)\", // pink-500 to indigo-500\n    \"linear-gradient(to bottom right, #f97316, #eab308)\", // orange-500 to yellow-500\n  ];\n\n  const [backgroundGradient, setBackgroundGradient] = useState(\n    linearGradients[0],\n  );\n\n  useEffect(() => {\n    setBackgroundGradient(linearGradients[activeCard % linearGradients.length]);\n  }, [activeCard]);\n\n  return (\n    <motion.div\n      animate={{\n        backgroundColor: backgroundColors[activeCard % backgroundColors.length],\n      }}\n      className=\"relative flex h-[30rem] justify-center space-x-10 overflow-y-auto rounded-md p-10\"\n      ref={ref}\n    >\n      <div className=\"div relative flex items-start px-4\">\n        <div className=\"max-w-2xl\">\n          {content.map((item, index) => (\n            <div key={item.title + index} className=\"my-20\">\n              <motion.h2\n                initial={{\n                  opacity: 0,\n                }}\n                animate={{\n                  opacity: activeCard === index ? 1 : 0.3,\n                }}\n                className=\"text-2xl font-bold text-slate-100\"\n              >\n                {item.title}\n              </motion.h2>\n              <motion.p\n                initial={{\n                  opacity: 0,\n                }}\n                animate={{\n                  opacity: activeCard === index ? 1 : 0.3,\n                }}\n                className=\"text-kg mt-10 max-w-sm text-slate-300\"\n              >\n                {item.description}\n              </motion.p>\n            </div>\n          ))}\n          <div className=\"h-40\" />\n        </div>\n      </div>\n      <div\n        style={{ background: backgroundGradient }}\n        className={cn(\n          \"sticky top-10 hidden h-60 w-80 overflow-hidden rounded-md bg-white lg:block\",\n          contentClassName,\n        )}\n      >\n        {content[activeCard].content ?? null}\n      </div>\n    </motion.div>\n  );\n};\n\n```","type":"scroll animation"}
{"source":"aceternity ui","name":"svg-mask-container","prompt":"Generate an Aceternity UI component that reveals text using a dynamic mask effect following the cursor, built with Tailwind and React.","completion":"```jsx\n\"use client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const MaskContainer = ({\n  children,\n  revealText,\n  size = 10,\n  revealSize = 600,\n  className,\n}: {\n  children?: string | React.ReactNode;\n  revealText?: string | React.ReactNode;\n  size?: number;\n  revealSize?: number;\n  className?: string;\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null });\n  const containerRef = useRef<any>(null);\n  const updateMousePosition = (e: any) => {\n    const rect = containerRef.current.getBoundingClientRect();\n    setMousePosition({ x: e.clientX - rect.left, y: e.clientY - rect.top });\n  };\n\n  useEffect(() => {\n    containerRef.current.addEventListener(\"mousemove\", updateMousePosition);\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.removeEventListener(\n          \"mousemove\",\n          updateMousePosition,\n        );\n      }\n    };\n  }, []);\n  let maskSize = isHovered ? revealSize : size;\n\n  return (\n    <motion.div\n      ref={containerRef}\n      className={cn(\"relative h-screen\", className)}\n      animate={{\n        backgroundColor: isHovered ? \"var(--slate-900)\" : \"var(--white)\",\n      }}\n      transition={{\n        backgroundColor: { duration: 0.3 },\n      }}\n    >\n      <motion.div\n        className=\"absolute flex h-full w-full items-center justify-center bg-black text-6xl [mask-image:url(/mask.svg)] [mask-repeat:no-repeat] [mask-size:40px] dark:bg-white\"\n        animate={{\n          maskPosition: `${mousePosition.x - maskSize / 2}px ${\n            mousePosition.y - maskSize / 2\n          }px`,\n          maskSize: `${maskSize}px`,\n        }}\n        transition={{\n          maskSize: { duration: 0.3, ease: \"easeInOut\" },\n          maskPosition: { duration: 0.15, ease: \"linear\" },\n        }}\n      >\n        <div className=\"absolute inset-0 z-0 h-full w-full bg-black opacity-50 dark:bg-white\" />\n        <div\n          onMouseEnter={() => {\n            setIsHovered(true);\n          }}\n          onMouseLeave={() => {\n            setIsHovered(false);\n          }}\n          className=\"relative z-20 mx-auto max-w-4xl text-center text-4xl font-bold\"\n        >\n          {children}\n        </div>\n      </motion.div>\n\n      <div className=\"flex h-full w-full items-center justify-center\">\n        {revealText}\n      </div>\n    </motion.div>\n  );\n};\n\n```","type":"visual effect"}
{"source":"aceternity ui","name":"animated-tabs","prompt":"Generate an Aceternity UI component for an animated tab switcher with motion effects and stacked tab transitions using Tailwind and React.","completion":"```jsx\n\"use client\";\n\nimport { useState } from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Tab = {\n  title: string;\n  value: string;\n  content?: string | React.ReactNode | any;\n};\n\nexport const Tabs = ({\n  tabs: propTabs,\n  containerClassName,\n  activeTabClassName,\n  tabClassName,\n  contentClassName,\n}: {\n  tabs: Tab[];\n  containerClassName?: string;\n  activeTabClassName?: string;\n  tabClassName?: string;\n  contentClassName?: string;\n}) => {\n  const [active, setActive] = useState<Tab>(propTabs[0]);\n  const [tabs, setTabs] = useState<Tab[]>(propTabs);\n\n  const moveSelectedTabToTop = (idx: number) => {\n    const newTabs = [...propTabs];\n    const selectedTab = newTabs.splice(idx, 1);\n    newTabs.unshift(selectedTab[0]);\n    setTabs(newTabs);\n    setActive(newTabs[0]);\n  };\n\n  const [hovering, setHovering] = useState(false);\n\n  return (\n    <>\n      <div\n        className={cn(\n          \"flex flex-row items-center justify-start [perspective:1000px] relative overflow-auto sm:overflow-visible no-visible-scrollbar max-w-full w-full\",\n          containerClassName\n        )}\n      >\n        {propTabs.map((tab, idx) => (\n          <button\n            key={tab.title}\n            onClick={() => {\n              moveSelectedTabToTop(idx);\n            }}\n            onMouseEnter={() => setHovering(true)}\n            onMouseLeave={() => setHovering(false)}\n            className={cn(\"relative px-4 py-2 rounded-full\", tabClassName)}\n            style={{\n              transformStyle: \"preserve-3d\",\n            }}\n          >\n            {active.value === tab.value && (\n              <motion.div\n                layoutId=\"clickedbutton\"\n                transition={{ type: \"spring\", bounce: 0.3, duration: 0.6 }}\n                className={cn(\n                  \"absolute inset-0 bg-gray-200 dark:bg-zinc-800 rounded-full \",\n                  activeTabClassName\n                )}\n              />\n            )}\n\n            <span className=\"relative block text-black dark:text-white\">\n              {tab.title}\n            </span>\n          </button>\n        ))}\n      </div>\n      <FadeInDiv\n        tabs={tabs}\n        active={active}\n        key={active.value}\n        hovering={hovering}\n        className={cn(\"mt-32\", contentClassName)}\n      />\n    </>\n  );\n};\n\nexport const FadeInDiv = ({\n  className,\n  tabs,\n  hovering,\n}: {\n  className?: string;\n  key?: string;\n  tabs: Tab[];\n  active: Tab;\n  hovering?: boolean;\n}) => {\n  const isActive = (tab: Tab) => {\n    return tab.value === tabs[0].value;\n  };\n  return (\n    <div className=\"relative w-full h-full\">\n      {tabs.map((tab, idx) => (\n        <motion.div\n          key={tab.value}\n          layoutId={tab.value}\n          style={{\n            scale: 1 - idx * 0.1,\n            top: hovering ? idx * -50 : 0,\n            zIndex: -idx,\n            opacity: idx < 3 ? 1 - idx * 0.1 : 0,\n          }}\n          animate={{\n            y: isActive(tab) ? [0, 40, 0] : 0,\n          }}\n          className={cn(\"w-full h-full absolute top-0 left-0\", className)}\n        >\n          {tab.content}\n        </motion.div>\n      ))}\n    </div>\n  );\n};\n\n```","type":"navigation"}
{"source":"aceternity ui","name":"text-generate-effect","prompt":"Generate an Aceternity UI component that animates the appearance of words with a blur and fade-in effect using Tailwind and React motion.","completion":"```jsx\n\"use client\";\nimport { useEffect } from \"react\";\nimport { motion, stagger, useAnimate } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const TextGenerateEffect = ({\n  words,\n  className,\n  filter = true,\n  duration = 0.5,\n}: {\n  words: string;\n  className?: string;\n  filter?: boolean;\n  duration?: number;\n}) => {\n  const [scope, animate] = useAnimate();\n  let wordsArray = words.split(\" \");\n  useEffect(() => {\n    animate(\n      \"span\",\n      {\n        opacity: 1,\n        filter: filter ? \"blur(0px)\" : \"none\",\n      },\n      {\n        duration: duration ? duration : 1,\n        delay: stagger(0.2),\n      }\n    );\n  }, [scope.current]);\n\n  const renderWords = () => {\n    return (\n      <motion.div ref={scope}>\n        {wordsArray.map((word, idx) => {\n          return (\n            <motion.span\n              key={word + idx}\n              className=\"dark:text-white text-black opacity-0\"\n              style={{\n                filter: filter ? \"blur(10px)\" : \"none\",\n              }}\n            >\n              {word}{\" \"}\n            </motion.span>\n          );\n        })}\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className={cn(\"font-bold\", className)}>\n      <div className=\"mt-4\">\n        <div className=\" dark:text-white text-black text-2xl leading-snug tracking-wide\">\n          {renderWords()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n```","type":"text-animation"}
{"source":"aceternity ui","name":"text-reveal-card","prompt":"Generate an Aceternity UI component that reveals animated gradient text on mouse hover, along with floating stars, using Tailwind and React motion.","completion":"```jsx\n\"use client\";\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport { motion } from \"motion/react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { cn } from \"@/lib/utils\";\n\nexport const TextRevealCard = ({\n  text,\n  revealText,\n  children,\n  className,\n}: {\n  text: string;\n  revealText: string;\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  const [widthPercentage, setWidthPercentage] = useState(0);\n  const cardRef = useRef<HTMLDivElement | any>(null);\n  const [left, setLeft] = useState(0);\n  const [localWidth, setLocalWidth] = useState(0);\n  const [isMouseOver, setIsMouseOver] = useState(false);\n\n  useEffect(() => {\n    if (cardRef.current) {\n      const { left, width: localWidth } =\n        cardRef.current.getBoundingClientRect();\n      setLeft(left);\n      setLocalWidth(localWidth);\n    }\n  }, []);\n\n  function mouseMoveHandler(event: any) {\n    event.preventDefault();\n\n    const { clientX } = event;\n    if (cardRef.current) {\n      const relativeX = clientX - left;\n      setWidthPercentage((relativeX / localWidth) * 100);\n    }\n  }\n\n  function mouseLeaveHandler() {\n    setIsMouseOver(false);\n    setWidthPercentage(0);\n  }\n  function mouseEnterHandler() {\n    setIsMouseOver(true);\n  }\n  function touchMoveHandler(event: React.TouchEvent<HTMLDivElement>) {\n    event.preventDefault();\n    const clientX = event.touches[0]!.clientX;\n    if (cardRef.current) {\n      const relativeX = clientX - left;\n      setWidthPercentage((relativeX / localWidth) * 100);\n    }\n  }\n\n  const rotateDeg = (widthPercentage - 50) * 0.1;\n  return (\n    <div\n      onMouseEnter={mouseEnterHandler}\n      onMouseLeave={mouseLeaveHandler}\n      onMouseMove={mouseMoveHandler}\n      onTouchStart={mouseEnterHandler}\n      onTouchEnd={mouseLeaveHandler}\n      onTouchMove={touchMoveHandler}\n      ref={cardRef}\n      className={cn(\n        \"bg-[#1d1c20] border border-white/[0.08] w-[40rem] rounded-lg p-8 relative overflow-hidden\",\n        className\n      )}\n    >\n      {children}\n\n      <div className=\"h-40  relative flex items-center overflow-hidden\">\n        <motion.div\n          style={{\n            width: \"100%\",\n          }}\n          animate={\n            isMouseOver\n              ? {\n                  opacity: widthPercentage > 0 ? 1 : 0,\n                  clipPath: `inset(0 ${100 - widthPercentage}% 0 0)`,\n                }\n              : {\n                  clipPath: `inset(0 ${100 - widthPercentage}% 0 0)`,\n                }\n          }\n          transition={isMouseOver ? { duration: 0 } : { duration: 0.4 }}\n          className=\"absolute bg-[#1d1c20] z-20  will-change-transform\"\n        >\n          <p\n            style={{\n              textShadow: \"4px 4px 15px rgba(0,0,0,0.5)\",\n            }}\n            className=\"text-base sm:text-[3rem] py-10 font-bold text-white bg-clip-text text-transparent bg-gradient-to-b from-white to-neutral-300\"\n          >\n            {revealText}\n          </p>\n        </motion.div>\n        <motion.div\n          animate={{\n            left: `${widthPercentage}%`,\n            rotate: `${rotateDeg}deg`,\n            opacity: widthPercentage > 0 ? 1 : 0,\n          }}\n          transition={isMouseOver ? { duration: 0 } : { duration: 0.4 }}\n          className=\"h-40 w-[8px] bg-gradient-to-b from-transparent via-neutral-800 to-transparent absolute z-50 will-change-transform\"\n        ></motion.div>\n\n        <div className=\" overflow-hidden [mask-image:linear-gradient(to_bottom,transparent,white,transparent)]\">\n          <p className=\"text-base sm:text-[3rem] py-10 font-bold bg-clip-text text-transparent bg-[#323238]\">\n            {text}\n          </p>\n          <MemoizedStars />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const TextRevealCardTitle = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <h2 className={twMerge(\"text-white text-lg mb-2\", className)}>\n      {children}\n    </h2>\n  );\n};\n\nexport const TextRevealCardDescription = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <p className={twMerge(\"text-[#a9a9a9] text-sm\", className)}>{children}</p>\n  );\n};\n\nconst Stars = () => {\n  const randomMove = () => Math.random() * 4 - 2;\n  const randomOpacity = () => Math.random();\n  const random = () => Math.random();\n  return (\n    <div className=\"absolute inset-0\">\n      {[...Array(80)].map((_, i) => (\n        <motion.span\n          key={`star-${i}`}\n          animate={{\n            top: `calc(${random() * 100}% + ${randomMove()}px)`,\n            left: `calc(${random() * 100}% + ${randomMove()}px)`,\n            opacity: randomOpacity(),\n            scale: [1, 1.2, 0],\n          }}\n          transition={{\n            duration: random() * 10 + 20,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n          style={{\n            position: \"absolute\",\n            top: `${random() * 100}%`,\n            left: `${random() * 100}%`,\n            width: `2px`,\n            height: `2px`,\n            backgroundColor: \"white\",\n            borderRadius: \"50%\",\n            zIndex: 1,\n          }}\n          className=\"inline-block\"\n        ></motion.span>\n      ))}\n    </div>\n  );\n};\n\nexport const MemoizedStars = memo(Stars);\n\n```","type":"text-animation"}
{"source":"aceternity ui","name":"typewriter-effect","prompt":"Generate an Aceternity UI component for a typewriter text animation with optional smooth and staggered variants using Tailwind and React motion.","completion":"```jsx\n\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, stagger, useAnimate, useInView } from \"motion/react\";\nimport { useEffect } from \"react\";\n\nexport const TypewriterEffect = ({\n  words,\n  className,\n  cursorClassName,\n}: {\n  words: {\n    text: string;\n    className?: string;\n  }[];\n  className?: string;\n  cursorClassName?: string;\n}) => {\n  // split text inside of words into array of characters\n  const wordsArray = words.map((word) => {\n    return {\n      ...word,\n      text: word.text.split(\"\"),\n    };\n  });\n\n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n  useEffect(() => {\n    if (isInView) {\n      animate(\n        \"span\",\n        {\n          display: \"inline-block\",\n          opacity: 1,\n          width: \"fit-content\",\n        },\n        {\n          duration: 0.3,\n          delay: stagger(0.1),\n          ease: \"easeInOut\",\n        }\n      );\n    }\n  }, [isInView]);\n\n  const renderWords = () => {\n    return (\n      <motion.div ref={scope} className=\"inline\">\n        {wordsArray.map((word, idx) => {\n          return (\n            <div key={`word-${idx}`} className=\"inline-block\">\n              {word.text.map((char, index) => (\n                <motion.span\n                  initial={{}}\n                  key={`char-${index}`}\n                  className={cn(\n                    `dark:text-white text-black opacity-0 hidden`,\n                    word.className\n                  )}\n                >\n                  {char}\n                </motion.span>\n              ))}\n              &nbsp;\n            </div>\n          );\n        })}\n      </motion.div>\n    );\n  };\n  return (\n    <div\n      className={cn(\n        \"text-base sm:text-xl md:text-3xl lg:text-5xl font-bold text-center\",\n        className\n      )}\n    >\n      {renderWords()}\n      <motion.span\n        initial={{\n          opacity: 0,\n        }}\n        animate={{\n          opacity: 1,\n        }}\n        transition={{\n          duration: 0.8,\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        }}\n        className={cn(\n          \"inline-block rounded-sm w-[4px] h-4 md:h-6 lg:h-10 bg-blue-500\",\n          cursorClassName\n        )}\n      ></motion.span>\n    </div>\n  );\n};\n\nexport const TypewriterEffectSmooth = ({\n  words,\n  className,\n  cursorClassName,\n}: {\n  words: {\n    text: string;\n    className?: string;\n  }[];\n  className?: string;\n  cursorClassName?: string;\n}) => {\n  // split text inside of words into array of characters\n  const wordsArray = words.map((word) => {\n    return {\n      ...word,\n      text: word.text.split(\"\"),\n    };\n  });\n  const renderWords = () => {\n    return (\n      <div>\n        {wordsArray.map((word, idx) => {\n          return (\n            <div key={`word-${idx}`} className=\"inline-block\">\n              {word.text.map((char, index) => (\n                <span\n                  key={`char-${index}`}\n                  className={cn(`dark:text-white text-black `, word.className)}\n                >\n                  {char}\n                </span>\n              ))}\n              &nbsp;\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn(\"flex space-x-1 my-6\", className)}>\n      <motion.div\n        className=\"overflow-hidden pb-2\"\n        initial={{\n          width: \"0%\",\n        }}\n        whileInView={{\n          width: \"fit-content\",\n        }}\n        transition={{\n          duration: 2,\n          ease: \"linear\",\n          delay: 1,\n        }}\n      >\n        <div\n          className=\"text-xs sm:text-base md:text-xl lg:text:3xl xl:text-5xl font-bold\"\n          style={{\n            whiteSpace: \"nowrap\",\n          }}\n        >\n          {renderWords()}{\" \"}\n        </div>{\" \"}\n      </motion.div>\n      <motion.span\n        initial={{\n          opacity: 0,\n        }}\n        animate={{\n          opacity: 1,\n        }}\n        transition={{\n          duration: 0.8,\n\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        }}\n        className={cn(\n          \"block rounded-sm w-[4px]  h-4 sm:h-6 xl:h-12 bg-blue-500\",\n          cursorClassName\n        )}\n      ></motion.span>\n    </div>\n  );\n};\n\n```","type":"text-animation"}
{"source":"aceternity ui","name":"vortex","prompt":"Generate an Aceternity UI component that renders a customizable vortex particle animation background using canvas, simplex-noise, and Tailwind CSS.","completion":"```jsx\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useRef } from \"react\";\nimport { createNoise3D } from \"simplex-noise\";\nimport { motion } from \"motion/react\";\n\ninterface VortexProps {\n  children?: any;\n  className?: string;\n  containerClassName?: string;\n  particleCount?: number;\n  rangeY?: number;\n  baseHue?: number;\n  baseSpeed?: number;\n  rangeSpeed?: number;\n  baseRadius?: number;\n  rangeRadius?: number;\n  backgroundColor?: string;\n}\n\nexport const Vortex = (props: VortexProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef(null);\n  const particleCount = props.particleCount || 700;\n  const particlePropCount = 9;\n  const particlePropsLength = particleCount * particlePropCount;\n  const rangeY = props.rangeY || 100;\n  const baseTTL = 50;\n  const rangeTTL = 150;\n  const baseSpeed = props.baseSpeed || 0.0;\n  const rangeSpeed = props.rangeSpeed || 1.5;\n  const baseRadius = props.baseRadius || 1;\n  const rangeRadius = props.rangeRadius || 2;\n  const baseHue = props.baseHue || 220;\n  const rangeHue = 100;\n  const noiseSteps = 3;\n  const xOff = 0.00125;\n  const yOff = 0.00125;\n  const zOff = 0.0005;\n  const backgroundColor = props.backgroundColor || \"#000000\";\n  let tick = 0;\n  const noise3D = createNoise3D();\n  let particleProps = new Float32Array(particlePropsLength);\n  let center: [number, number] = [0, 0];\n\n  const HALF_PI: number = 0.5 * Math.PI;\n  const TAU: number = 2 * Math.PI;\n  const TO_RAD: number = Math.PI / 180;\n  const rand = (n: number): number => n * Math.random();\n  const randRange = (n: number): number => n - rand(2 * n);\n  const fadeInOut = (t: number, m: number): number => {\n    let hm = 0.5 * m;\n    return Math.abs(((t + hm) % m) - hm) / hm;\n  };\n  const lerp = (n1: number, n2: number, speed: number): number =>\n    (1 - speed) * n1 + speed * n2;\n\n  const setup = () => {\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    if (canvas && container) {\n      const ctx = canvas.getContext(\"2d\");\n\n      if (ctx) {\n        resize(canvas, ctx);\n        initParticles();\n        draw(canvas, ctx);\n      }\n    }\n  };\n\n  const initParticles = () => {\n    tick = 0;\n    // simplex = new SimplexNoise();\n    particleProps = new Float32Array(particlePropsLength);\n\n    for (let i = 0; i < particlePropsLength; i += particlePropCount) {\n      initParticle(i);\n    }\n  };\n\n  const initParticle = (i: number) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    let x, y, vx, vy, life, ttl, speed, radius, hue;\n\n    x = rand(canvas.width);\n    y = center[1] + randRange(rangeY);\n    vx = 0;\n    vy = 0;\n    life = 0;\n    ttl = baseTTL + rand(rangeTTL);\n    speed = baseSpeed + rand(rangeSpeed);\n    radius = baseRadius + rand(rangeRadius);\n    hue = baseHue + rand(rangeHue);\n\n    particleProps.set([x, y, vx, vy, life, ttl, speed, radius, hue], i);\n  };\n\n  const draw = (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) => {\n    tick++;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    drawParticles(ctx);\n    renderGlow(canvas, ctx);\n    renderToScreen(canvas, ctx);\n\n    window.requestAnimationFrame(() => draw(canvas, ctx));\n  };\n\n  const drawParticles = (ctx: CanvasRenderingContext2D) => {\n    for (let i = 0; i < particlePropsLength; i += particlePropCount) {\n      updateParticle(i, ctx);\n    }\n  };\n\n  const updateParticle = (i: number, ctx: CanvasRenderingContext2D) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    let i2 = 1 + i,\n      i3 = 2 + i,\n      i4 = 3 + i,\n      i5 = 4 + i,\n      i6 = 5 + i,\n      i7 = 6 + i,\n      i8 = 7 + i,\n      i9 = 8 + i;\n    let n, x, y, vx, vy, life, ttl, speed, x2, y2, radius, hue;\n\n    x = particleProps[i];\n    y = particleProps[i2];\n    n = noise3D(x * xOff, y * yOff, tick * zOff) * noiseSteps * TAU;\n    vx = lerp(particleProps[i3], Math.cos(n), 0.5);\n    vy = lerp(particleProps[i4], Math.sin(n), 0.5);\n    life = particleProps[i5];\n    ttl = particleProps[i6];\n    speed = particleProps[i7];\n    x2 = x + vx * speed;\n    y2 = y + vy * speed;\n    radius = particleProps[i8];\n    hue = particleProps[i9];\n\n    drawParticle(x, y, x2, y2, life, ttl, radius, hue, ctx);\n\n    life++;\n\n    particleProps[i] = x2;\n    particleProps[i2] = y2;\n    particleProps[i3] = vx;\n    particleProps[i4] = vy;\n    particleProps[i5] = life;\n\n    (checkBounds(x, y, canvas) || life > ttl) && initParticle(i);\n  };\n\n  const drawParticle = (\n    x: number,\n    y: number,\n    x2: number,\n    y2: number,\n    life: number,\n    ttl: number,\n    radius: number,\n    hue: number,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    ctx.save();\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = radius;\n    ctx.strokeStyle = `hsla(${hue},100%,60%,${fadeInOut(life, ttl)})`;\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.closePath();\n    ctx.restore();\n  };\n\n  const checkBounds = (x: number, y: number, canvas: HTMLCanvasElement) => {\n    return x > canvas.width || x < 0 || y > canvas.height || y < 0;\n  };\n\n  const resize = (\n    canvas: HTMLCanvasElement,\n    ctx?: CanvasRenderingContext2D\n  ) => {\n    const { innerWidth, innerHeight } = window;\n\n    canvas.width = innerWidth;\n    canvas.height = innerHeight;\n\n    center[0] = 0.5 * canvas.width;\n    center[1] = 0.5 * canvas.height;\n  };\n\n  const renderGlow = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    ctx.save();\n    ctx.filter = \"blur(8px) brightness(200%)\";\n    ctx.globalCompositeOperation = \"lighter\";\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n\n    ctx.save();\n    ctx.filter = \"blur(4px) brightness(200%)\";\n    ctx.globalCompositeOperation = \"lighter\";\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n  };\n\n  const renderToScreen = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    ctx.save();\n    ctx.globalCompositeOperation = \"lighter\";\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n  };\n\n  useEffect(() => {\n    setup();\n    window.addEventListener(\"resize\", () => {\n      const canvas = canvasRef.current;\n      const ctx = canvas?.getContext(\"2d\");\n      if (canvas && ctx) {\n        resize(canvas, ctx);\n      }\n    });\n  }, []);\n\n  return (\n    <div className={cn(\"relative h-full w-full\", props.containerClassName)}>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        ref={containerRef}\n        className=\"absolute h-full w-full inset-0 z-0 bg-transparent flex items-center justify-center\"\n      >\n        <canvas ref={canvasRef}></canvas>\n      </motion.div>\n\n      <div className={cn(\"relative z-10\", props.className)}>\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\n```","type":"visual-effect"}
{"source":"aceternity ui","name":"wavy-background","prompt":"Generate an Aceternity UI component that creates a dynamic wavy background animation using canvas, simplex-noise, and Tailwind CSS.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { createNoise3D } from \"simplex-noise\";\n\nexport const WavyBackground = ({\n  children,\n  className,\n  containerClassName,\n  colors,\n  waveWidth,\n  backgroundFill,\n  blur = 10,\n  speed = \"fast\",\n  waveOpacity = 0.5,\n  ...props\n}: {\n  children?: any;\n  className?: string;\n  containerClassName?: string;\n  colors?: string[];\n  waveWidth?: number;\n  backgroundFill?: string;\n  blur?: number;\n  speed?: \"slow\" | \"fast\";\n  waveOpacity?: number;\n  [key: string]: any;\n}) => {\n  const noise = createNoise3D();\n  let w: number,\n    h: number,\n    nt: number,\n    i: number,\n    x: number,\n    ctx: any,\n    canvas: any;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const getSpeed = () => {\n    switch (speed) {\n      case \"slow\":\n        return 0.001;\n      case \"fast\":\n        return 0.002;\n      default:\n        return 0.001;\n    }\n  };\n\n  const init = () => {\n    canvas = canvasRef.current;\n    ctx = canvas.getContext(\"2d\");\n    w = ctx.canvas.width = window.innerWidth;\n    h = ctx.canvas.height = window.innerHeight;\n    ctx.filter = `blur(${blur}px)`;\n    nt = 0;\n    window.onresize = function () {\n      w = ctx.canvas.width = window.innerWidth;\n      h = ctx.canvas.height = window.innerHeight;\n      ctx.filter = `blur(${blur}px)`;\n    };\n    render();\n  };\n\n  const waveColors = colors ?? [\n    \"#38bdf8\",\n    \"#818cf8\",\n    \"#c084fc\",\n    \"#e879f9\",\n    \"#22d3ee\",\n  ];\n  const drawWave = (n: number) => {\n    nt += getSpeed();\n    for (i = 0; i < n; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = waveWidth || 50;\n      ctx.strokeStyle = waveColors[i % waveColors.length];\n      for (x = 0; x < w; x += 5) {\n        var y = noise(x / 800, 0.3 * i, nt) * 100;\n        ctx.lineTo(x, y + h * 0.5); // adjust for height, currently at 50% of the container\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n  };\n\n  let animationId: number;\n  const render = () => {\n    ctx.fillStyle = backgroundFill || \"black\";\n    ctx.globalAlpha = waveOpacity || 0.5;\n    ctx.fillRect(0, 0, w, h);\n    drawWave(5);\n    animationId = requestAnimationFrame(render);\n  };\n\n  useEffect(() => {\n    init();\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, []);\n\n  const [isSafari, setIsSafari] = useState(false);\n  useEffect(() => {\n    // I'm sorry but i have got to support it on safari.\n    setIsSafari(\n      typeof window !== \"undefined\" &&\n        navigator.userAgent.includes(\"Safari\") &&\n        !navigator.userAgent.includes(\"Chrome\")\n    );\n  }, []);\n\n  return (\n    <div\n      className={cn(\n        \"h-screen flex flex-col items-center justify-center\",\n        containerClassName\n      )}\n    >\n      <canvas\n        className=\"absolute inset-0 z-0\"\n        ref={canvasRef}\n        id=\"canvas\"\n        style={{\n          ...(isSafari ? { filter: `blur(${blur}px)` } : {}),\n        }}\n      ></canvas>\n      <div className={cn(\"relative z-10\", className)} {...props}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\n```","type":"visual-effect"}
{"source":"aceternity ui","name":"wobble-card","prompt":"Generate an Aceternity UI component for a 3D wobble card effect that responds to mouse movement using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React, { useState } from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const WobbleCard = ({\n  children,\n  containerClassName,\n  className,\n}: {\n  children: React.ReactNode;\n  containerClassName?: string;\n  className?: string;\n}) => {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n\n  const handleMouseMove = (event: React.MouseEvent<HTMLElement>) => {\n    const { clientX, clientY } = event;\n    const rect = event.currentTarget.getBoundingClientRect();\n    const x = (clientX - (rect.left + rect.width / 2)) / 20;\n    const y = (clientY - (rect.top + rect.height / 2)) / 20;\n    setMousePosition({ x, y });\n  };\n  return (\n    <motion.section\n      onMouseMove={handleMouseMove}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => {\n        setIsHovering(false);\n        setMousePosition({ x: 0, y: 0 });\n      }}\n      style={{\n        transform: isHovering\n          ? `translate3d(${mousePosition.x}px, ${mousePosition.y}px, 0) scale3d(1, 1, 1)`\n          : \"translate3d(0px, 0px, 0) scale3d(1, 1, 1)\",\n        transition: \"transform 0.1s ease-out\",\n      }}\n      className={cn(\n        \"mx-auto w-full bg-indigo-800  relative rounded-2xl overflow-hidden\",\n        containerClassName\n      )}\n    >\n      <div\n        className=\"relative  h-full [background-image:radial-gradient(88%_100%_at_top,rgba(255,255,255,0.5),rgba(255,255,255,0))]  sm:mx-0 sm:rounded-2xl overflow-hidden\"\n        style={{\n          boxShadow:\n            \"0 10px 32px rgba(34, 42, 53, 0.12), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.05), 0 4px 6px rgba(34, 42, 53, 0.08), 0 24px 108px rgba(47, 48, 55, 0.10)\",\n        }}\n      >\n        <motion.div\n          style={{\n            transform: isHovering\n              ? `translate3d(${-mousePosition.x}px, ${-mousePosition.y}px, 0) scale3d(1.03, 1.03, 1)`\n              : \"translate3d(0px, 0px, 0) scale3d(1, 1, 1)\",\n            transition: \"transform 0.1s ease-out\",\n          }}\n          className={cn(\"h-full px-4 py-20 sm:px-10\", className)}\n        >\n          <Noise />\n          {children}\n        </motion.div>\n      </div>\n    </motion.section>\n  );\n};\n\nconst Noise = () => {\n  return (\n    <div\n      className=\"absolute inset-0 w-full h-full scale-[1.2] transform opacity-10 [mask-image:radial-gradient(#fff,transparent,75%)]\"\n      style={{\n        backgroundImage: \"url(/noise.webp)\",\n        backgroundSize: \"30%\",\n      }}\n    ></div>\n  );\n};\n\n```","type":"animation"}
{"source":"aceternity ui","name":"hover-border-gradient","prompt":"Generate an Aceternity UI component for a button with an animated gradient border that cycles on hover using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Direction = \"TOP\" | \"LEFT\" | \"BOTTOM\" | \"RIGHT\";\n\nexport function HoverBorderGradient({\n  children,\n  containerClassName,\n  className,\n  as: Tag = \"button\",\n  duration = 1,\n  clockwise = true,\n  ...props\n}: React.PropsWithChildren<\n  {\n    as?: React.ElementType;\n    containerClassName?: string;\n    className?: string;\n    duration?: number;\n    clockwise?: boolean;\n  } & React.HTMLAttributes<HTMLElement>\n>) {\n  const [hovered, setHovered] = useState<boolean>(false);\n  const [direction, setDirection] = useState<Direction>(\"TOP\");\n\n  const rotateDirection = (currentDirection: Direction): Direction => {\n    const directions: Direction[] = [\"TOP\", \"LEFT\", \"BOTTOM\", \"RIGHT\"];\n    const currentIndex = directions.indexOf(currentDirection);\n    const nextIndex = clockwise\n      ? (currentIndex - 1 + directions.length) % directions.length\n      : (currentIndex + 1) % directions.length;\n    return directions[nextIndex];\n  };\n\n  const movingMap: Record<Direction, string> = {\n    TOP: \"radial-gradient(20.7% 50% at 50% 0%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n    LEFT: \"radial-gradient(16.6% 43.1% at 0% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n    BOTTOM:\n      \"radial-gradient(20.7% 50% at 50% 100%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n    RIGHT:\n      \"radial-gradient(16.2% 41.199999999999996% at 100% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n  };\n\n  const highlight =\n    \"radial-gradient(75% 181.15942028985506% at 50% 50%, #3275F8 0%, rgba(255, 255, 255, 0) 100%)\";\n\n  useEffect(() => {\n    if (!hovered) {\n      const interval = setInterval(() => {\n        setDirection((prevState) => rotateDirection(prevState));\n      }, duration * 1000);\n      return () => clearInterval(interval);\n    }\n  }, [hovered]);\n  return (\n    <Tag\n      onMouseEnter={(event: React.MouseEvent<HTMLDivElement>) => {\n        setHovered(true);\n      }}\n      onMouseLeave={() => setHovered(false)}\n      className={cn(\n        \"relative flex rounded-full border  content-center bg-black/20 hover:bg-black/10 transition duration-500 dark:bg-white/20 items-center flex-col flex-nowrap gap-10 h-min justify-center overflow-visible p-px decoration-clone w-fit\",\n        containerClassName\n      )}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"w-auto text-white z-10 bg-black px-4 py-2 rounded-[inherit]\",\n          className\n        )}\n      >\n        {children}\n      </div>\n      <motion.div\n        className={cn(\n          \"flex-none inset-0 overflow-hidden absolute z-0 rounded-[inherit]\"\n        )}\n        style={{\n          filter: \"blur(2px)\",\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n        }}\n        initial={{ background: movingMap[direction] }}\n        animate={{\n          background: hovered\n            ? [movingMap[direction], highlight]\n            : movingMap[direction],\n        }}\n        transition={{ ease: \"linear\", duration: duration ?? 1 }}\n      />\n      <div className=\"bg-black absolute z-1 flex-none inset-[2px] rounded-[100px]\" />\n    </Tag>\n  );\n}\n\n```","type":"animation"}
{"source":"aceternity ui","name":"multi-step-loader","prompt":"Generate an Aceternity UI component for a multi-step loader animation with progress icons and step-wise transition effects using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useState, useEffect } from \"react\";\n\nconst CheckIcon = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={1.5}\n      stroke=\"currentColor\"\n      className={cn(\"w-6 h-6 \", className)}\n    >\n      <path d=\"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" />\n    </svg>\n  );\n};\n\nconst CheckFilled = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      className={cn(\"w-6 h-6 \", className)}\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\ntype LoadingState = {\n  text: string;\n};\n\nconst LoaderCore = ({\n  loadingStates,\n  value = 0,\n}: {\n  loadingStates: LoadingState[];\n  value?: number;\n}) => {\n  return (\n    <div className=\"flex relative justify-start max-w-xl mx-auto flex-col mt-40\">\n      {loadingStates.map((loadingState, index) => {\n        const distance = Math.abs(index - value);\n        const opacity = Math.max(1 - distance * 0.2, 0); // Minimum opacity is 0, keep it 0.2 if you're sane.\n\n        return (\n          <motion.div\n            key={index}\n            className={cn(\"text-left flex gap-2 mb-4\")}\n            initial={{ opacity: 0, y: -(value * 40) }}\n            animate={{ opacity: opacity, y: -(value * 40) }}\n            transition={{ duration: 0.5 }}\n          >\n            <div>\n              {index > value && (\n                <CheckIcon className=\"text-black dark:text-white\" />\n              )}\n              {index <= value && (\n                <CheckFilled\n                  className={cn(\n                    \"text-black dark:text-white\",\n                    value === index &&\n                      \"text-black dark:text-lime-500 opacity-100\"\n                  )}\n                />\n              )}\n            </div>\n            <span\n              className={cn(\n                \"text-black dark:text-white\",\n                value === index && \"text-black dark:text-lime-500 opacity-100\"\n              )}\n            >\n              {loadingState.text}\n            </span>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const MultiStepLoader = ({\n  loadingStates,\n  loading,\n  duration = 2000,\n  loop = true,\n}: {\n  loadingStates: LoadingState[];\n  loading?: boolean;\n  duration?: number;\n  loop?: boolean;\n}) => {\n  const [currentState, setCurrentState] = useState(0);\n\n  useEffect(() => {\n    if (!loading) {\n      setCurrentState(0);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      setCurrentState((prevState) =>\n        loop\n          ? prevState === loadingStates.length - 1\n            ? 0\n            : prevState + 1\n          : Math.min(prevState + 1, loadingStates.length - 1)\n      );\n    }, duration);\n\n    return () => clearTimeout(timeout);\n  }, [currentState, loading, loop, loadingStates.length, duration]);\n  return (\n    <AnimatePresence mode=\"wait\">\n      {loading && (\n        <motion.div\n          initial={{\n            opacity: 0,\n          }}\n          animate={{\n            opacity: 1,\n          }}\n          exit={{\n            opacity: 0,\n          }}\n          className=\"w-full h-full fixed inset-0 z-[100] flex items-center justify-center backdrop-blur-2xl\"\n        >\n          <div className=\"h-96  relative\">\n            <LoaderCore value={currentState} loadingStates={loadingStates} />\n          </div>\n\n          <div className=\"bg-gradient-to-t inset-x-0 z-20 bottom-0 bg-white dark:bg-black h-full absolute [mask-image:radial-gradient(900px_at_center,transparent_30%,white)]\" />\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\n```","type":"loader"}
{"source":"aceternity ui","name":"3D-animated-pin","prompt":"Generate an Aceternity UI component for a 3D-styled interactive card with animated perspective hover effects using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React, { useState } from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\n\nexport const PinContainer = ({\n  children,\n  title,\n  href,\n  className,\n  containerClassName,\n}: {\n  children: React.ReactNode;\n  title?: string;\n  href?: string;\n  className?: string;\n  containerClassName?: string;\n}) => {\n  const [transform, setTransform] = useState(\n    \"translate(-50%,-50%) rotateX(0deg)\"\n  );\n\n  const onMouseEnter = () => {\n    setTransform(\"translate(-50%,-50%) rotateX(40deg) scale(0.8)\");\n  };\n  const onMouseLeave = () => {\n    setTransform(\"translate(-50%,-50%) rotateX(0deg) scale(1)\");\n  };\n\n  return (\n    <a\n      className={cn(\n        \"relative group/pin z-50  cursor-pointer\",\n        containerClassName\n      )}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      href={href || \"/\"}\n    >\n      <div\n        style={{\n          perspective: \"1000px\",\n          transform: \"rotateX(70deg) translateZ(0deg)\",\n        }}\n        className=\"absolute left-1/2 top-1/2 ml-[0.09375rem] mt-4 -translate-x-1/2 -translate-y-1/2\"\n      >\n        <div\n          style={{\n            transform: transform,\n          }}\n          className=\"absolute left-1/2 p-4 top-1/2  flex justify-start items-start  rounded-2xl  shadow-[0_8px_16px_rgb(0_0_0/0.4)] bg-black border border-white/[0.1] group-hover/pin:border-white/[0.2] transition duration-700 overflow-hidden\"\n        >\n          <div className={cn(\" relative z-50 \", className)}>{children}</div>\n        </div>\n      </div>\n      <PinPerspective title={title} href={href} />\n    </a>\n  );\n};\n\nexport const PinPerspective = ({\n  title,\n  href,\n}: {\n  title?: string;\n  href?: string;\n}) => {\n  return (\n    <motion.div className=\"pointer-events-none  w-96 h-80 flex items-center justify-center opacity-0 group-hover/pin:opacity-100 z-[60] transition duration-500\">\n      <div className=\" w-full h-full -mt-7 flex-none  inset-0\">\n        <div className=\"absolute top-0 inset-x-0  flex justify-center\">\n          <a\n            href={href}\n            target={\"_blank\"}\n            className=\"relative flex space-x-2 items-center z-10 rounded-full bg-zinc-950 py-0.5 px-4 ring-1 ring-white/10 \"\n          >\n            <span className=\"relative z-20 text-white text-xs font-bold inline-block py-0.5\">\n              {title}\n            </span>\n\n            <span className=\"absolute -bottom-0 left-[1.125rem] h-px w-[calc(100%-2.25rem)] bg-gradient-to-r from-emerald-400/0 via-emerald-400/90 to-emerald-400/0 transition-opacity duration-500 group-hover/btn:opacity-40\"></span>\n          </a>\n        </div>\n\n        <div\n          style={{\n            perspective: \"1000px\",\n            transform: \"rotateX(70deg) translateZ(0)\",\n          }}\n          className=\"absolute left-1/2 top-1/2 ml-[0.09375rem] mt-4 -translate-x-1/2 -translate-y-1/2\"\n        >\n          <>\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0,\n                x: \"-50%\",\n                y: \"-50%\",\n              }}\n              animate={{\n                opacity: [0, 1, 0.5, 0],\n                scale: 1,\n\n                z: 0,\n              }}\n              transition={{\n                duration: 6,\n                repeat: Infinity,\n                delay: 0,\n              }}\n              className=\"absolute left-1/2 top-1/2  h-[11.25rem] w-[11.25rem] rounded-[50%] bg-sky-500/[0.08] shadow-[0_8px_16px_rgb(0_0_0/0.4)]\"\n            ></motion.div>\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0,\n                x: \"-50%\",\n                y: \"-50%\",\n              }}\n              animate={{\n                opacity: [0, 1, 0.5, 0],\n                scale: 1,\n\n                z: 0,\n              }}\n              transition={{\n                duration: 6,\n                repeat: Infinity,\n                delay: 2,\n              }}\n              className=\"absolute left-1/2 top-1/2  h-[11.25rem] w-[11.25rem] rounded-[50%] bg-sky-500/[0.08] shadow-[0_8px_16px_rgb(0_0_0/0.4)]\"\n            ></motion.div>\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0,\n                x: \"-50%\",\n                y: \"-50%\",\n              }}\n              animate={{\n                opacity: [0, 1, 0.5, 0],\n                scale: 1,\n\n                z: 0,\n              }}\n              transition={{\n                duration: 6,\n                repeat: Infinity,\n                delay: 4,\n              }}\n              className=\"absolute left-1/2 top-1/2  h-[11.25rem] w-[11.25rem] rounded-[50%] bg-sky-500/[0.08] shadow-[0_8px_16px_rgb(0_0_0/0.4)]\"\n            ></motion.div>\n          </>\n        </div>\n\n        <>\n          <motion.div className=\"absolute right-1/2 bottom-1/2 bg-gradient-to-b from-transparent to-cyan-500 translate-y-[14px] w-px h-20 group-hover/pin:h-40 blur-[2px]\" />\n          <motion.div className=\"absolute right-1/2 bottom-1/2 bg-gradient-to-b from-transparent to-cyan-500 translate-y-[14px] w-px h-20 group-hover/pin:h-40  \" />\n          <motion.div className=\"absolute right-1/2 translate-x-[1.5px] bottom-1/2 bg-cyan-600 translate-y-[14px] w-[4px] h-[4px] rounded-full z-40 blur-[3px]\" />\n          <motion.div className=\"absolute right-1/2 translate-x-[0.5px] bottom-1/2 bg-cyan-300 translate-y-[14px] w-[2px] h-[2px] rounded-full z-40 \" />\n        </>\n      </div>\n    </motion.div>\n  );\n};\n\n```","type":"card"}
{"source":"aceternity ui","name":"background-boxes","prompt":"Generate an Aceternity UI component that renders a grid of animated interactive boxes using Tailwind, motion, and React.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const BoxesCore = ({ className, ...rest }: { className?: string }) => {\n  const rows = new Array(150).fill(1);\n  const cols = new Array(100).fill(1);\n  let colors = [\n    \"#93c5fd\",\n    \"#f9a8d4\",\n    \"#86efac\",\n    \"#fde047\",\n    \"#fca5a5\",\n    \"#d8b4fe\",\n    \"#93c5fd\",\n    \"#a5b4fc\",\n    \"#c4b5fd\",\n  ];\n  const getRandomColor = () => {\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  return (\n    <div\n      style={{\n        transform: `translate(-40%,-60%) skewX(-48deg) skewY(14deg) scale(0.675) rotate(0deg) translateZ(0)`,\n      }}\n      className={cn(\n        \"absolute -top-1/4 left-1/4 z-0 flex h-full w-full -translate-x-1/2 -translate-y-1/2 p-4\",\n        className,\n      )}\n      {...rest}\n    >\n      {rows.map((_, i) => (\n        <motion.div\n          key={`row` + i}\n          className=\"relative h-8 w-16 border-l border-slate-700\"\n        >\n          {cols.map((_, j) => (\n            <motion.div\n              whileHover={{\n                backgroundColor: `${getRandomColor()}`,\n                transition: { duration: 0 },\n              }}\n              animate={{\n                transition: { duration: 2 },\n              }}\n              key={`col` + j}\n              className=\"relative h-8 w-16 border-t border-r border-slate-700\"\n            >\n              {j % 2 === 0 && i % 2 === 0 ? (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth=\"1.5\"\n                  stroke=\"currentColor\"\n                  className=\"pointer-events-none absolute -top-[14px] -left-[22px] h-6 w-10 stroke-[1px] text-slate-700\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M12 6v12m6-6H6\"\n                  />\n                </svg>\n              ) : null}\n            </motion.div>\n          ))}\n        </motion.div>\n      ))}\n    </div>\n  );\n};\n\nexport const Boxes = React.memo(BoxesCore);\n\n```","type":"visual"}
{"source":"aceternity ui","name": "Animated-Background-Gradient","prompt": "Generate an Aceternity UI component for a multicolor animated background gradient wrapper using radial gradients, Tailwind, React, and motion. The animation should be smooth and loop infinitely.","completion": "```jsximport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\n\nexport const BackgroundGradient = ({\n  children,\n  className,\n  containerClassName,\n  animate = true,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n  containerClassName?: string;\n  animate?: boolean;\n}) => {\n  const variants = {\n    initial: {\n      backgroundPosition: \"0 50%\",\n    },\n    animate: {\n      backgroundPosition: [\"0, 50%\", \"100% 50%\", \"0 50%\"],\n    },\n  };\n  return (\n    <div className={cn(\"relative p-[4px] group\", containerClassName)}>\n      <motion.div\n        variants={animate ? variants : undefined}\n        initial={animate ? \"initial\" : undefined}\n        animate={animate ? \"animate\" : undefined}\n        transition={\n          animate\n            ? {\n                duration: 5,\n                repeat: Infinity,\n                repeatType: \"reverse\",\n              }\n            : undefined\n        }\n        style={{\n          backgroundSize: animate ? \"400% 400%\" : undefined,\n        }}\n        className={cn(\n          \"absolute inset-0 rounded-3xl z-[1] opacity-60 group-hover:opacity-100 blur-xl  transition duration-500 will-change-transform\",\n          \" bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]\"\n        )}\n      />\n      <motion.div\n        variants={animate ? variants : undefined}\n        initial={animate ? \"initial\" : undefined}\n        animate={animate ? \"animate\" : undefined}\n        transition={\n          animate\n            ? {\n                duration: 5,\n                repeat: Infinity,\n                repeatType: \"reverse\",\n              }\n            : undefined\n        }\n        style={{\n          backgroundSize: animate ? \"400% 400%\" : undefined,\n        }}\n        className={cn(\n          \"absolute inset-0 rounded-3xl z-[1] will-change-transform\",\n          \"bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]\"\n        )}\n      />\n\n      <div className={cn(\"relative z-10\", className)}>{children}</div>\n    </div>\n  );\n};\n```","type": "component:background"}
{"source":"aceternity ui","name":"card-hover-effect","prompt":"Generate an Aceternity UI component that displays a hoverable grid of cards with animated background effects using Tailwind and React.","completion":"```jsx\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"motion/react\";\n\nimport { useState } from \"react\";\n\nexport const HoverEffect = ({\n  items,\n  className,\n}: {\n  items: {\n    title: string;\n    description: string;\n    link: string;\n  }[];\n  className?: string;\n}) => {\n  let [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  return (\n    <div\n      className={cn(\n        \"grid grid-cols-1 md:grid-cols-2  lg:grid-cols-3  py-10\",\n        className\n      )}\n    >\n      {items.map((item, idx) => (\n        <a\n          href={item?.link}\n          key={item?.link}\n          className=\"relative group  block p-2 h-full w-full\"\n          onMouseEnter={() => setHoveredIndex(idx)}\n          onMouseLeave={() => setHoveredIndex(null)}\n        >\n          <AnimatePresence>\n            {hoveredIndex === idx && (\n              <motion.span\n                className=\"absolute inset-0 h-full w-full bg-neutral-200 dark:bg-slate-800/[0.8] block  rounded-3xl\"\n                layoutId=\"hoverBackground\"\n                initial={{ opacity: 0 }}\n                animate={{\n                  opacity: 1,\n                  transition: { duration: 0.15 },\n                }}\n                exit={{\n                  opacity: 0,\n                  transition: { duration: 0.15, delay: 0.2 },\n                }}\n              />\n            )}\n          </AnimatePresence>\n          <Card>\n            <CardTitle>{item.title}</CardTitle>\n            <CardDescription>{item.description}</CardDescription>\n          </Card>\n        </a>\n      ))}\n    </div>\n  );\n};\n\nexport const Card = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children: React.ReactNode;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"rounded-2xl h-full w-full p-4 overflow-hidden bg-black border border-transparent dark:border-white/[0.2] group-hover:border-slate-700 relative z-20\",\n        className\n      )}\n    >\n      <div className=\"relative z-50\">\n        <div className=\"p-4\">{children}</div>\n      </div>\n    </div>\n  );\n};\nexport const CardTitle = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children: React.ReactNode;\n}) => {\n  return (\n    <h4 className={cn(\"text-zinc-100 font-bold tracking-wide mt-4\", className)}>\n      {children}\n    </h4>\n  );\n};\nexport const CardDescription = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children: React.ReactNode;\n}) => {\n  return (\n    <p\n      className={cn(\n        \"mt-8 text-zinc-400 tracking-wide leading-relaxed text-sm\",\n        className\n      )}\n    >\n      {children}\n    </p>\n  );\n};\n\n```","type":"interactive"}
{"source":"aceternity ui","name":"direction-aware-hover","prompt":"Generate an Aceternity UI component that shows directional hover effects on images using Tailwind and React.","completion":"```jsx\n\"use client\";\n\nimport { useRef, useState } from \"react\";\n\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const DirectionAwareHover = ({\n  imageUrl,\n  children,\n  childrenClassName,\n  imageClassName,\n  className,\n}: {\n  imageUrl: string;\n  children: React.ReactNode | string;\n  childrenClassName?: string;\n  imageClassName?: string;\n  className?: string;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [direction, setDirection] = useState<\n    \"top\" | \"bottom\" | \"left\" | \"right\" | string\n  >(\"left\");\n\n  const handleMouseEnter = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    if (!ref.current) return;\n\n    const direction = getDirection(event, ref.current);\n    console.log(\"direction\", direction);\n    switch (direction) {\n      case 0:\n        setDirection(\"top\");\n        break;\n      case 1:\n        setDirection(\"right\");\n        break;\n      case 2:\n        setDirection(\"bottom\");\n        break;\n      case 3:\n        setDirection(\"left\");\n        break;\n      default:\n        setDirection(\"left\");\n        break;\n    }\n  };\n\n  const getDirection = (\n    ev: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    obj: HTMLElement\n  ) => {\n    const { width: w, height: h, left, top } = obj.getBoundingClientRect();\n    const x = ev.clientX - left - (w / 2) * (w > h ? h / w : 1);\n    const y = ev.clientY - top - (h / 2) * (h > w ? w / h : 1);\n    const d = Math.round(Math.atan2(y, x) / 1.57079633 + 5) % 4;\n    return d;\n  };\n\n  return (\n    <motion.div\n      onMouseEnter={handleMouseEnter}\n      ref={ref}\n      className={cn(\n        \"md:h-96 w-60 h-60 md:w-96 bg-transparent rounded-lg overflow-hidden group/card relative\",\n        className\n      )}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          className=\"relative h-full w-full\"\n          initial=\"initial\"\n          whileHover={direction}\n          exit=\"exit\"\n        >\n          <motion.div className=\"group-hover/card:block hidden absolute inset-0 w-full h-full bg-black/40 z-10 transition duration-500\" />\n          <motion.div\n            variants={variants}\n            className=\"h-full w-full relative bg-gray-50 dark:bg-black\"\n            transition={{\n              duration: 0.2,\n              ease: \"easeOut\",\n            }}\n          >\n            <img\n              alt=\"image\"\n              className={cn(\n                \"h-full w-full object-cover scale-[1.15]\",\n                imageClassName\n              )}\n              width=\"1000\"\n              height=\"1000\"\n              src={imageUrl}\n            />\n          </motion.div>\n          <motion.div\n            variants={textVariants}\n            transition={{\n              duration: 0.5,\n              ease: \"easeOut\",\n            }}\n            className={cn(\n              \"text-white absolute bottom-4 left-4 z-40\",\n              childrenClassName\n            )}\n          >\n            {children}\n          </motion.div>\n        </motion.div>\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n\nconst variants = {\n  initial: {\n    x: 0,\n  },\n\n  exit: {\n    x: 0,\n    y: 0,\n  },\n  top: {\n    y: 20,\n  },\n  bottom: {\n    y: -20,\n  },\n  left: {\n    x: 20,\n  },\n  right: {\n    x: -20,\n  },\n};\n\nconst textVariants = {\n  initial: {\n    y: 0,\n    x: 0,\n    opacity: 0,\n  },\n  exit: {\n    y: 0,\n    x: 0,\n    opacity: 0,\n  },\n  top: {\n    y: -20,\n    opacity: 1,\n  },\n  bottom: {\n    y: 2,\n    opacity: 1,\n  },\n  left: {\n    x: -2,\n    opacity: 1,\n  },\n  right: {\n    x: 20,\n    opacity: 1,\n  },\n};\n\n```","type":"interactive"}
{"source":"aceternity ui","name":"floating-navbar","prompt":"Generate an Aceternity UI component for a floating navigation bar that hides on scroll down and appears on scroll up using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React, { useState } from \"react\";\nimport {\n  motion,\n  AnimatePresence,\n  useScroll,\n  useMotionValueEvent,\n} from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\n\nexport const FloatingNav = ({\n  navItems,\n  className,\n}: {\n  navItems: {\n    name: string;\n    link: string;\n    icon?: JSX.Element;\n  }[];\n  className?: string;\n}) => {\n  const { scrollYProgress } = useScroll();\n\n  const [visible, setVisible] = useState(false);\n\n  useMotionValueEvent(scrollYProgress, \"change\", (current) => {\n    // Check if current is not undefined and is a number\n    if (typeof current === \"number\") {\n      let direction = current! - scrollYProgress.getPrevious()!;\n\n      if (scrollYProgress.get() < 0.05) {\n        setVisible(false);\n      } else {\n        if (direction < 0) {\n          setVisible(true);\n        } else {\n          setVisible(false);\n        }\n      }\n    }\n  });\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        initial={{\n          opacity: 1,\n          y: -100,\n        }}\n        animate={{\n          y: visible ? 0 : -100,\n          opacity: visible ? 1 : 0,\n        }}\n        transition={{\n          duration: 0.2,\n        }}\n        className={cn(\n          \"flex max-w-fit  fixed top-10 inset-x-0 mx-auto border border-transparent dark:border-white/[0.2] rounded-full dark:bg-black bg-white shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),0px_1px_0px_0px_rgba(25,28,33,0.02),0px_0px_0px_1px_rgba(25,28,33,0.08)] z-[5000] pr-2 pl-8 py-2  items-center justify-center space-x-4\",\n          className\n        )}\n      >\n        {navItems.map((navItem: any, idx: number) => (\n          <a\n            key={`link=${idx}`}\n            href={navItem.link}\n            className={cn(\n              \"relative dark:text-neutral-50 items-center flex space-x-1 text-neutral-600 dark:hover:text-neutral-300 hover:text-neutral-500\"\n            )}\n          >\n            <span className=\"block sm:hidden\">{navItem.icon}</span>\n            <span className=\"hidden sm:block text-sm\">{navItem.name}</span>\n          </a>\n        ))}\n        <button className=\"border text-sm font-medium relative border-neutral-200 dark:border-white/[0.2] text-black dark:text-white px-4 py-2 rounded-full\">\n          <span>Login</span>\n          <span className=\"absolute inset-x-0 w-1/2 mx-auto -bottom-px bg-gradient-to-r from-transparent via-blue-500 to-transparent  h-px\" />\n        </button>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\n```","type":"navigation"}
{"source":"aceternity ui","name":"follower-pointer-card","prompt":"Generate an Aceternity UI component for a card that displays a custom pointer with tooltip text following the mouse using Tailwind and React.","completion":"```jsximport React, { useEffect, useState } from \"react\";\n\nimport { motion, AnimatePresence, useMotionValue } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const FollowerPointerCard = ({\n  children,\n  className,\n  title,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  title?: string | React.ReactNode;\n}) => {\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const [rect, setRect] = useState<DOMRect | null>(null);\n  const [isInside, setIsInside] = useState<boolean>(false); // Add this line\n\n  useEffect(() => {\n    if (ref.current) {\n      setRect(ref.current.getBoundingClientRect());\n    }\n  }, []);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (rect) {\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      x.set(e.clientX - rect.left + scrollX);\n      y.set(e.clientY - rect.top + scrollY);\n    }\n  };\n  const handleMouseLeave = () => {\n    setIsInside(false);\n  };\n\n  const handleMouseEnter = () => {\n    setIsInside(true);\n  };\n  return (\n    <div\n      onMouseLeave={handleMouseLeave}\n      onMouseEnter={handleMouseEnter}\n      onMouseMove={handleMouseMove}\n      style={{\n        cursor: \"none\",\n      }}\n      ref={ref}\n      className={cn(\"relative\", className)}\n    >\n      <AnimatePresence>\n        {isInside && <FollowPointer x={x} y={y} title={title} />}\n      </AnimatePresence>\n      {children}\n    </div>\n  );\n};\n\nexport const FollowPointer = ({\n  x,\n  y,\n  title,\n}: {\n  x: any;\n  y: any;\n  title?: string | React.ReactNode;\n}) => {\n  const colors = [\n    \"#0ea5e9\",\n    \"#737373\",\n    \"#14b8a6\",\n    \"#22c55e\",\n    \"#3b82f6\",\n    \"#ef4444\",\n    \"#eab308\",\n  ];\n  return (\n    <motion.div\n      className=\"absolute z-50 h-4 w-4 rounded-full\"\n      style={{\n        top: y,\n        left: x,\n        pointerEvents: \"none\",\n      }}\n      initial={{\n        scale: 1,\n        opacity: 1,\n      }}\n      animate={{\n        scale: 1,\n        opacity: 1,\n      }}\n      exit={{\n        scale: 0,\n        opacity: 0,\n      }}\n    >\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        strokeWidth=\"1\"\n        viewBox=\"0 0 16 16\"\n        className=\"h-6 w-6 -translate-x-[12px] -translate-y-[10px] -rotate-[70deg] transform stroke-sky-600 text-sky-500\"\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\"></path>\n      </svg>\n      <motion.div\n        style={{\n          backgroundColor: colors[Math.floor(Math.random() * colors.length)],\n        }}\n        initial={{\n          scale: 0.5,\n          opacity: 0,\n        }}\n        animate={{\n          scale: 1,\n          opacity: 1,\n        }}\n        exit={{\n          scale: 0.5,\n          opacity: 0,\n        }}\n        className={\n          \"min-w-max rounded-full bg-neutral-200 px-2 py-2 text-xs whitespace-nowrap text-white\"\n        }\n      >\n        {title || `William Shakespeare`}\n      </motion.div>\n    </motion.div>\n  );\n};\n\n```","type":"interaction"}
{"source":"aceternity ui","name":"images-slider","prompt":"Generate an Aceternity UI component for a full-page images slider that supports autoplay, keyboard navigation, and animated transitions using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport React, { useEffect, useState } from \"react\";\n\nexport const ImagesSlider = ({\n  images,\n  children,\n  overlay = true,\n  overlayClassName,\n  className,\n  autoplay = true,\n  direction = \"up\",\n}: {\n  images: string[];\n  children: React.ReactNode;\n  overlay?: React.ReactNode;\n  overlayClassName?: string;\n  className?: string;\n  autoplay?: boolean;\n  direction?: \"up\" | \"down\";\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [loadedImages, setLoadedImages] = useState<string[]>([]);\n\n  const handleNext = () => {\n    setCurrentIndex((prevIndex) =>\n      prevIndex + 1 === images.length ? 0 : prevIndex + 1\n    );\n  };\n\n  const handlePrevious = () => {\n    setCurrentIndex((prevIndex) =>\n      prevIndex - 1 < 0 ? images.length - 1 : prevIndex - 1\n    );\n  };\n\n  useEffect(() => {\n    loadImages();\n  }, []);\n\n  const loadImages = () => {\n    setLoading(true);\n    const loadPromises = images.map((image) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = image;\n        img.onload = () => resolve(image);\n        img.onerror = reject;\n      });\n    });\n\n    Promise.all(loadPromises)\n      .then((loadedImages) => {\n        setLoadedImages(loadedImages as string[]);\n        setLoading(false);\n      })\n      .catch((error) => console.error(\"Failed to load images\", error));\n  };\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"ArrowRight\") {\n        handleNext();\n      } else if (event.key === \"ArrowLeft\") {\n        handlePrevious();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n\n    // autoplay\n    let interval: any;\n    if (autoplay) {\n      interval = setInterval(() => {\n        handleNext();\n      }, 5000);\n    }\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      clearInterval(interval);\n    };\n  }, []);\n\n  const slideVariants = {\n    initial: {\n      scale: 0,\n      opacity: 0,\n      rotateX: 45,\n    },\n    visible: {\n      scale: 1,\n      rotateX: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.5,\n        ease: [0.645, 0.045, 0.355, 1.0],\n      },\n    },\n    upExit: {\n      opacity: 1,\n      y: \"-150%\",\n      transition: {\n        duration: 1,\n      },\n    },\n    downExit: {\n      opacity: 1,\n      y: \"150%\",\n      transition: {\n        duration: 1,\n      },\n    },\n  };\n\n  const areImagesLoaded = loadedImages.length > 0;\n\n  return (\n    <div\n      className={cn(\n        \"overflow-hidden h-full w-full relative flex items-center justify-center\",\n        className\n      )}\n      style={{\n        perspective: \"1000px\",\n      }}\n    >\n      {areImagesLoaded && children}\n      {areImagesLoaded && overlay && (\n        <div\n          className={cn(\"absolute inset-0 bg-black/60 z-40\", overlayClassName)}\n        />\n      )}\n\n      {areImagesLoaded && (\n        <AnimatePresence>\n          <motion.img\n            key={currentIndex}\n            src={loadedImages[currentIndex]}\n            initial=\"initial\"\n            animate=\"visible\"\n            exit={direction === \"up\" ? \"upExit\" : \"downExit\"}\n            variants={slideVariants}\n            className=\"image h-full w-full absolute inset-0 object-cover object-center\"\n          />\n        </AnimatePresence>\n      )}\n    </div>\n  );\n};\n\n```","type":"media"}
{"source":"aceternity ui","name":"navbar-menu-card","prompt":"Generate an Aceternity UI component for a menu with hover-activated dropdown cards showing additional content, using Tailwind and React.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\n\n\n\nconst transition = {\n  type: \"spring\",\n  mass: 0.5,\n  damping: 11.5,\n  stiffness: 100,\n  restDelta: 0.001,\n  restSpeed: 0.001,\n};\n\nexport const MenuItem = ({\n  setActive,\n  active,\n  item,\n  children,\n}: {\n  setActive: (item: string) => void;\n  active: string | null;\n  item: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <div onMouseEnter={() => setActive(item)} className=\"relative \">\n      <motion.p\n        transition={{ duration: 0.3 }}\n        className=\"cursor-pointer text-black hover:opacity-[0.9] dark:text-white\"\n      >\n        {item}\n      </motion.p>\n      {active !== null && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.85, y: 10 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          transition={transition}\n        >\n          {active === item && (\n            <div className=\"absolute top-[calc(100%_+_1.2rem)] left-1/2 transform -translate-x-1/2 pt-4\">\n              <motion.div\n                transition={transition}\n                layoutId=\"active\" // layoutId ensures smooth animation\n                className=\"bg-white dark:bg-black backdrop-blur-sm rounded-2xl overflow-hidden border border-black/[0.2] dark:border-white/[0.2] shadow-xl\"\n              >\n                <motion.div\n                  layout // layout ensures smooth animation\n                  className=\"w-max h-full p-4\"\n                >\n                  {children}\n                </motion.div>\n              </motion.div>\n            </div>\n          )}\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport const Menu = ({\n  setActive,\n  children,\n}: {\n  setActive: (item: string | null) => void;\n  children: React.ReactNode;\n}) => {\n  return (\n    <nav\n      onMouseLeave={() => setActive(null)} // resets the state\n      className=\"relative rounded-full border border-transparent dark:bg-black dark:border-white/[0.2] bg-white shadow-input flex justify-center space-x-4 px-8 py-6 \"\n    >\n      {children}\n    </nav>\n  );\n};\n\nexport const ProductItem = ({\n  title,\n  description,\n  href,\n  src,\n}: {\n  title: string;\n  description: string;\n  href: string;\n  src: string;\n}) => {\n  return (\n    <a href={href} className=\"flex space-x-2\">\n      <img\n        src={src}\n        width={140}\n        height={70}\n        alt={title}\n        className=\"shrink-0 rounded-md shadow-2xl\"\n      />\n      <div>\n        <h4 className=\"text-xl font-bold mb-1 text-black dark:text-white\">\n          {title}\n        </h4>\n        <p className=\"text-neutral-700 text-sm max-w-[10rem] dark:text-neutral-300\">\n          {description}\n        </p>\n      </div>\n    </a>\n  );\n};\n\nexport const HoveredLink = ({ children, ...rest }: any) => {\n  return (\n    <a\n      {...rest}\n      className=\"text-neutral-700 dark:text-neutral-200 hover:text-black \"\n    >\n      {children}\n    </a>\n  );\n};\n\n```","type":"navigation"}
{"source":"aceternity ui","name":"tailwindcss-buttons-gallery","prompt":"Generate an Aceternity UI component that displays a gallery of Tailwind CSS styled buttons with copy-to-clipboard functionality and toast feedback, using React and Tailwind.","completion":"```jsx\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\n\n\n\nconst transition = {\n  type: \"spring\",\n  mass: 0.5,\n  damping: 11.5,\n  stiffness: 100,\n  restDelta: 0.001,\n  restSpeed: 0.001,\n};\n\nexport const MenuItem = ({\n  setActive,\n  active,\n  item,\n  children,\n}: {\n  setActive: (item: string) => void;\n  active: string | null;\n  item: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <div onMouseEnter={() => setActive(item)} className=\"relative \">\n      <motion.p\n        transition={{ duration: 0.3 }}\n        className=\"cursor-pointer text-black hover:opacity-[0.9] dark:text-white\"\n      >\n        {item}\n      </motion.p>\n      {active !== null && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.85, y: 10 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          transition={transition}\n        >\n          {active === item && (\n            <div className=\"absolute top-[calc(100%_+_1.2rem)] left-1/2 transform -translate-x-1/2 pt-4\">\n              <motion.div\n                transition={transition}\n                layoutId=\"active\" // layoutId ensures smooth animation\n                className=\"bg-white dark:bg-black backdrop-blur-sm rounded-2xl overflow-hidden border border-black/[0.2] dark:border-white/[0.2] shadow-xl\"\n              >\n                <motion.div\n                  layout // layout ensures smooth animation\n                  className=\"w-max h-full p-4\"\n                >\n                  {children}\n                </motion.div>\n              </motion.div>\n            </div>\n          )}\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport const Menu = ({\n  setActive,\n  children,\n}: {\n  setActive: (item: string | null) => void;\n  children: React.ReactNode;\n}) => {\n  return (\n    <nav\n      onMouseLeave={() => setActive(null)} // resets the state\n      className=\"relative rounded-full border border-transparent dark:bg-black dark:border-white/[0.2] bg-white shadow-input flex justify-center space-x-4 px-8 py-6 \"\n    >\n      {children}\n    </nav>\n  );\n};\n\nexport const ProductItem = ({\n  title,\n  description,\n  href,\n  src,\n}: {\n  title: string;\n  description: string;\n  href: string;\n  src: string;\n}) => {\n  return (\n    <a href={href} className=\"flex space-x-2\">\n      <img\n        src={src}\n        width={140}\n        height={70}\n        alt={title}\n        className=\"shrink-0 rounded-md shadow-2xl\"\n      />\n      <div>\n        <h4 className=\"text-xl font-bold mb-1 text-black dark:text-white\">\n          {title}\n        </h4>\n        <p className=\"text-neutral-700 text-sm max-w-[10rem] dark:text-neutral-300\">\n          {description}\n        </p>\n      </div>\n    </a>\n  );\n};\n\nexport const HoveredLink = ({ children, ...rest }: any) => {\n  return (\n    <a\n      {...rest}\n      className=\"text-neutral-700 dark:text-neutral-200 hover:text-black \"\n    >\n      {children}\n    </a>\n  );\n};\n\"use client\";\nimport React from \"react\";\nimport reactElementToJSXString from \"react-element-to-jsx-string\";\nimport { toast, Toaster } from \"sonner\";\nimport { ButtonsCard } from \"../ui/tailwindcss-buttons\";\n\nexport function TailwindcssButtons() {\n  const copy = (button) => {\n    if (button.code) {\n      copyToClipboard(button.code);\n      return;\n    }\n    let buttonString = reactElementToJSXString(button.component);\n\n    if (buttonString) {\n      const textToCopy = buttonString;\n      copyToClipboard(textToCopy);\n    }\n  };\n\n  const copyToClipboard = (text) => {\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        console.log(\"Text copied to clipboard:\", text);\n        toast.success(\"Copied to clipboard\");\n      })\n      .catch((err) => {\n        console.error(\"Error copying text to clipboard:\", err);\n        toast.error(\"Error copying to clipboard\");\n      });\n  };\n  return (\n    <div className=\"pb-40 px-4 w-full\">\n      <Toaster position=\"top-center\" />\n      <div\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 w-full  max-w-7xl mx-auto gap-10\">\n        {buttons.map((button, idx) => (\n          <ButtonsCard key={idx} onClick={() => copy(button)}>\n            {button.component}\n          </ButtonsCard>\n        ))}\n      </div>\n    </div>\n  );\n}\nexport const buttons = [\n  {\n    name: \"Sketch\",\n    description: \"Sketch button for your website\",\n\n    component: (\n      <button\n        className=\"px-4 py-2 rounded-md border border-black bg-white text-black text-sm hover:shadow-[4px_4px_0px_0px_rgba(0,0,0)] transition duration-200\">\n        Sketch\n      </button>\n    ),\n  },\n  {\n    name: \"Simple\",\n    description: \"Elegant button for your website\",\n    component: (\n      <button\n        className=\"px-4 py-2 rounded-md border border-neutral-300 bg-neutral-100 text-neutral-500 text-sm hover:-translate-y-1 transform transition duration-200 hover:shadow-md\">\n        Simple\n      </button>\n    ),\n  },\n  {\n    name: \"Invert\",\n    description: \"Simple button that inverts on hover\",\n    component: (\n      <button\n        className=\"px-8 py-2 rounded-md bg-teal-500 text-white font-bold transition duration-200 hover:bg-white hover:text-black border-2 border-transparent hover:border-teal-500\">\n        Invert it\n      </button>\n    ),\n  },\n  {\n    name: \"Tailwindcss Connect\",\n    description: \"Button featured on Tailwindcss Connect website\",\n    showDot: false,\n    component: (\n      <button\n        className=\"bg-slate-800 no-underline group cursor-pointer relative shadow-2xl shadow-zinc-900 rounded-full p-px text-xs font-semibold leading-6  text-white inline-block\">\n        <span className=\"absolute inset-0 overflow-hidden rounded-full\">\n          <span\n            className=\"absolute inset-0 rounded-full bg-[image:radial-gradient(75%_100%_at_50%_0%,rgba(56,189,248,0.6)_0%,rgba(56,189,248,0)_75%)] opacity-0 transition-opacity duration-500 group-hover:opacity-100\"></span>\n        </span>\n        <div\n          className=\"relative flex space-x-2 items-center z-10 rounded-full bg-zinc-950 py-0.5 px-4 ring-1 ring-white/10 \">\n          <span>{`Tailwind Connect`}</span>\n          <svg\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"1.5\"\n              d=\"M10.75 8.75L14.25 12L10.75 15.25\"></path>\n          </svg>\n        </div>\n        <span\n          className=\"absolute -bottom-0 left-[1.125rem] h-px w-[calc(100%-2.25rem)] bg-gradient-to-r from-emerald-400/0 via-emerald-400/90 to-emerald-400/0 transition-opacity duration-500 group-hover:opacity-40\"></span>\n      </button>\n    ),\n  },\n  {\n    name: \"Gradient\",\n    description: \"Simple Gradient button with rounded corners\",\n    component: (\n      <button\n        className=\"px-8 py-2 rounded-full bg-gradient-to-b from-blue-500 to-blue-600 text-white focus:ring-2 focus:ring-blue-400 hover:shadow-xl transition duration-200\">\n        Gradient\n      </button>\n    ),\n  },\n  {\n    name: \"Unapologetic\",\n    description: \"Unapologetic button with perfect corners\",\n    component: (\n      <button\n        className=\"px-8 py-2 border border-black bg-transparent text-black  dark:border-white relative group transition duration-200\">\n        <div\n          className=\"absolute -bottom-2 -right-2 bg-yellow-300 h-full w-full -z-10 group-hover:bottom-0 group-hover:right-0 transition-all duration-200\" />\n        <span className=\"relative\">Unapologetic</span>\n      </button>\n    ),\n  },\n  {\n    name: \"Lit up borders\",\n    description: \"Gradient button with perfect corners\",\n    component: (\n      <button className=\"p-[3px] relative\">\n        <div\n          className=\"absolute inset-0 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-lg\" />\n        <div\n          className=\"px-8 py-2  bg-black rounded-[6px]  relative group transition duration-200 text-white hover:bg-transparent\">\n          Lit up borders\n        </div>\n      </button>\n    ),\n  },\n  {\n    name: \"Border Magic\",\n    description: \"Border Magic button for your website\",\n    showDot: false,\n    component: (\n      <button\n        className=\"relative inline-flex h-12 overflow-hidden rounded-full p-[1px] focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50\">\n        <span\n          className=\"absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#E2CBFF_0%,#393BB2_50%,#E2CBFF_100%)]\" />\n        <span\n          className=\"inline-flex h-full w-full cursor-pointer items-center justify-center rounded-full bg-slate-950 px-3 py-1 text-sm font-medium text-white backdrop-blur-3xl\">\n          Border Magic\n        </span>\n      </button>\n    ),\n  },\n\n  {\n    name: \"Brutal\",\n    description: \"Brutal button for your website\",\n    component: (\n      <button\n        className=\"px-8 py-0.5  border-2 border-black dark:border-white uppercase bg-white text-black transition duration-200 text-sm shadow-[1px_1px_rgba(0,0,0),2px_2px_rgba(0,0,0),3px_3px_rgba(0,0,0),4px_4px_rgba(0,0,0),5px_5px_0px_0px_rgba(0,0,0)] dark:shadow-[1px_1px_rgba(255,255,255),2px_2px_rgba(255,255,255),3px_3px_rgba(255,255,255),4px_4px_rgba(255,255,255),5px_5px_0px_0px_rgba(255,255,255)] \">\n        Brutal\n      </button>\n    ),\n  },\n  {\n    name: \"Favourite\",\n    description: \"Favourite button for your website\",\n    component: (\n      <button\n        className=\"px-8 py-2  bg-black text-white text-sm rounded-md font-semibold hover:bg-black/[0.8] hover:shadow-lg\">\n        Favourite\n      </button>\n    ),\n  },\n  {\n    name: \"Outline\",\n    description: \"Outline button for your website\",\n    component: (\n      <button\n        className=\"px-4 py-2 rounded-xl border border-neutral-600 text-black bg-white hover:bg-gray-100 transition duration-200\">\n        Outline\n      </button>\n    ),\n  },\n  {\n    name: \"Shimmer\",\n    description: \"Shimmer button for your website\",\n    showDot: false,\n    component: (\n      <button\n        className=\"inline-flex h-12 animate-shimmer items-center justify-center rounded-md border border-slate-800 bg-[linear-gradient(110deg,#000103,45%,#1e2631,55%,#000103)] bg-[length:200%_100%] px-6 font-medium text-slate-400 transition-colors focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50\">\n        Shimmer\n      </button>\n    ),\n    code: `\n        // Button code\n        <button className=\"inline-flex h-12 animate-shimmer items-center justify-center rounded-md border border-slate-800 bg-[linear-gradient(110deg,#000103,45%,#1e2631,55%,#000103)] bg-[length:200%_100%] px-6 font-medium text-slate-400 transition-colors focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50\">\n          Shimmer\n        </button>\n  \n        // tailwind.config.js code\n        {\n          \"animation\": {\n            shimmer: \"shimmer 2s linear infinite\"\n          },\n          \"keyframes\": {\n            shimmer: {\n              from: {\n                \"backgroundPosition\": \"0 0\"\n              },\n              to: {\n                \"backgroundPosition\": \"-200% 0\"\n              }\n            }\n          }\n        }\n      `,\n  },\n  {\n    name: \"Next.js Blue\",\n    description: \"Next.js Blue button for your website\",\n    component: (\n      <button\n        className=\"shadow-[0_4px_14px_0_rgb(0,118,255,39%)] hover:shadow-[0_6px_20px_rgba(0,118,255,23%)] hover:bg-[rgba(0,118,255,0.9)] px-8 py-2 bg-[#0070f3] rounded-md text-white font-light transition duration-200 ease-linear\">\n        Next.js Blue\n      </button>\n    ),\n  },\n  {\n    name: \"Next.js White\",\n    description: \"Next.js White button for your website\",\n    component: (\n      <button\n        className=\"shadow-[0_4px_14px_0_rgb(0,0,0,10%)] hover:shadow-[0_6px_20px_rgba(93,93,93,23%)] px-8 py-2 bg-[#fff] text-[#696969] rounded-md font-light transition duration-200 ease-linear\">\n        Next White\n      </button>\n    ),\n  },\n  {\n    name: \"Spotify\",\n    description: \"Spotify button for your website\",\n    component: (\n      <button\n        className=\"px-12 py-4 rounded-full bg-[#1ED760] font-bold text-white tracking-widest uppercase transform hover:scale-105 hover:bg-[#21e065] transition-colors duration-200\">\n        Spotify\n      </button>\n    ),\n  },\n  {\n    name: \"Backdrop Blur\",\n    description: \"Outline button for your website\",\n    showDot: false,\n    component: (\n      <button\n        className=\"px-4 py-2 text-black backdrop-blur-sm border border-black rounded-md hover:shadow-[0px_0px_4px_4px_rgba(0,0,0,0.1)] bg-white/[0.2] text-sm transition duration-200\">\n        Backdrop blur\n      </button>\n    ),\n  },\n  {\n    name: \"Playlist\",\n    description: \"Playlist button for your website\",\n    component: (\n      <button\n        className=\"shadow-[inset_0_0_0_2px_#616467] text-black px-12 py-4 rounded-full tracking-widest uppercase font-bold bg-transparent hover:bg-[#616467] hover:text-white dark:text-neutral-200 transition duration-200\">\n        Playlist\n      </button>\n    ),\n  },\n  {\n    name: \"Figma\",\n    description: \"Figma button for your website\",\n    component: (\n      <button\n        className=\"px-6 py-2 bg-black text-white rounded-lg font-bold transform hover:-translate-y-1 transition duration-400\">\n        Figma\n      </button>\n    ),\n  },\n  {\n    name: \"Figma Outline\",\n    description: \"Figma Outline button for your website\",\n    component: (\n      <button\n        className=\"shadow-[0_0_0_3px_#000000_inset] px-6 py-2 bg-transparent border border-black dark:border-white dark:text-white text-black rounded-lg font-bold transform hover:-translate-y-1 transition duration-400\">\n        Figma Outline\n      </button>\n    ),\n  },\n  {\n    name: \"Top Gradient\",\n    description: \"Top Gradient button for your website\",\n    showDot: false,\n    component: (\n      <button\n        className=\"px-8 py-2 rounded-full relative bg-slate-700 text-white text-sm hover:shadow-2xl hover:shadow-white/[0.1] transition duration-200 border border-slate-600\">\n        <div\n          className=\"absolute inset-x-0 h-px w-1/2 mx-auto -top-px shadow-2xl  bg-gradient-to-r from-transparent via-teal-500 to-transparent\" />\n        <span className=\"relative z-20\">Top gradient</span>\n      </button>\n    ),\n  },\n];\n\n```","type":"buttons"}
{"source":"aceternity ui","name":"timeline-scroll-changelog","prompt":"Generate an Aceternity UI component that displays a vertical scroll-based animated changelog timeline using Tailwind and React with motion effects.","completion":"```jsx\n\"use client\";\nimport {\n  useMotionValueEvent,\n  useScroll,\n  useTransform,\n  motion,\n} from \"motion/react\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\ninterface TimelineEntry {\n  title: string;\n  content: React.ReactNode;\n}\n\nexport const Timeline = ({ data }: { data: TimelineEntry[] }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    if (ref.current) {\n      const rect = ref.current.getBoundingClientRect();\n      setHeight(rect.height);\n    }\n  }, [ref]);\n\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n    offset: [\"start 10%\", \"end 50%\"],\n  });\n\n  const heightTransform = useTransform(scrollYProgress, [0, 1], [0, height]);\n  const opacityTransform = useTransform(scrollYProgress, [0, 0.1], [0, 1]);\n\n  return (\n    <div\n      className=\"w-full bg-white dark:bg-neutral-950 font-sans md:px-10\"\n      ref={containerRef}\n    >\n      <div className=\"max-w-7xl mx-auto py-20 px-4 md:px-8 lg:px-10\">\n        <h2 className=\"text-lg md:text-4xl mb-4 text-black dark:text-white max-w-4xl\">\n          Changelog from my journey\n        </h2>\n        <p className=\"text-neutral-700 dark:text-neutral-300 text-sm md:text-base max-w-sm\">\n          I&apos;ve been working on Aceternity for the past 2 years. Here&apos;s\n          a timeline of my journey.\n        </p>\n      </div>\n\n      <div ref={ref} className=\"relative max-w-7xl mx-auto pb-20\">\n        {data.map((item, index) => (\n          <div\n            key={index}\n            className=\"flex justify-start pt-10 md:pt-40 md:gap-10\"\n          >\n            <div className=\"sticky flex flex-col md:flex-row z-40 items-center top-40 self-start max-w-xs lg:max-w-sm md:w-full\">\n              <div className=\"h-10 absolute left-3 md:left-3 w-10 rounded-full bg-white dark:bg-black flex items-center justify-center\">\n                <div className=\"h-4 w-4 rounded-full bg-neutral-200 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-700 p-2\" />\n              </div>\n              <h3 className=\"hidden md:block text-xl md:pl-20 md:text-5xl font-bold text-neutral-500 dark:text-neutral-500 \">\n                {item.title}\n              </h3>\n            </div>\n\n            <div className=\"relative pl-20 pr-4 md:pl-4 w-full\">\n              <h3 className=\"md:hidden block text-2xl mb-4 text-left font-bold text-neutral-500 dark:text-neutral-500\">\n                {item.title}\n              </h3>\n              {item.content}{\" \"}\n            </div>\n          </div>\n        ))}\n        <div\n          style={{\n            height: height + \"px\",\n          }}\n          className=\"absolute md:left-8 left-8 top-0 overflow-hidden w-[2px] bg-[linear-gradient(to_bottom,var(--tw-gradient-stops))] from-transparent from-[0%] via-neutral-200 dark:via-neutral-700 to-transparent to-[99%]  [mask-image:linear-gradient(to_bottom,transparent_0%,black_10%,black_90%,transparent_100%)] \"\n        >\n          <motion.div\n            style={{\n              height: heightTransform,\n              opacity: opacityTransform,\n            }}\n            className=\"absolute inset-x-0 top-0  w-[2px] bg-gradient-to-t from-purple-500 via-blue-500 to-transparent from-[0%] via-[10%] rounded-full\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n```","type":"scroll-animation"}
{"source":"aceternity ui","name":"stars-background","prompt":"Generate an Aceternity UI component that renders a customizable twinkling stars animation background using Canvas and React.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  RefObject,\n  useCallback,\n} from \"react\";\n\ninterface StarProps {\n  x: number;\n  y: number;\n  radius: number;\n  opacity: number;\n  twinkleSpeed: number | null;\n}\n\ninterface StarBackgroundProps {\n  starDensity?: number;\n  allStarsTwinkle?: boolean;\n  twinkleProbability?: number;\n  minTwinkleSpeed?: number;\n  maxTwinkleSpeed?: number;\n  className?: string;\n}\n\nexport const StarsBackground: React.FC<StarBackgroundProps> = ({\n  starDensity = 0.00015,\n  allStarsTwinkle = true,\n  twinkleProbability = 0.7,\n  minTwinkleSpeed = 0.5,\n  maxTwinkleSpeed = 1,\n  className,\n}) => {\n  const [stars, setStars] = useState<StarProps[]>([]);\n  const canvasRef: RefObject<HTMLCanvasElement> =\n    useRef<HTMLCanvasElement>(null);\n\n  const generateStars = useCallback(\n    (width: number, height: number): StarProps[] => {\n      const area = width * height;\n      const numStars = Math.floor(area * starDensity);\n      return Array.from({ length: numStars }, () => {\n        const shouldTwinkle =\n          allStarsTwinkle || Math.random() < twinkleProbability;\n        return {\n          x: Math.random() * width,\n          y: Math.random() * height,\n          radius: Math.random() * 0.05 + 0.5,\n          opacity: Math.random() * 0.5 + 0.5,\n          twinkleSpeed: shouldTwinkle\n            ? minTwinkleSpeed +\n              Math.random() * (maxTwinkleSpeed - minTwinkleSpeed)\n            : null,\n        };\n      });\n    },\n    [\n      starDensity,\n      allStarsTwinkle,\n      twinkleProbability,\n      minTwinkleSpeed,\n      maxTwinkleSpeed,\n    ]\n  );\n\n  useEffect(() => {\n    const updateStars = () => {\n      if (canvasRef.current) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n\n        const { width, height } = canvas.getBoundingClientRect();\n        canvas.width = width;\n        canvas.height = height;\n        setStars(generateStars(width, height));\n      }\n    };\n\n    updateStars();\n\n    const resizeObserver = new ResizeObserver(updateStars);\n    if (canvasRef.current) {\n      resizeObserver.observe(canvasRef.current);\n    }\n\n    return () => {\n      if (canvasRef.current) {\n        resizeObserver.unobserve(canvasRef.current);\n      }\n    };\n  }, [\n    starDensity,\n    allStarsTwinkle,\n    twinkleProbability,\n    minTwinkleSpeed,\n    maxTwinkleSpeed,\n    generateStars,\n  ]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    let animationFrameId: number;\n\n    const render = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      stars.forEach((star) => {\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;\n        ctx.fill();\n\n        if (star.twinkleSpeed !== null) {\n          star.opacity =\n            0.5 +\n            Math.abs(Math.sin((Date.now() * 0.001) / star.twinkleSpeed) * 0.5);\n        }\n      });\n\n      animationFrameId = requestAnimationFrame(render);\n    };\n\n    render();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [stars]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={cn(\"h-full w-full absolute inset-0\", className)}\n    />\n  );\n};\n\n```","type":"visual-effect"}
{"source":"aceternity ui","name":"shooting-stars","prompt":"Generate an Aceternity UI component that renders animated shooting stars using SVG and React with customizable trail and speed.","completion":"```jsx\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useState, useRef } from \"react\";\n\ninterface ShootingStar {\n  id: number;\n  x: number;\n  y: number;\n  angle: number;\n  scale: number;\n  speed: number;\n  distance: number;\n}\n\ninterface ShootingStarsProps {\n  minSpeed?: number;\n  maxSpeed?: number;\n  minDelay?: number;\n  maxDelay?: number;\n  starColor?: string;\n  trailColor?: string;\n  starWidth?: number;\n  starHeight?: number;\n  className?: string;\n}\n\nconst getRandomStartPoint = () => {\n  const side = Math.floor(Math.random() * 4);\n  const offset = Math.random() * window.innerWidth;\n\n  switch (side) {\n    case 0:\n      return { x: offset, y: 0, angle: 45 };\n    case 1:\n      return { x: window.innerWidth, y: offset, angle: 135 };\n    case 2:\n      return { x: offset, y: window.innerHeight, angle: 225 };\n    case 3:\n      return { x: 0, y: offset, angle: 315 };\n    default:\n      return { x: 0, y: 0, angle: 45 };\n  }\n};\nexport const ShootingStars: React.FC<ShootingStarsProps> = ({\n  minSpeed = 10,\n  maxSpeed = 30,\n  minDelay = 1200,\n  maxDelay = 4200,\n  starColor = \"#9E00FF\",\n  trailColor = \"#2EB9DF\",\n  starWidth = 10,\n  starHeight = 1,\n  className,\n}) => {\n  const [star, setStar] = useState<ShootingStar | null>(null);\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  useEffect(() => {\n    const createStar = () => {\n      const { x, y, angle } = getRandomStartPoint();\n      const newStar: ShootingStar = {\n        id: Date.now(),\n        x,\n        y,\n        angle,\n        scale: 1,\n        speed: Math.random() * (maxSpeed - minSpeed) + minSpeed,\n        distance: 0,\n      };\n      setStar(newStar);\n\n      const randomDelay = Math.random() * (maxDelay - minDelay) + minDelay;\n      setTimeout(createStar, randomDelay);\n    };\n\n    createStar();\n\n    return () => {};\n  }, [minSpeed, maxSpeed, minDelay, maxDelay]);\n\n  useEffect(() => {\n    const moveStar = () => {\n      if (star) {\n        setStar((prevStar) => {\n          if (!prevStar) return null;\n          const newX =\n            prevStar.x +\n            prevStar.speed * Math.cos((prevStar.angle * Math.PI) / 180);\n          const newY =\n            prevStar.y +\n            prevStar.speed * Math.sin((prevStar.angle * Math.PI) / 180);\n          const newDistance = prevStar.distance + prevStar.speed;\n          const newScale = 1 + newDistance / 100;\n          if (\n            newX < -20 ||\n            newX > window.innerWidth + 20 ||\n            newY < -20 ||\n            newY > window.innerHeight + 20\n          ) {\n            return null;\n          }\n          return {\n            ...prevStar,\n            x: newX,\n            y: newY,\n            distance: newDistance,\n            scale: newScale,\n          };\n        });\n      }\n    };\n\n    const animationFrame = requestAnimationFrame(moveStar);\n    return () => cancelAnimationFrame(animationFrame);\n  }, [star]);\n\n  return (\n    <svg\n      ref={svgRef}\n      className={cn(\"w-full h-full absolute inset-0\", className)}\n    >\n      {star && (\n        <rect\n          key={star.id}\n          x={star.x}\n          y={star.y}\n          width={starWidth * star.scale}\n          height={starHeight}\n          fill=\"url(#gradient)\"\n          transform={`rotate(${star.angle}, ${\n            star.x + (starWidth * star.scale) / 2\n          }, ${star.y + starHeight / 2})`}\n        />\n      )}\n      <defs>\n        <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" style={{ stopColor: trailColor, stopOpacity: 0 }} />\n          <stop\n            offset=\"100%\"\n            style={{ stopColor: starColor, stopOpacity: 1 }}\n          />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\n\n```","type":"visual-effect"}