{"prompt": "Create a Shadcn button component that opens a specified URL in a new tab.", "completion": "```tsx\nimport { Button } from \"@/components/ui/button\";\nimport { FC } from \"react\";\nimport { cn } from \"@/lib/utils\"; // Ensure this is available in your project\n\nconst prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL\n  ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`\n  : `https://${process.env.NEXT_PUBLIC_SITE_URL}`;\n\ninterface OpenInV0ButtonProps {\n  name: string;\n  className?: string;\n}\n\nexport const OpenInV0Button: FC<OpenInV0ButtonProps & React.ComponentProps<typeof Button>> = ({\n  name,\n  className,\n}) => {\n  return (\n    <Button\n      aria-label=\"Open in v0\"\n      className={cn(\n        \"h-7 gap-1 rounded-lg shadow-none bg-black px-3 text-xs text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-200 transition-colors duration-200 not-prose\",\n        className\n      )}\n      asChild\n    >\n      <a\n        href={`https://v0.dev/chat/api/open?url=${prePath}/r/${name}.json`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className=\"inline-flex items-center\"\n      >\n        Open in{\" \"}\n        <svg\n          viewBox=\"0 0 40 20\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-5 w-5 text-current ml-1\"\n        >\n          <path\n            d=\"M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z\"\n            fill=\"currentColor\"\n          />\n          <path\n            d=\"M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n      </a>\n    </Button>\n  );\n};\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn toast component that displays a notification with a title, description, and close button.", "completion": "```tsx\nimport Link from \"next/link\";\nimport { useEffect } from \"react\";\nimport { toast as sonnerToast } from \"sonner\";\nimport { ArrowRightBroken } from \"./icons/arrow-right-broken\";\n\ninterface ToastProps {\n    id: string | number;\n    title: string;\n    description: string;\n}\n\nconst Toast: React.FC<ToastProps> = ({ title, description, id }) => {\n    return (\n        <Link\n            href=\"https://arca.directory/?utm_source=kokonutui.com&utm_medium=toast\"\n            target=\"_blank\"\n            className=\"block focus:outline-none\"\n            tabIndex={0}\n            aria-label={`${title} - ${description}`}\n        >\n            <div\n                className=\"group flex items-center p-2 rounded-lg bg-zinc-100 dark:bg-zinc-800 border border-black/10 dark:border-white/10 w-full md:max-w-[320px] hover:border-black/20 dark:hover:border-white/20 hover:shadow-md dark:hover:shadow-white animate-slideIn\"\n            >\n                <img\n                    src=\"/arca-directory.svg\"\n                    alt=\"Arca Directory\"\n                    className=\"w-12 h-12 mr-3 flex-shrink-0\"\n                />\n                <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium tracking-tighter text-zinc-900 dark:text-white\">\n                        {title}\n                    </p>\n                    <p className=\"text-xs tracking-tighter text-zinc-700 dark:text-zinc-300\">\n                        {description}\n                    </p>\n                </div>\n                <ArrowRightBroken className=\"w-4 h-4 -rotate-90 group-hover:-rotate-45 transition-transform duration-300\" />\n\n                <button\n                    onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        sonnerToast.dismiss(id);\n                    }}\n                    className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700\"\n                    aria-label=\"Close toast\"\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"w-3.5 h-3.5 text-zinc-500 dark:text-zinc-400\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                    >\n                        <path d=\"M18 6 6 18\"></path>\n                        <path d=\"m6 6 12 12\"></path>\n                    </svg>\n                </button>\n            </div>\n        </Link>\n    );\n}\n\nconst toast = (toast: Omit<ToastProps, \"id\"> & { duration?: number }) => {\n    return sonnerToast.custom(\n        (id) => (\n            <Toast\n                id={id}\n                title={toast.title}\n                description={toast.description}\n            />\n        ),\n        { duration: toast.duration || 4000 }\n    );\n}\n\nexport const EventToaster: React.FC = () => {\n    useEffect(() => {\n        const timeoutId = setTimeout(() => {\n            toast({\n                title: \"Arca.directory\",\n                description: \"Find the best tools for entrepreneurs, developers, and designers.\",\n                duration: 6000,\n            });\n        }, 1000);\n\n        return () => clearTimeout(timeoutId);\n    }, []);\n\n    return null;\n};\n\nexport default EventToaster;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn toast component that displays a notification with a title, description, and close button.", "completion": "```tsx\n\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { toast as sonnerToast } from \"sonner\";\nimport { ArrowRightBroken } from \"./icons/arrow-right-broken\";\n\ninterface ToastProps {\n  id: string | number;\n  title: string;\n  description: string;\n}\n\n// Individual Toast UI Component\nconst Toast: React.FC<ToastProps> = ({ id, title, description }) => {\n  return (\n    <Link\n      href=\"https://arca.directory/?utm_source=kokonutui.com&utm_medium=toast\"\n      target=\"_blank\"\n      className=\"block focus:outline-none\"\n      tabIndex={0}\n      aria-label={`${title} - ${description}`}\n    >\n      <div className=\"group relative flex items-center p-2 rounded-lg bg-zinc-100 dark:bg-zinc-800 border border-black/10 dark:border-white/10 w-full md:max-w-[320px] hover:border-black/20 dark:hover:border-white/20 hover:shadow-md dark:hover:shadow-white animate-slide-in\">\n        <img\n          src=\"/arca-directory.svg\"\n          alt=\"Arca Directory\"\n          className=\"w-12 h-12 mr-3 flex-shrink-0\"\n        />\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium tracking-tighter text-zinc-900 dark:text-white\">\n            {title}\n          </p>\n          <p className=\"text-xs tracking-tighter text-zinc-700 dark:text-zinc-300\">\n            {description}\n          </p>\n        </div>\n\n        <ArrowRightBroken className=\"w-4 h-4 -rotate-90 group-hover:-rotate-45 transition-transform duration-300\" />\n\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            sonnerToast.dismiss(id);\n          }}\n          className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700\"\n          aria-label=\"Close toast\"\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"w-3.5 h-3.5 text-zinc-500 dark:text-zinc-400\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            <path d=\"M18 6 6 18\" />\n            <path d=\"m6 6 12 12\" />\n          </svg>\n        </button>\n      </div>\n\n      <style jsx>{`\n        @keyframes slide-in {\n          from {\n            transform: translateY(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateY(0);\n            opacity: 1;\n          }\n        }\n        .animate-slide-in {\n          animation: slide-in 0.3s ease-out forwards;\n        }\n      `}</style>\n    </Link>\n  );\n};\n\n// Toast trigger function\nconst toast = (data: Omit<ToastProps, \"id\"> & { duration?: number }) => {\n  return sonnerToast.custom(\n    (id) => <Toast id={id} title={data.title} description={data.description} />,\n    {\n      duration: data.duration || 4000,\n    }\n  );\n};\n\n// Hook to trigger toast on mount\nexport const EventToaster: React.FC = () => {\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      toast({\n        title: \"Arca.directory\",\n        description: \"Find the best tools for entrepreneurs, developers, and designers.\",\n        duration: 6000,\n      });\n    }, 1000);\n\n    return () => clearTimeout(timeoutId);\n  }, []);\n\n  return null;\n};\n\nexport default EventToaster;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn footer component with social media and project links.", "completion": "```tsx\n\"use client\";\n\nimport { FC } from \"react\";\nimport Link from \"next/link\";\nimport { Github } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { XIcon } from \"@heroicons/react/outline\";\n\ninterface ProjectLink {\n  href?: string;\n  text: string;\n  description: string;\n  icon: string;\n  iconDark?: string;\n  isNew?: boolean;\n}\n\nexport const Footer: FC = () => {\n  const projectLinks: ProjectLink[] = [\n    {\n      href: \"https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=footer\",\n      text: \"KokonutUI - PRO\",\n      description: \"Premium UI Components to ship apps faster\",\n      icon: \"/logo.svg\",\n      iconDark: \"/logo-black.svg\",\n    },\n    {\n      href: \"https://arca.directory/?utm_source=kokonutui.com&utm_medium=footer\",\n      text: \"Arca Directory\",\n      description:\n        \"Find and share the best tools for developers, designers and entrepreneurs.\",\n      icon: \"https://arca.directory/icon.svg\",\n      iconDark: \"https://arca.directory/icon.svg\",\n    },\n  ];\n\n  return (\n    <footer className=\"border-t border-zinc-200 dark:border-zinc-800\">\n      <div className=\"mx-auto max-w-7xl px-4 py-6\">\n        <h3 className=\"text-sm font-semibold text-zinc-900 dark:text-white mb-6\">\n          More from Me ??\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n          {/* Social Links */}\n          <div className=\"space-y-4\">\n            <Link\n              href=\"https://x.com/dorian_baffier\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"flex items-center space-x-2 text-zinc-500 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-white transition-colors\"\n            >\n              <XIcon className=\"h-4 w-4\" />\n              <span className=\"text-sm\">Twitter</span>\n            </Link>\n\n            <Link\n              href=\"https://github.com/kokonut-labs/kokonutui\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"flex items-center space-x-2 text-zinc-500 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-white transition-colors\"\n            >\n              <Github className=\"h-4 w-4\" />\n              <span className=\"text-sm\">Source completion</span>\n            </Link>\n          </div>\n\n          {/* Project Links */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:col-span-2\">\n            {projectLinks.map(({ href, text, description, icon, iconDark, isNew }) =>\n              href ? (\n                <Link\n                  key={text}\n                  href={href}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group relative p-3 rounded-lg border border-zinc-200 dark:border-zinc-800 hover:border-zinc-300 dark:hover:border-zinc-700 transition-colors\"\n                >\n                  {isNew && (\n                    <span className=\"absolute top-2 right-2 text-purple-500 dark:text-purple-400 border border-purple-500 dark:border-purple-400 rounded-lg px-1 py-0.5 text-xs\">\n                      New\n                    </span>\n                  )}\n                  <div className=\"flex items-center space-x-2\">\n                    <Image\n                      src={icon}\n                      alt={`${text} icon`}\n                      width={20}\n                      height={20}\n                      className=\"rounded-sm dark:hidden\"\n                    />\n                    {iconDark && (\n                      <Image\n                        src={iconDark}\n                        alt={`${text} icon (dark)`}\n                        width={20}\n                        height={20}\n                        className=\"rounded-sm hidden dark:block\"\n                      />\n                    )}\n                    <h4 className=\"font-medium text-zinc-900 dark:text-white group-hover:underline\">\n                      {text}\n                    </h4>\n                  </div>\n                  <p className=\"text-xs text-zinc-600 dark:text-zinc-400 mt-1\">\n                    {description}\n                  </p>\n                </Link>\n              ) : (\n                <div\n                  key={text}\n                  className=\"relative p-3 rounded-lg border border-zinc-200 dark:border-zinc-800\"\n                >\n                  {isNew && (\n                    <span className=\"absolute top-2 right-2 text-purple-500 dark:text-purple-400 border border-purple-500 dark:border-purple-400 rounded-lg px-1 py-0.5 text-xs\">\n                      New\n                    </span>\n                  )}\n                  <div className=\"flex items-center space-x-2\">\n                    <Image\n                      src={icon}\n                      alt={`${text} icon`}\n                      width={20}\n                      height={20}\n                      className=\"rounded-sm dark:hidden\"\n                    />\n                    {iconDark && (\n                      <Image\n                        src={iconDark}\n                        alt={`${text} icon (dark)`}\n                        width={20}\n                        height={20}\n                        className=\"rounded-sm hidden dark:block\"\n                      />\n                    )}\n                    <h4 className=\"font-medium text-zinc-900 dark:text-white\">\n                      {text}\n                    </h4>\n                  </div>\n                  <p className=\"text-xs text-zinc-600 dark:text-zinc-400 mt-1\">\n                    {description}\n                  </p>\n                </div>\n              )\n            )}\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn HeroSection component for a landing page showcasing UI components and features.", "completion": "```tsx\nimport React from 'react';\nimport { BrowseComponentsButton } from \"@/components/ui/browse-button\";\nimport FeatureBlock from \"./feature-block\";\nimport { motion } from \"motion/react\";\nimport Card08 from \"../kokonutui/card/card-08\";\nimport Btn03 from \"../kokonutui/button/btn-03\";\nimport Input09 from \"../kokonutui/input/input-09\";\nimport Link from \"next/link\";\nimport { Btn14 } from \"../kokonutui/button/btn-14\";\nimport { BrowseBlocksButton } from \"../ui/browse-blocks\";\nimport ActionSearchBar from \"../kokonutui/action-search-bar\";\nimport {\n    PlaneTakeoff,\n    BarChart2,\n    Video,\n    AudioLines,\n    Globe,\n    Diamond,\n} from \"lucide-react\";\nimport AIInput_04 from \"../kokonutui/ai-input/ai-input-04\";\n\ninterface Action {\n    id: string;\n    label: string;\n    icon: React.ReactNode;\n    description?: string;\n    short?: string;\n    end?: string;\n}\n\nconst allActions: Action[] = [\n    {\n        id: \"1\",\n        label: \"Book tickets\",\n        icon: <PlaneTakeoff className=\"h-4 w-4 text-blue-500\" />,\n        description: \"Operator\",\n        short: \"âŒ˜K\",\n        end: \"Agent\",\n    },\n    {\n        id: \"2\",\n        label: \"Summarize\",\n        icon: <BarChart2 className=\"h-4 w-4 text-orange-500\" />,\n        description: \"gpt-4o\",\n        short: \"âŒ˜cmd+p\",\n        end: \"Command\",\n    },\n    {\n        id: \"3\",\n        label: \"Screen Studio\",\n        icon: <Video className=\"h-4 w-4 text-purple-500\" />,\n        description: \"gpt-4o\",\n        short: \"\",\n        end: \"Application\",\n    },\n    {\n        id: \"4\",\n        label: \"Talk to Jarvis\",\n        icon: <AudioLines className=\"h-4 w-4 text-green-500\" />,\n        description: \"DeepSeek\",\n        short: \"\",\n        end: \"Active\",\n    },\n    {\n        id: \"5\",\n        label: \"Translate\",\n        icon: <Globe className=\"h-4 w-4 text-blue-500\" />,\n        description: \"Gemini\",\n        short: \"\",\n        end: \"Command\",\n    },\n];\n\nexport const HeroSection: React.FC = () => {\n    return (\n        <div className=\"mx-auto w-full md:w-9/10 min-h-screen flex flex-col lg:flex-row items-center justify-between gap-8 lg:gap-4 px-4 py-16 md:py-4\">\n            <div className=\"w-full lg:w-2/5 flex flex-col items-start text-left space-y-8 md:mb-28\">\n                <div>\n                    <h1 className=\"text-5xl sm:text-6xl lg:text-7xl font-bold tracking-tight leading-[1.1] text-zinc-900 dark:text-zinc-100\">\n                        Collection <br />\n                        of{\" \"}\n                        <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400\">\n                            stunning\n                        </span>{\" \"}\n                        components.\n                    </h1>\n                    <p className=\"mt-6 text-base md:text-xl text-zinc-700 dark:text-zinc-300 tracking-tighter max-w-lg\">\n                        100+ Open Source UI components built with{\" \"}\n                        <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400\">\n                            Tailwind CSS\n                        </span>{\" \"}\n                        and{\" \"}\n                        <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-orange-500 via-rose-500 to-purple-500 dark:from-orange-400 dark:via-rose-400 dark:to-purple-400\">\n                            shadcn/ui\n                        </span>{\" \"}\n                        perfect for <span className=\"font-semibold\">React</span>{\" \"}\n                        and <span className=\"font-semibold\">Next.js</span>.\n                    </p>\n                </div>\n                <div className=\"flex flex-col justify-start w-full\">\n                    <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-start gap-2\">\n                        <BrowseComponentsButton />\n                        <BrowseBlocksButton />\n                    </div>\n                </div>\n                <FeatureBlock />\n            </div>\n            <div className=\"w-full lg:w-3/5 flex flex-col justify-between 4 lg:pl-8\">\n                <motion.div\n                    initial={{ opacity: 0, y: -20, scale: 0.95 }}\n                    animate={{ opacity: 1, y: 0, scale: 1 }}\n                    transition={{ duration: 0.5 }}\n                    className=\"w-full grid grid-cols-1 md:grid-cols-2 gap-6 items-center justify-center\"\n                >\n                    <div className=\"w-full flex flex-col items-center justify-center \">\n                        <span className=\"text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2\">\n                            Card\n                        </span>\n                        <Card08 href=\"/docs/components/card\" />\n                    </div>\n                    <div className=\"w-full\">\n                        <span className=\"text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2\">\n                            Components\n                        </span>\n                        <ActionSearchBar\n                            actions={allActions}\n                            defaultOpen={true}\n                        />\n                    </div>\n                </motion.div>\n                <motion.div\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.5, delay: 0.2 }}\n                    className=\"w-full\"\n                >\n                    <span className=\"text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2\">\n                        AI Chat\n                    </span>\n                    <AIInput_04 />\n                </motion.div>\n                <motion.div\n                    initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                    animate={{ opacity: 1, y: 0, scale: 1 }}\n                    transition={{ duration: 0.5, delay: 0.4 }}\n                    className=\"w-full grid grid-cols-1 md:grid-cols-2 gap-6\"\n                >\n                    <div className=\"w-full\">\n                        <span className=\"text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2\">\n                            Buttons\n                        </span>\n                        <div className=\"w-full flex flex-col items-center justify-center gap-3\">\n                            <Link href=\"/docs/components/button\">\n                                <Btn14\n                                    label=\"Bring me\"\n                                    className=\" w-42 py-5\"\n                                />\n                            </Link>\n                            <Link href=\"/docs/components/button\">\n                                <Btn03 className=\" w-42 py-5\" />\n                            </Link>\n                        </div>\n                    </div>\n                    <div className=\"w-full\">\n                        <span className=\"text-sm text-zinc-500 dark:text-zinc-400 block text-center mb-2\">\n                            Input\n                        </span>\n                        <Link href=\"/docs/components/input\">\n                            <Input09 />\n                        </Link>\n                    </div>\n                </motion.div>\n            </div>\n        </div>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that serves as a responsive website header with navigation links and theme toggle.", "completion": "```tsx\nuse client';\n\nimport React from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { HeaderPro } from './header-pro';\nimport { ThemeToggle } from '@/lib/theme-toggle';\nimport { Menu, ArrowUpRight, PartyPopper } from 'lucide-react';\nimport { Link as ViewTransitionsLink } from 'next-view-transitions';\n\nconst Header: React.FC = () => {\n  return (\n    <div className=\"container mx-auto px-4\">\n      {/* Announcement Strip */}\n      <div className=\"sm:hidden w-full p-2 bg-white dark:bg-gray-800 flex items-center justify-center gap-2\">\n        <Link\n          href=\"https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header\"\n          target=\"_blank\"\n        >\n          <div className=\"inline-flex items-center gap-2\">\n            <PartyPopper className=\"w-3.5 h-3.5\" />\n            <span className=\"font-semibold text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text\">\n              Explore new components\n            </span>\n          </div>\n        </Link>\n\n        <div className=\"relative inline-flex items-center gap-2 px-3 py-1 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors group\">\n          <div className=\"absolute inset-0 rounded-lg bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 opacity-40 group-hover:opacity-80 blur-sm transition-opacity duration-500\" />\n          <div className=\"relative z-10 flex items-center gap-2\">\n            <span className=\"text-white dark:text-zinc-900\">KokonutUI Pro</span>\n            <ArrowUpRight className=\"w-3.5 h-3.5 text-white/90 dark:text-zinc-900/90\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Main Header */}\n      <div className=\"sticky top-0 z-50\">\n        <div className=\"bg-white dark:bg-gray-800 w-full\">\n          <div className=\"container mx-auto flex items-center justify-center flex-col\">\n            <div className=\"flex items-center justify-between bg-gradient-to-b from-white dark:from-gray-900 to-white dark:to-gray-900 shadow-md border border-gray-300 dark:border-gray-700 w-full sm:w-3/4 md:w-1/2 lg:w-1/3 rounded-xl px-4 py-2 mt-2 md:mt-4 transition-all duration-300 ease-in-out\">\n              {/* Logo + Links */}\n              <div className=\"flex items-center gap-6\">\n                <Link href=\"/\">\n                  <div className=\"flex items-center gap-2\">\n                    <Image\n                      src=\"/logo.svg\"\n                      alt=\"logo\"\n                      width={28}\n                      height={28}\n                      className=\"hidden dark:block\"\n                    />\n                    <Image\n                      src=\"/logo-black.svg\"\n                      alt=\"logo\"\n                      width={28}\n                      height={28}\n                      className=\"block dark:hidden\"\n                    />\n                    <span className=\"hidden sm:block font-semibold\">\n                      kokonut/ui\n                    </span>\n                  </div>\n                </Link>\n\n                <span className=\"text-gray-400 dark:text-gray-600\">|</span>\n\n                <div className=\"hidden sm:flex items-center gap-4\">\n                  <ViewTransitionsLink\n                    href=\"/docs/components/action-search-bar\"\n                    className=\"text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors\"\n                  >\n                    Components\n                  </ViewTransitionsLink>\n\n                  <Link\n                    href=\"https://kokonutui.pro/templates?utm_source=kokonutui.com&utm_medium=header\"\n                    target=\"_blank\"\n                    className=\"text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors flex items-center gap-2\"\n                  >\n                    Templates\n                    <span className=\"text-orange-500 dark:text-orange-400 border border-orange-500 dark:border-orange-400 rounded-full px-1 py-0.5 text-xs\">\n                      New\n                    </span>\n                  </Link>\n                </div>\n              </div>\n\n              {/* Right controls */}\n              <div className=\"hidden sm:flex items-center gap-3\">\n                <span className=\"text-gray-400 dark:text-gray-600\">|</span>\n                <HeaderPro />\n                <ThemeToggle />\n              </div>\n\n              {/* Mobile controls */}\n              <div className=\"flex sm:hidden items-center gap-4\">\n                <ViewTransitionsLink\n                  href=\"/docs/components/action-search-bar\"\n                  className=\"text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors\"\n                >\n                  Components\n                </ViewTransitionsLink>\n\n                <ViewTransitionsLink\n                  href=\"/pricing\"\n                  className=\"text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors\"\n                >\n                  Pricing\n                </ViewTransitionsLink>\n\n                <ThemeToggle />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays two technology badges with distinct colors and texts.", "completion": "```tsx\nimport { Sparkles } from \"lucide-react\";\n\nexport function TechnologyBadges() {\n  return (\n    <div className=\"flex flex-col sm:flex-row justify-center my-8 sm:my-24 gap-4\">\n      <div\n        className=\"\n          inline-flex items-center px-4 py-2 rounded-full text-sm \n          bg-gradient-to-r from-zinc-100 to-zinc-200 dark:from-zinc-900 dark:to-zinc-800\n          border border-zinc-200 dark:border-zinc-800 shadow-sm\n        \"\n      >\n        <Sparkles className=\"w-4 h-4 mr-2 text-emerald-500\" />\n        <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-zinc-800 to-zinc-600 dark:from-zinc-200 dark:to-zinc-400\">\n          Crafted with Next.js 15 & Tailwind CSS\n        </span>\n      </div>\n\n      <div\n        className=\"\n          inline-flex items-center px-4 py-2 rounded-full text-sm \n          bg-gradient-to-r from-orange-100 to-orange-200 dark:from-orange-900/30 dark:to-orange-800/30\n          border border-orange-200 dark:border-orange-800/30 shadow-sm\n        \"\n      >\n        <Sparkles className=\"w-4 h-4 mr-2 text-orange-500\" />\n        <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-orange-800 to-orange-600 dark:from-orange-200 dark:to-orange-400\">\n          Optionally with shadcn/ui and Framer Motion\n        </span>\n      </div>\n    </div>\n  );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a header with customizable links and dynamic content.", "completion": "```tsx\n\"use client\";\n\nimport { ArrowUpRight, PartyPopper, Rocket } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useState, useEffect } from \"react\";\nimport { ConfettiOutline } from \"../icons/conffeti\";\nimport XIcon from \"../icons/x-icon\";\n\ninterface HeaderContent {\n  text: string;\n  productName: string;\n  link: string;\n}\n\nexport const HeaderPro: React.FC = () => {\n  const [content, setContent] = useState<HeaderContent>({\n    text: \"Explore 70+ new components and templates\",\n    productName: \"Kokonut UI Pro\",\n    link: \"https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header\",\n  });\n\n  // Optional: uncomment if you want to randomize content on mount\n  // useEffect(() => {\n  //   const random = Math.random();\n  //   if (random < 0.5) {\n  //     setContent({\n  //       text: \"Built app fast\",\n  //       productName: \"Kokonut Boilerplate\",\n  //       link: \"https://kokonut.dev?utm_source=kokonutui.com&utm_medium=header\",\n  //     });\n  //   } else {\n  //     setContent({\n  //       text: \"Explore new components\",\n  //       productName: \"Kokonut UI Pro\",\n  //       link: \"https://kokonutui.pro?utm_source=kokonutui.com&utm_medium=header\",\n  //     });\n  //   }\n  // }, []);\n\n  return (\n    <div className=\"flex items-center justify-end gap-1 flex-1\">\n      <div className=\"flex items-center justify-start md:justify-end gap-1 flex-1\">\n        <Link\n          href={content.link}\n          target=\"_blank\"\n          className=\"flex items-center justify-end gap-2 pl-2 pr-0.5 py-1 text-sm font-medium text-zinc-800 dark:text-zinc-200 rounded-lg border-2 border-orange-500/20 hover:border-orange-500/60 transition-all duration-300 group hover:shadow-md\"\n          rel=\"noopener noreferrer\"\n        >\n          <span className=\"hidden md:flex items-center gap-2\">\n            {content.productName === \"Kokonut UI Pro\" ? (\n              <ConfettiOutline className=\"w-4 h-4 text-orange-500\" />\n            ) : (\n              <Rocket className=\"w-4 h-4 text-orange-500\" />\n            )}\n            <span className=\"text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text font-semibold tracking-tighter\">\n              {content.text}\n            </span>\n          </span>\n\n          <span className=\"flex md:hidden items-center gap-2\">\n            {content.productName === \"Kokonut UI Pro\" ? (\n              <PartyPopper className=\"w-4 h-4 text-orange-500\" />\n            ) : (\n              <Rocket className=\"w-4 h-4 text-orange-500\" />\n            )}\n            <span className=\"text-transparent bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 bg-clip-text font-semibold\">\n              {content.text.split(\" \")[0]}\n            </span>\n          </span>\n\n          <div className=\"relative inline-flex items-center gap-2 px-1.5 py-0.5 text-sm rounded-md bg-gradient-to-r from-zinc-900 to-zinc-800 dark:from-zinc-100/90 dark:to-zinc-200/90 mr-1\">\n            <div className=\"flex items-center gap-1\">\n              <span className=\"text-white dark:text-zinc-900 group-hover:text-white dark:group-hover:text-zinc-900 tracking-tighter\">\n                {content.productName}\n              </span>\n              <ArrowUpRight className=\"w-3.5 h-3.5 text-white/90 dark:text-zinc-900/90 group-hover:text-white dark:group-hover:text-zinc-900 transition-transform group-hover:translate-x-[1px] group-hover:-translate-y-[1px]\" />\n            </div>\n          </div>\n        </Link>\n\n        <Link\n          href=\"https://github.com/kokonut-labs/kokonutui\"\n          target=\"_blank\"\n          className=\"hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-700 dark:hover:bg-zinc-300\"\n          rel=\"noopener noreferrer\"\n        >\n          <div className=\"relative flex items-center gap-2 w-full\">\n            <svg\n              viewBox=\"0 0 24 24\"\n              className=\"w-4 h-4 text-white dark:text-zinc-900\"\n              fill=\"currentColor\"\n            >\n              <title>Github</title>\n              <path d=\"M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z\" />\n            </svg>\n            <span className=\"text-white dark:text-zinc-900 group-hover:text-white dark:group-hover:text-zinc-900 tracking-tight font-light\">\n              Github\n            </span>\n          </div>\n        </Link>\n\n        <Link\n          href=\"https://x.com/dorian_baffier\"\n          target=\"_blank\"\n          className=\"hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1.5 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-700 dark:hover:bg-zinc-300\"\n          rel=\"noopener noreferrer\"\n        >\n          <XIcon className=\"w-4 h-4 text-white dark:text-zinc-900\" />\n        </Link>\n      </div>\n    </div>\n  );\n};\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a landing page showcase section with a title, description, and image.", "completion": "```tsx\nimport { FC } from 'react';\nimport { ArrowRight } from 'lucide-react';\nimport Link from 'next/link';\nimport Text02 from \"@/components/kokonutui/text/text-02\";\n\nconst ShowcaseSection: FC = () => {\n  const imageURL = 'https://ferf1mheo22r9ira.public.blob.vercel-storage.com/Screenshot%202025-01-06%20at%2011.53.17%E2%80%AFAM-cjYGbgucRv0EPwuOF2VdsvMIUDrERS.png';\n  const demoURL = 'https://kokonutui-demo.vercel.app/';\n\n  return (\n    <div className=\"py-8 sm:py-24 text-center relative\">\n      <div className=\"inline-block mb-12\">\n        <h2 className=\"text-2xl sm:text-4xl font-bold tracking-tight\">\n          <Text02\n            text=\"Showcase\"\n            className=\"bg-clip-text text-transparent bg-linear-to-r from-pink-500 to-amber-500 dark:from-pink-400 dark:to-amber-400 text-4xl sm:text-7xl\"\n          />\n        </h2>\n      </div>\n\n      <div className=\"relative max-w-6xl mx-auto px-4\">\n        <div className=\"hidden sm:block absolute -left-4 top-1/4 transform -translate-x-full text-left\">\n          <p className=\"text-sm font-medium text-zinc-800 dark:text-zinc-200 mb-2\">\n            50+ Components\n          </p>\n          <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\n            Ready to Use\n          </p>\n        </div>\n\n        <div className=\"hidden sm:block absolute -right-4 top-1/3 transform translate-x-full text-right\">\n          <p className=\"text-sm font-medium text-zinc-800 dark:text-zinc-200 mb-2\">\n            Built in minutes\n          </p>\n          <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\n            not hours\n          </p>\n        </div>\n\n        <div className=\"hidden sm:block absolute -left-4 bottom-1/3 transform -translate-x-full text-left\">\n          <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\n            Fully Customizable\n          </p>\n        </div>\n\n        <div className=\"hidden sm:block absolute -right-4 bottom-1/4 transform translate-x-full text-right\">\n          <p className=\"text-sm font-medium text-zinc-800 dark:text-zinc-200\">\n            Beautiful interfaces\n          </p>\n        </div>\n\n        <img\n          src={imageURL}\n          alt=\"KokonutUI Screenshot\"\n          className=\"w-full sm:w-[80%] h-[300px] sm:h-[650px] mx-auto object-cover rounded-lg shadow-xl hover:shadow-2xl hover:shadow-zinc-900/20 dark:hover:shadow-zinc-100/10 transition-all duration-200\"\n          width={800}\n          height={1000}\n          loading=\"lazy\"\n        />\n\n        <div className=\"sm:hidden mt-4 space-y-2\">\n          <p className=\"text-sm font-medium text-zinc-800 dark:text-zinc-200\">\n            Beautiful interfaces built in minutes\n          </p>\n          <div className=\"flex items-center justify-center gap-2 text-xs text-zinc-600 dark:text-zinc-400\">\n            <span>50+ Components</span>\n            <span className=\"w-1 h-1 rounded-full bg-zinc-300 dark:bg-zinc-700\" />\n            <span>Ready to Use</span>\n          </div>\n        </div>\n\n        <Link\n          href={demoURL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n            group inline-flex items-center gap-2 px-4 sm:px-8 py-2 sm:py-4 rounded-xl\n            bg-white\n            text-zinc-900 text-sm sm:text-base font-medium\n            hover:shadow-lg hover:shadow-zinc-900/20\n            transition-all duration-200 ease-in-out\n            backdrop-blur-xs bg-opacity-90\"\n        >\n          <span>View Live Demo</span>\n          <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4 group-hover:translate-x-1 transition-transform\" />\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default ShowcaseSection;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a card with UI library information and links to explore components or GitHub.", "completion": "```tsx\nimport Link from \"next/link\";\nimport { ArrowRight, Github, Zap } from \"lucide-react\";\nimport AIInput_04 from \"@/components/kokonutui/ai-input/ai-input-04\";\n\ntype HeaderProps = {\n};\n\nconst Header: React.FC<HeaderProps> = () => {\n    return (\n        <div>\n            <h2 className=\"text-4xl sm:text-5xl font-bold tracking-tight\">\n                <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-amber-500 to-pink-500 dark:from-amber-400 dark:to-pink-400\">\n                    Build beautiful interfaces\n                </span>\n            </h2>\n            <p className=\"mt-6 text-base sm:text-lg text-zinc-600 dark:text-zinc-400 leading-relaxed\">\n                A collection of UI components that you can copy and paste into\n                your apps.\n            </p>\n            <p className=\"mt-2 text-base text-zinc-500 dark:text-zinc-400\">\n                Accessible. Open Source.\n            </p>\n        </div>\n    );\n}\n\ninterface BuildInterfacesCardProps {\n    className: string;\n}\n\nexport const BuildInterfacesCard: React.FC<BuildInterfacesCardProps> = ({ className }) => {\n    return (\n        <div className={className}>\n            <div className=\"h-full flex flex-col justify-between\">\n                <Header />\n                <div>\n                    <p className=\"text-sm text-zinc-500 dark:text-zinc-400 mb-2\">\n                        components / AI-Input-04\n                    </p>\n                    <div className=\"select-none cursor-default touch-none pointer-events-none\">\n                        <AIInput_04 />\n                    </div>\n                </div>\n\n                <div className=\"flex flex-wrap gap-4 mt-8\">\n                    <Link\n                        href=\"/docs\"\n                        className=\"group inline-flex items-center gap-2 px-6 py-3 rounded-lg \n                            bg-gradient-to-r from-zinc-900 to-zinc-800 dark:from-zinc-100 dark:to-zinc-200\n                            text-white dark:text-zinc-900 \n                            hover:shadow-lg hover:shadow-zinc-900/20 dark:hover:shadow-zinc-100/20\n                            transition-all duration-200 ease-in-out\"\n                    >\n                        <Zap className=\"w-4 h-4 group-hover:rotate-12 transition-transform\" />\n                        <span className=\"font-medium\">Explore Components</span>\n                        <ArrowRight className=\"w-4 h-4 group-hover:translate-x-1 transition-transform\" />\n                    </Link>\n\n                    <Link\n                        href=\"https://github.com/kokonut-labs/kokonutui\"\n                        target=\"_blank\"\n                        className=\"group inline-flex items-center gap-2 px-6 py-3 rounded-lg\n                            border border-zinc-200 dark:border-zinc-800\n                            hover:bg-zinc-100 dark:hover:bg-zinc-800/50\n                            hover:shadow-lg hover:shadow-zinc-900/10 dark:hover:shadow-zinc-100/10\n                            transition-all duration-200\"\n                    >\n                        <Github className=\"w-4 h-4 group-hover:scale-110 transition-transform\" />\n                        <span className=\"font-medium\">View on GitHub</span>\n                        <ArrowRight className=\"w-4 h-4 opacity-0 group-hover:opacity-100 group-hover:translate-x-1 transition-all\" />\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for an interactive landing page featuring selectable previews of various features.", "completion": "```tsx\nimport React, { FC, useState } from 'react';\nimport { motion } from \"framer-motion\";\nimport { completion, Palette, Zap } from \"lucide-react\";\n\ninterface Feature {\n    icon: React.ReactElement;\n    title: string;\n    description: string;\n    preview: React.ReactElement;\n}\n\nconst FEATURES: Feature[] = [\n    // identical to original completion\n]\n\nexport const InteractivePreview: FC = () => {\n    const [activeFeature, setActiveFeature] = useState<number>(0);\n\n    return (\n        <div className=\"w-full max-w-6xl mx-auto px-4 py-16\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-[1fr_1.5fr] gap-8\">\n                <div className=\"space-y-8\">\n                    {FEATURES.map((feature, index) => (\n                        <motion.div\n                            key={index}\n                            className={`p-6 rounded-2xl cursor-pointer \n                                ${activeFeature === index\n                                    ? \"bg-zinc-100 dark:bg-zinc-800/50\"\n                                    : \"hover:bg-zinc-50 dark:hover:bg-zinc-800/30\"\n                                }`}\n                            onClick={() => setActiveFeature(index)}\n                            whileHover={{ x: 5 }}\n                            transition={{ duration: 0.2 }}\n                        >\n                            <div className=\"flex items-start gap-4\">\n                                <div className=\"p-2 rounded-lg bg-zinc-200 dark:bg-zinc-700\">\n                                    {feature.icon}\n                                </div>\n                                <div>\n                                    <h3 className=\"font-semibold text-lg mb-1\">\n                                        {feature.title}\n                                    </h3>\n                                    <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\n                                        {feature.description}\n                                    </p>\n                                </div>\n                            </div>\n                        </motion.div>\n                    ))}\n                </div>\n\n                <div className=\"lg:h-[400px] p-8 rounded-3xl bg-linear-to-b from-white to-zinc-50 dark:from-zinc-900 dark:to-zinc-900/50 border border-zinc-200 dark:border-zinc-800\">\n                    <motion.div\n                        key={activeFeature}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ duration: 0.3 }}\n                        className=\"w-full h-full\"\n                    >\n                        {FEATURES[activeFeature].preview}\n                    </motion.div>\n                </div>\n            </div>\n        </div>\n    );\n};\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that showcases various input and button components.", "completion": "```tsx\nimport React from 'react';\nimport Input_10 from \"@/components/kokonutui/input/input-10\";\nimport Alert04 from \"@/components/kokonutui/alert/alert-04\";\nimport Input_08 from \"@/components/kokonutui/input/input-08\";\nimport Btn12 from \"@/components/kokonutui/button/btn-12\";\nimport Btn13 from \"@/components/kokonutui/button/btn-13\";\n\ninterface Component {\n  component: JSX.Element;\n  label: string;\n}\n\ninterface ComponentShowcaseCardProps {\n  className: string;\n}\n\nexport const ComponentShowcaseCard: React.FC<ComponentShowcaseCardProps> = ({ className }) => {\n  const components: Component[] = [\n    { component: <Input_10 />, label: \"Input 10\" },\n    { component: <Alert04 />, label: \"Alert 04\" },\n    {\n      component: (\n        <div className=\"flex justify-center gap-4 w-full\">\n          <Btn13 className=\"w-full\" label=\"Welcome\" />\n          <Btn12 className=\"w-full\" label=\"Button\" />\n        </div>\n      ),\n      label: \"Welcome\",\n    },\n  ];\n  \n  return (\n    <div className={className}>\n      <div className=\"text-2xl sm:text-3xl font-bold tracking-tight bg-clip-text text-transparent bg-linear-to-r from-zinc-700 to-zinc-400 dark:from-zinc-100 dark:to-zinc-400\">\n        Buttons, Inputs & More\n      </div>\n\n      <div className=\"space-y-12\">\n        <div className=\"space-y-20 mt-8\">\n          {components.map((btn, index) => (\n            <div\n              key={index}\n              className=\"flex flex-col items-center gap-8\"\n            >\n              <div className=\"h-16 flex items-center gap-8\">\n                {btn.component}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex flex-col items-center pt-8\">\n          <Input_08 label=\"\" />\n        </div>\n      </div>\n\n      <p className=\"text-sm text-center text-zinc-500 dark:text-zinc-400 mt-4\">\n        + more available\n      </p>\n    </div>\n  );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a grid of feature icons with hover animations.", "completion": "```tsx\n// client\nimport { useState } from 'react';\nimport { motion } from \"motion/react\";\nimport Image from \"next/image\";\nimport Nextjs from \"@/components/icons/nextjs\";\nimport ReactIcon from \"@/components/icons/react\";\nimport ShadcnIcon from \"@/components/icons/shadcn\";\n\nconst Features: React.FC = () => {\n    const [hoveredItem, setHoveredItem] = useState<string | null>(null);\n\n    const handleMouseEnter = (iconName: string) => {\n        setHoveredItem(iconName);\n    };\n\n    const handleMouseLeave = (): void => {\n        setHoveredItem(null);\n    };\n\n    return (\n        <div className=\"w-full max-w-none flex flex-col justify-start items-center z-10 mx-auto\">\n            <div className=\"grid grid-cols-3 md:flex md:flex-wrap items-center justify-start gap-6 md:gap-8 w-[95%] mx-auto py-4\">\n                <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    whileHover={{ scale: 1.1, fontWeight: 500 }}\n                    exit={{ opacity: 0, y: 20 }}\n                    transition={{ duration: 0.3, delay: 0.1, ease: [0.23, 1, 0.32, 1] }}\n                    className=\"text-blue-600 dark:text-blue-400 relative flex flex-col items-center gap-2\"\n                    onMouseEnter={() => handleMouseEnter(\"TailwindCSS\")}\n                    onMouseLeave={handleMouseLeave}\n                >\n                    {/* TailwindCSS SVG icon */}\n                    <motion.span\n                        className=\"text-xs text-center mt-1 whitespace-nowrap text-black dark:text-white\"\n                    >\n                        TailwindCSS\n                    </motion.span>\n                </motion.div>\n\n                {/* Similar blocks for Motion, Shadcn UI, Next.js, React... */}\n            </div>\n        </div>\n    );\n}\n\nexport default Features;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for an alert with customizable title and description.", "completion": "```tsx\nimport React, { FC, HTMLAttributes } from \"react\";\n\ntype Variant = \"default\" | \"destructive\";\n\ninterface AlertProps extends HTMLAttributes<HTMLDivElement> {\n    variant?: Variant;\n}\n\nconst Alert: FC<AlertProps> = ({ variant = \"default\", className, ...props }) => {\n    const baseStyles =\n        \"relative w-full rounded-lg border px-4 py-3 text-sm grid gap-y-0.5 items-start\";\n    const variantStyles = {\n        default: \"bg-white text-zinc-950 border-zinc-200\",\n        destructive:\n            \"text-red-500 bg-white border-red-500 dark:text-red-900 dark:bg-zinc-950\",\n    };\n\n    return (\n        <div\n            data-slot=\"alert\"\n            role=\"alert\"\n            className={`${baseStyles} ${variantStyles[variant]} ${className}`}\n            {...props}\n        />\n    );\n};\n\ninterface AlertTitleProps extends HTMLAttributes<HTMLDivElement> {}\n\nconst AlertTitle: FC<AlertTitleProps> = ({ className, ...props }) => {\n    return (\n        <div\n            data-slot=\"alert-title\"\n            className={`col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight ${className}`}\n            {...props}\n        />\n    );\n};\n\ninterface AlertDescriptionProps extends HTMLAttributes<HTMLDivElement> {}\n\nconst AlertDescription: FC<AlertDescriptionProps> = ({ className, ...props }) => {\n    return (\n        <div\n            data-slot=\"alert-description\"\n            className={`text-zinc-500 col-start-2 grid justify-items-start gap-1 text-sm leading-relaxed dark:text-zinc-400 ${className}`}\n            {...props}\n        />\n    );\n};\n\nexport { Alert, AlertTitle, AlertDescription };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that implements a tooltip using Radix UI and Tailwind CSS for styling.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, ForwardedRef } from 'react';\nimport { Root, Trigger, Content, Provider } from '@radix-ui/react-tooltip';\n\ntype TooltipProps = ComponentPropsWithoutRef<typeof Content>;\n\nconst TooltipContent = React.forwardRef<HTMLDivElement, TooltipProps>(({ className, sideOffset = 4, ...props }, ref: ForwardedRef<HTMLDivElement>) => {\n  return (\n    <Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={`${className} z-50 overflow-hidden rounded-md border border-zinc-200 bg-white px-3 py-1.5 text-sm text-zinc-950 shadow-md animate-in fade-in-0 zoom-in-95 data-state=closed:animate-out data-state=closed:fade-out-0 data-state=closed:zoom-out-95 data-side=bottom:slide-in-from-top-2 data-side=left:slide-in-from-right-2 data-side=right:slide-in-from-left-2 data-side=top:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50`}\n      {...props}\n    />\n  );\n});\n\nTooltipContent.displayName = 'TooltipContent';\n\nexport { Root as Tooltip, Trigger as TooltipTrigger, TooltipContent, Provider as TooltipProvider };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn accordion component for expandable and collapsible content sections.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, ElementRef, ForwardedRef, ReactNode } from 'react';\nimport { Root as AccordionPrimitive, Item, Trigger, Header, Content } from '@radix-ui/react-accordion';\nimport { ChevronDown } from 'lucide-react';\n\ninterface AccordionItemProps extends ComponentPropsWithoutRef<typeof Item> {\n  className?: string;\n}\n\nconst AccordionItem = React.forwardRef<ElementRef<typeof Item>, AccordionItemProps>(({ className, ...props }, ref: ForwardedRef<ElementRef<typeof Item>>) => (\n  <Item\n    ref={ref}\n    className={`border-b ${className}`}\n    {...props}\n  />\n));\nAccordionItem.displayName = \"AccordionItem\";\n\ninterface AccordionTriggerProps extends ComponentPropsWithoutRef<typeof Trigger> {\n  className?: string;\n  children: ReactNode;\n}\n\nconst AccordionTrigger = React.forwardRef<ElementRef<typeof Trigger>, AccordionTriggerProps>(({ className, children, ...props }, ref: ForwardedRef<ElementRef<typeof Trigger>>) => (\n  <Header className=\"flex\">\n    <Trigger\n      ref={ref}\n      className={`flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline ${className}`}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </Trigger>\n  </Header>\n));\nAccordionTrigger.displayName = Trigger.displayName;\n\ninterface AccordionContentProps extends ComponentPropsWithoutRef<typeof Content> {\n  className?: string;\n  children: ReactNode;\n}\n\nconst AccordionContent = React.forwardRef<ElementRef<typeof Content>, AccordionContentProps>(({ className, children, ...props }, ref: ForwardedRef<ElementRef<typeof Content>>) => (\n  <Content\n    ref={ref}\n    className={`overflow-hidden text-sm transition-all ${className}`}\n    {...props}\n  >\n    <div className={`pb-4 pt-0 ${className}`}>{children}</div>\n  </Content>\n));\nAccordionContent.displayName = Content.displayName;\n\nexport { AccordionPrimitive as Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for customizable, responsive tabs with unique triggers and content.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from \"react\";\nimport { Root, List, Trigger, Content } from \"@radix-ui/react-tabs\";\n\ntype TabsProps = ComponentPropsWithoutRef<typeof Root>;\n\nexport const Tabs: React.FC<TabsProps> = (props) => (\n  <Root {...props} />\n);\n\nconst TabsList: React.ForwardRefRenderFunction<ElementRef<typeof List>, ComponentPropsWithoutRef<typeof List>> = ({ className, ...props }, ref: ForwardedRef<ElementRef<typeof List>>) => (\n  <List\n    ref={ref}\n    className={`inline-flex h-10 items-center justify-center rounded-md bg-gray-200 p-1 text-gray-500 dark:bg-gray-800 dark:text-gray-400 ${className}`}\n    {...props}\n  />\n);\nTabsList.displayName = List.displayName;\n\nconst TabsTrigger: React.ForwardRefRenderFunction<ElementRef<typeof Trigger>, ComponentPropsWithoutRef<typeof Trigger>> = ({ className, ...props }, ref: ForwardedRef<ElementRef<typeof Trigger>>) => (\n  <Trigger\n    ref={ref}\n    className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-2 transition-all focus-visible:ring-2 focus-visible:ring-gray-900 disabled:pointer-events-none disabled:opacity-50 ${className}`}\n    {...props}\n  />\n);\nTabsTrigger.displayName = Trigger.displayName;\n\nconst TabsContent: React.ForwardRefRenderFunction<ElementRef<typeof Content>, ComponentPropsWithoutRef<typeof Content>> = ({ className, ...props }, ref: ForwardedRef<ElementRef<typeof Content>>) => (\n  <Content\n    ref={ref}\n    className={`mt-2 ring-offset-2 focus-visible:ring-2 focus-visible:ring-gray-900 dark:ring-offset-gray-900 dark:focus-visible:ring-gray-300 ${className}`}\n    {...props}\n  />\n);\nTabsContent.displayName = Content.displayName;\n\nexport { TabsList, TabsTrigger, TabsContent };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn button component that links to the action search bar documentation with animation effects.", "completion": "```tsx\nimport React from \"react\";\nimport { motion } from \"motion/react\";\nimport { ArrowDownRight } from \"lucide-react\";\nimport Link from \"next/link\";\n\nconst BrowseComponentsButton: React.FC = () => {\n    return (\n        <Link href=\"/docs/components/action-search-bar\">\n            <a className=\"flex items-center gap-2\">\n                <motion.div\n                    initial={{ x: 200, opacity: 0 }}\n                    animate={{ x: 0, opacity: 1, transition: { duration: 0.2 } }}\n                    whileHover={{ x: 5, transition: { duration: 0.2 } }}\n                    className=\"relative inline-flex items-center justify-center gap-2 rounded-xl font-medium h-12 px-6 min-w-72 md:min-w-56 bg-black dark:bg-white text-white dark:text-black border-2 border-orange-500 dark:border-orange-400 shadow-lg dark:shadow-lg backdrop-blur\"\n                >\n                    <span className=\"font-medium\">Browse Components</span>\n                    <ArrowDownRight className=\"w-5 h-5 transform rotate-270\" />\n                </motion.div>\n            </a>\n        </Link>\n    );\n}\n\nexport default BrowseComponentsButton;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a reusable separator styled with Tailwind CSS and TypeScript.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, ForwardedRef } from 'react';\nimport { Root as SeparatorPrimitive } from '@radix-ui/react-separator';\nimport clsx from 'clsx';\n\nexport interface SeparatorProps extends ComponentPropsWithoutRef<typeof SeparatorPrimitive> {\n  className?: string;\n  orientation?: 'horizontal' | 'vertical';\n  decorative?: boolean;\n}\n\nconst Separator = React.forwardRef((\n  { className, orientation = 'horizontal', decorative = true, ...props }: SeparatorProps,\n  ref: ForwardedRef<React.ElementRef<typeof SeparatorPrimitive>>\n) => (\n  <SeparatorPrimitive\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={clsx(\n      'shrink-0 bg-gray-200 dark:bg-gray-800',\n      orientation === 'horizontal' ? 'h-px w-full' : 'w-px h-full',\n      className\n    )}\n    {...props}\n  />\n));\n\nSeparator.displayName = 'Separator';\n\nexport { Separator };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a responsive progress bar based on the value prop.", "completion": "```tsx\nimport React, { FC, forwardRef, Ref } from \"react\";\nimport { Root, Indicator } from \"@radix-ui/react-progress\";\n\ntype ProgressProps = {\n  className?: string;\n  value?: number;\n};\n\nconst Progress: FC<ProgressProps> = forwardRef(({ className, value, ...props }: ProgressProps, ref: Ref<any>) => (\n  <Root\n    ref={ref}\n    className={`relative h-4 w-full overflow-hidden rounded-full bg-zinc-100 dark:bg-zinc-800 ${className}`}\n    {...props}\n  >\n    <Indicator\n      className=\"h-full w-full flex-1 bg-zinc-900 transition-all dark:bg-zinc-50\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </Root>\n))\n\nProgress.displayName = Root.displayName;\n\nexport default Progress;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component set for avatars, including main, image, and fallback avatars styled with Tailwind CSS.", "completion": "```tsx\nimport React, { FC, ForwardedRef } from 'react';\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\n\nconst Avatar: FC<React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>> = React.forwardRef((\n  { className, ...props },\n  ref: ForwardedRef<React.ElementRef<typeof AvatarPrimitive.Root>>\n) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={`relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full ${className}`}\n    {...props}\n  />\n));\n\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage: FC<React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>> = React.forwardRef((\n  { className, ...props },\n  ref: ForwardedRef<React.ElementRef<typeof AvatarPrimitive.Image>>\n) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={`aspect-square h-full w-full ${className}`}\n    {...props}\n  />\n));\n\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback: FC<React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>> = React.forwardRef((\n  { className, ...props },\n  ref: ForwardedRef<React.ElementRef<typeof AvatarPrimitive.Fallback>>\n) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={`flex h-full w-full items-center justify-center rounded-full bg-zinc-100 dark:bg-zinc-800 ${className}`}\n    {...props}\n  />\n));\n\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a customizable input field.", "completion": "```tsx\nimport React, { InputHTMLAttributes, ForwardedRef } from \"react\";\nimport 'tailwindcss/tailwind.css';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  className?: string;\n  type?: string;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }: InputProps, ref: ForwardedRef<HTMLInputElement>) => {\n    return (\n      <input\n        type={type}\n        className={`${className} flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300`}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a customizable loading skeleton with animated pulse effect.", "completion": "```tsx\nimport React from 'react';\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n}\n\nconst Skeleton: React.FC<SkeletonProps> = ({ className, ...props }) => {\n  return (\n    <div\n      className={`animate-pulse rounded-md bg-zinc-100 dark:bg-zinc-800 ${className}`}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn dropdown menu component with customizable items, checkboxes, and radio buttons using Radix UI and Tailwind CSS.", "completion": "```tsx\nimport * as React from \"react\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\nimport { Root, Trigger, Group, Portal, Sub, \n  RadioGroup, SubTrigger, SubContent, Content, \n  Item, CheckboxItem, RadioItem, Label, Separator } \n  from \"@radix-ui/react-dropdown-menu\"\n\ninterface IDropdownMenuSubTrigger extends React.ComponentPropsWithoutRef<typeof SubTrigger> {\n  inset?: boolean\n}\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof SubTrigger>,\n  IDropdownMenuSubTrigger\n>(({ className, inset, children, ...props }, ref) => (\n  <SubTrigger\n    ref={ref}\n    className={`flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-200 ${inset ? 'pl-8' : \"} ${className}`}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </SubTrigger>\n))\n\ninterface IDropdownMenuSubContent extends React.ComponentPropsWithoutRef<typeof SubContent> {}\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof SubContent>,\n  IDropdownMenuSubContent\n>(({ className, ...props }, ref) => (\n  <SubContent\n    ref={ref}\n    className={`min-w-32 overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-900 shadow-lg ${className}`}\n    {...props}\n  />\n))\n\ninterface IDropdownMenuContent extends React.ComponentPropsWithoutRef<typeof Content> {\n  sideOffset?: number\n}\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof Content>,\n  IDropdownMenuContent\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <Portal>\n    <Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={`min-w-32 overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-900 shadow-md ${className}`}\n      {...props}\n    />\n  </Portal>\n))\n\ninterface IDropdownMenuItem extends React.ComponentPropsWithoutRef<typeof Item> {\n  inset?: boolean\n}\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof Item>,\n  IDropdownMenuItem\n>(({ className, inset, ...props }, ref) => (\n  <Item\n    ref={ref}\n    className={`relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-gray-200 focus:text-gray-900 ${inset ? 'pl-8' : \"} ${className}`}\n    {...props}\n  />\n))\n\ninterface IDropdownMenuCheckboxItem extends React.ComponentPropsWithoutRef<typeof CheckboxItem> {}\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof CheckboxItem>,\n  IDropdownMenuCheckboxItem\n>(({ className, children, checked, ...props }, ref) => (\n  <CheckboxItem\n    ref={ref}\n    className={`relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-200 focus:text-gray-900 ${className}`}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ItemIndicator>\n    </span>\n    {children}\n  </CheckboxItem>\n))\n\ninterface IDropdownMenuRadioItem extends React.ComponentPropsWithoutRef<typeof RadioItem> {}\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof RadioItem>,\n  IDropdownMenuRadioItem\n>(({ className, children, ...props }, ref) => (\n  <RadioItem\n    ref={ref}\n    className={`relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-200 focus:text-gray-900 ${className}`}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ItemIndicator>\n    </span>\n    {children}\n  </RadioItem>\n))\n\ninterface IDropdownMenuLabel extends React.ComponentPropsWithoutRef<typeof Label> {\n  inset?: boolean\n}\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof Label>,\n  IDropdownMenuLabel\n>(({ className, inset, ...props }, ref) => (\n  <Label\n    ref={ref}\n    className={`px-2 py-1.5 text-sm font-semibold ${inset ? 'pl-8' : \"} ${className}`}\n    {...props}\n  />\n))\n\ninterface IDropdownMenuSeparator extends React.ComponentPropsWithoutRef<typeof Separator> {}\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  IDropdownMenuSeparator\n>(({ className, ...props }, ref) => (\n  <Separator\n    ref={ref}\n    className={`my-1 h-px bg-gray-200 ${className}`}\n    {...props}\n  />\n))\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={`ml-auto text-xs tracking-widest opacity-60 ${className}`}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Root as DropdownMenu,\n  Trigger as DropdownMenuTrigger,\n  Content as DropdownMenuContent,\n  Item as DropdownMenuItem,\n  CheckboxItem as DropdownMenuCheckboxItem,\n  RadioItem as DropdownMenuRadioItem,\n  Label as DropdownMenuLabel,\n  Separator as DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  Group as DropdownMenuGroup,\n  Portal as DropdownMenuPortal,\n  Sub as DropdownMenuSub,\n  SubContent as DropdownMenuSubContent,\n  SubTrigger as DropdownMenuSubTrigger,\n  RadioGroup as DropdownMenuRadioGroup,\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn select component with customizable trigger, content, items, and scroll buttons.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from \"react\";\nimport { Root, Group, Value, Trigger, Icon, ScrollUpButton, ScrollDownButton, Content, Viewport, Label, Item, ItemIndicator, ItemText, Separator } from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\n\ntype ForwardRefComponent<T> = React.ForwardRefRenderFunction<ElementRef<T>, ComponentPropsWithoutRef<T>>;\n\nconst SelectTrigger: ForwardRefComponent<typeof Trigger> = ({ className, children, ...props }, ref) => (\n  <Trigger\n    ref={ref}\n    className={`flex h-10 w-full items-center justify-between rounded-md border border-zinc-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-zinc-500 focus:outline-none focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:placeholder:text-zinc-400 dark:focus:ring-zinc-300 ${className}`}\n    {...props}\n  >\n    {children}\n    <Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </Icon>\n  </Trigger>\n);\nSelectTrigger.displayName = \"SelectTrigger\";\n\nconst SelectScrollUpButton: ForwardRefComponent<typeof ScrollUpButton> = ({ className, ...props }, ref) => (\n  <ScrollUpButton\n    ref={ref}\n    className={`flex cursor-default items-center justify-center py-1 ${className}`}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </ScrollUpButton>\n);\nSelectScrollUpButton.displayName = \"SelectScrollUpButton\";\n\nconst SelectScrollDownButton: ForwardRefComponent<typeof ScrollDownButton> = ({ className, ...props }, ref) => (\n  <ScrollDownButton\n    ref={ref}\n    className={`flex cursor-default items-center justify-center py-1 ${className}`}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </ScrollDownButton>\n);\nSelectScrollDownButton.displayName = \"SelectScrollDownButton\";\n\nconst SelectContent: ForwardRefComponent<typeof Content> = ({ className, children, position = \"popper\", ...props }, ref) => (\n  <Content\n    ref={ref}\n    className={`relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white text-zinc-950 shadow-md dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50 ${className}`}\n    position={position}\n    {...props}\n  >\n    <SelectScrollUpButton />\n    <Viewport\n      className={`p-1 ${position === \"popper\" && \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"}`}\n    >\n      {children}\n    </Viewport>\n    <SelectScrollDownButton />\n  </Content>\n);\nSelectContent.displayName = \"SelectContent\";\n\nconst SelectLabel: ForwardRefComponent<typeof Label> = ({ className, ...props }, ref) => (\n  <Label\n    ref={ref}\n    className={`py-1.5 pl-8 pr-2 text-sm font-semibold ${className}`}\n    {...props}\n  />\n);\nSelectLabel.displayName = \"SelectLabel\";\n\nconst SelectItem: ForwardRefComponent<typeof Item> = ({ className, children, ...props }, ref) => (\n  <Item\n    ref={ref}\n    className={`relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-zinc-100 focus:text-zinc-900 dark:focus:bg-zinc-800 dark:focus:text-zinc-50 ${className}`}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ItemIndicator>\n    </span>\n    <ItemText>{children}</ItemText>\n  </Item>\n);\nSelectItem.displayName = \"SelectItem\";\n\nconst SelectSeparator: ForwardRefComponent<typeof Separator> = ({ className, ...props }, ref) => (\n  <Separator\n    ref={ref}\n    className={`-mx-1 my-1 h-px bg-zinc-100 dark:bg-zinc-800 ${className}`}\n    {...props}\n  />\n);\nSelectSeparator.displayName = \"SelectSeparator\";\n\nexport {\n  Root as Select,\n  Group as SelectGroup,\n  Value as SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n```", "source": "Shadcn"}
{"prompt": "Create a reusable Slider component using Radix UI, styled with Tailwind CSS, and typed with TypeScript.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, ForwardedRef } from \"react\";\nimport { Root, Track, Range, Thumb } from \"@radix-ui/react-slider\";\nimport clsx from 'clsx';\n\ntype RootElement = React.ElementRef<typeof Root>;\ntype SliderProps = ComponentPropsWithoutRef<typeof Root>;\n\nconst Slider = React.forwardRef<RootElement, SliderProps>(\n  ({ className, ...props }: SliderProps, ref: ForwardedRef<RootElement>) => (\n    <Root\n      ref={ref}\n      className={clsx(\n        \"relative flex w-full cursor-pointer select-none items-center\",\n        className\n      )}\n      {...props}\n    >\n      <Track className=\"relative h-2 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-800\">\n        <Range className=\"absolute h-full bg-gray-900 dark:bg-gray-50\" />\n      </Track>\n      <Thumb className=\"block h-5 w-5 rounded-full border-2 border-gray-900 bg-white ring-offset-white transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-gray-50 dark:bg-gray-900 dark:ring-offset-gray-900 dark:focus:ring-gray-300\" />\n    </Root>\n  )\n);\n\nSlider.displayName = Root.displayName;\n\nexport { Slider };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn card component set with Card, CardHeader, CardFooter, CardTitle, CardDescription, and CardContent.", "completion": "```tsx\nimport React, { HTMLAttributes, forwardRef } from \"react\";\n\ntype Props = HTMLAttributes<HTMLDivElement>;\n\nconst Card = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={`rounded-lg border border-gray-200 bg-white text-gray-900 shadow-xs dark:border-gray-800 dark:bg-gray-900 dark:text-white ${className}`}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={`flex flex-col space-y-1.5 p-6 ${className}`}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={`text-2xl font-semibold leading-none tracking-tight ${className}`}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={`text-sm text-gray-500 dark:text-gray-400 ${className}`}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (\n  <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = forwardRef<HTMLDivElement, Props>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={`flex items-center p-6 pt-0 ${className}`}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n```", "source": "Shadcn"}
{"prompt": "Create a customizable dialog component using Radix UI primitives in Shadcn.", "completion": "```tsx\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\nimport clsx from \"clsx\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\ninterface OverlayProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> {\n  className?: string;\n}\n\nconst DialogOverlay = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Overlay>, OverlayProps>(\n  ({ className, ...props }, ref) => (\n    <DialogPrimitive.Overlay\n      ref={ref}\n      className={clsx(\n        \"fixed inset-0 z-50 bg-black bg-opacity-80 transition-all\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\n\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\ninterface ContentProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst DialogContent = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Content>, ContentProps>(\n  ({ className, children, ...props }, ref) => (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        ref={ref}\n        className={clsx(\n          \"fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg transform -translate-x-1/2 -translate-y-1/2 gap-4 border border-zinc-200 bg-white p-6 shadow-lg transition-all dark:border-zinc-800 dark:bg-zinc-950\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n)\n\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\ninterface HeaderFooterProps extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n}\n\nconst DialogHeader = ({ className, ...props }: HeaderFooterProps) => (\n  <div className={clsx(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n)\n\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({ className, ...props }: HeaderFooterProps) => (\n  <div className={clsx(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n)\n\nDialogFooter.displayName = \"DialogFooter\"\n\ninterface TitleDescriptionProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title> {\n  className?: string;\n}\n\nconst DialogTitle = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Title>, TitleDescriptionProps>(\n  ({ className, ...props }, ref) => (\n    <DialogPrimitive.Title ref={ref} className={clsx(\"text-lg font-semibold leading-none tracking-tight\", className)} {...props} />\n  )\n)\n\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Description>, TitleDescriptionProps>(\n  ({ className, ...props }, ref) => (\n    <DialogPrimitive.Description ref={ref} className={clsx(\"text-sm text-zinc-500 dark:text-zinc-400\", className)} {...props} />\n  )\n)\n\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a flexible, Tailwind CSS-styled textarea.", "completion": "```tsx\nimport * as React from \"react\";\n\ntype TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {\n    className?: string;\n}\n\nconst Textarea: React.ForwardRefRenderFunction<HTMLTextAreaElement, TextareaProps> = (\n    { className, ...props },\n    ref\n) => {\n    return (\n        <textarea\n            className={`${className} flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50`}\n            ref={ref}\n            {...props}\n        />\n    );\n}\n\nexport const TextareaForwarded = React.forwardRef(Textarea);\nTextareaForwarded.displayName = \"TextareaForwarded\";\n\nexport { TextareaForwarded as Textarea };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn Label component with variants using Radix UI's Label primitive.", "completion": "```tsx\nimport React, { ForwardedRef } from 'react'\nimport { Root as LabelPrimitiveRoot } from \"@radix-ui/react-label\"\nimport { VariantProps } from \"class-variance-authority\"\n\nconst labelVariants = \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\";\n\ntype LabelProps = React.ComponentPropsWithoutRef<typeof LabelPrimitiveRoot> & VariantProps<typeof labelVariants>\n\nconst Label = React.forwardRef<LabelProps, typeof LabelPrimitiveRoot>(\n  ({ className, ...props }: LabelProps, ref: ForwardedRef<LabelProps>) => {\n    return (\n      <LabelPrimitiveRoot\n        ref={ref}\n        className={`${labelVariants} ${className}`}\n        {...props}\n      />\n    );\n  }\n)\n\nLabel.displayName = LabelPrimitiveRoot.displayName;\n\nexport default Label;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a customizable sheet dialog with header, footer, title, and description.", "completion": "```tsx\nimport React, { FC, ComponentPropsWithoutRef, ElementRef, HTMLAttributes } from \"react\";\nimport { DialogOverlay, DialogClose, DialogContent, DialogTitle, DialogDescription } from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\nimport clsx from \"clsx\";\n\ninterface SheetContentProps extends ComponentPropsWithoutRef<typeof DialogContent> {\n  side?: \"top\" | \"bottom\" | \"left\" | \"right\";\n}\n\nconst SheetContent: FC<SheetContentProps> = ({ side = \"right\", className, children, ...props }) => (\n  <DialogOverlay className=\"fixed inset-0 z-50 bg-black bg-opacity-80 transition-all duration-500\">\n    <DialogContent\n      className={clsx(\n        \"fixed z-50 gap-4 bg-white p-6 shadow-lg transition ease-in-out dark:bg-gray-700\",\n        {\n          \"inset-x-0 top-0 border-b\": side === \"top\",\n          \"inset-x-0 bottom-0 border-t\": side === \"bottom\",\n          \"inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\": side === \"left\",\n          \"inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\": side === \"right\",\n        },\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogClose className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-gray-500 disabled:cursor-not-allowed\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogClose>\n    </DialogContent>\n  </DialogOverlay>\n);\n\nconst SheetHeader: FC<HTMLAttributes<HTMLDivElement>> = ({ className, ...props }) => (\n  <div className={clsx(\"flex flex-col space-y-2 text-center sm:text-left\", className)} {...props} />\n);\n\nconst SheetFooter: FC<HTMLAttributes<HTMLDivElement>> = ({ className, ...props }) => (\n  <div className={clsx(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\n\nconst SheetTitle: FC<ComponentPropsWithoutRef<typeof DialogTitle>> = ({ className, ...props }) => (\n  <DialogTitle className={clsx(\"text-lg font-semibold text-gray-700 dark:text-white\", className)} {...props} />\n);\n\nconst SheetDescription: FC<ComponentPropsWithoutRef<typeof DialogDescription>> = ({ className, ...props }) => (\n  <DialogDescription className={clsx(\"text-sm text-gray-500 dark:text-gray-400\", className)} {...props} />\n);\n\nexport { SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription };\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a customizable badge with different style variants.", "completion": "```tsx\nimport React, { HTMLAttributes } from \"react\";\n\ntype Variant = 'default' | 'secondary' | 'destructive' | 'outline';\n\ninterface BadgeProps extends HTMLAttributes<HTMLDivElement> {\n  variant?: Variant;\n}\n\nconst baseStyle = \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-all focus:outline-none focus:ring-2 dark:border-zinc-800 dark:focus:ring-zinc-300\";\nconst variantStyles: Record<Variant, string> = {\n  default: \"border-zinc-200 bg-zinc-900 text-zinc-50 hover:bg-zinc-900/80 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/80\",\n  secondary: \"border-zinc-200 bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n  destructive: \"border-zinc-200 bg-red-500 text-zinc-50 hover:bg-red-500/80 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/80\",\n  outline: \"border-zinc-200 text-zinc-950 dark:text-zinc-50\",\n}\n\nconst Badge: React.FC<BadgeProps> = ({ className, variant = 'default', ...props }) => {\n  return (\n    <div className={`${baseStyle} ${variantStyles[variant]} ${className}`} {...props} />\n  );\n}\n\nexport default Badge;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a customizable popover using Radix UI and styled with Tailwind CSS.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, forwardRef, ElementRef } from \"react\";\nimport { Root, Trigger, Content, Portal } from \"@radix-ui/react-popover\";\n\ntype ContentProps = ComponentPropsWithoutRef<typeof Content> & {\n  align?: string;\n  sideOffset?: number;\n};\n\nconst PopoverContent: React.FC<ContentProps> = forwardRef<ElementRef<typeof Content>, ContentProps>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <Portal>\n    <Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={`z-50 w-72 rounded-md border border-gray-200 bg-white p-4 text-gray-800 shadow-md outline-hidden transition-transform duration-200 ease-in-out ${className}`}\n      {...props}\n    />\n  </Portal>\n));\n\nPopoverContent.displayName = Content.displayName;\n\nexport const Popover = Root;\nexport const PopoverTrigger = Trigger;\nexport const PopoverContent = PopoverContent;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn Popover component with trigger and content using radix-ui/react-popover.", "completion": "```tsx\nimport React, { ButtonHTMLAttributes, ForwardedRef } from \"react\";\n\ntype ButtonVariants = \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\";\ntype ButtonSizes = \"default\" | \"sm\" | \"lg\" | \"icon\";\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n  variant?: ButtonVariants;\n  size?: ButtonSizes;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ variant = \"default\", size = \"default\", asChild = false, ...props }, ref: ForwardedRef<HTMLButtonElement>) => {\n\n    const baseStyles = \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus:outline-none focus-visible:ring-2 disabled:opacity-50 cursor-pointer\";\n    const sizeStyles = size === \"sm\" ? \"h-9 rounded-md px-3\" : size === \"lg\" ? \"h-11 rounded-md px-8\" : size === \"icon\" ? \"h-10 w-10\" : \"h-10 px-4 py-2\";\n\n    let variantStyles = \"\";\n\n    switch(variant) {\n      case \"destructive\":\n        variantStyles = \"bg-red-500 text-white hover:bg-red-500/90 dark:bg-red-900 dark:text-white dark:hover:bg-red-900/90\";\n        break;\n      case \"outline\":\n        variantStyles = \"border border-gray-200 bg-white hover:bg-gray-100 hover:text-black dark:border-gray-800 dark:bg-gray-950 dark:hover:bg-gray-800 dark:hover:text-white\";\n        break;\n      case \"secondary\":\n        variantStyles = \"bg-gray-100 text-black hover:bg-gray-100/80 dark:bg-gray-800 dark:text-white dark:hover:bg-gray-800/80\";\n        break;\n      case \"ghost\":\n        variantStyles = \"hover:bg-gray-100 hover:text-black dark:hover:bg-gray-800 dark:hover:text-white\";\n        break;\n      case \"link\":\n        variantStyles = \"text-black underline hover:underline dark:text-white\";\n        break;\n      default:\n        variantStyles = \"bg-gray-900 text-white hover:bg-gray-900/90 dark:bg-white dark:text-black dark:hover:bg-white/90\";\n    }\n\n    const Comp = asChild ? \"span\" : \"button\";\n\n    const className = `${baseStyles} ${variantStyles} ${sizeStyles}`;\n\n    return <Comp className={className} ref={ref} {...props} />;\n  }\n);\nButton.displayName = \"Button\";\n\nexport default Button;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn button component that links to a template page with animation effects.", "completion": "```tsx\nimport { FC } from 'react';\nimport Link from 'next/link';\nimport { motion } from 'framer-motion';\nimport { ArrowRight } from 'react-feather';\n\nconst BrowseBlocksButton: FC = () => (\n    <Link href=\"https://kokonutui.pro/templates\">\n        <a id=\"browse-blocks-button\" className=\"flex items-center gap-2\">\n            <motion.div\n                initial={{ x: 200, opacity: 0 }}\n                animate={{ x: 0, opacity: 1, transition: { duration: 0.2 } }}\n                whileHover={{ x: 5, transition: { duration: 0.2 } }}\n                className=\"relative\"\n            >\n                <button\n                    className=\"relative inline-flex items-center justify-center gap-2 rounded-xl \n                     font-medium h-12 px-6 min-w-18 md:min-w-14 bg-white dark:bg-black text-black \n                     dark:text-white border-2 border-black/20 dark:border-white/20 hover:bg-black/5 \n                     dark:hover:bg-white/10 backdrop-blur-xs shadow-md hover:shadow-lg transition-all \n                     duration-200\"\n                >\n                    <span className=\"font-medium flex items-center gap-2\">\n                        Go to Templates\n                    </span>\n                    <ArrowRight className=\"w-5 h-5\" />\n                </button>\n            </motion.div>\n        </a>\n    </Link>\n);\n\nexport default BrowseBlocksButton;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn scroll area component with customizable scrollbar and viewport.", "completion": "```tsx\nimport React, { ComponentPropsWithoutRef, ElementRef, FC, forwardRef } from 'react';\nimport { ScrollAreaCorner, ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from '@radix-ui/react-scroll-area';\nimport clsx from 'clsx';\n\ntype ScrollAreaProps = ComponentPropsWithoutRef<typeof ScrollAreaRoot>;\ntype ScrollBarProps = ComponentPropsWithoutRef<typeof ScrollAreaScrollbar>;\n\nconst ScrollArea: FC<ScrollAreaProps> = forwardRef<ElementRef<typeof ScrollAreaRoot>, ScrollAreaProps>(({ className, children, ...props }, ref) => (\n  <ScrollAreaRoot \n    ref={ref} \n    className={clsx('relative overflow-hidden', className)} \n    {...props}\n  >\n    <ScrollAreaViewport className='h-full w-full rounded-inherit'>\n      {children}\n    </ScrollAreaViewport>\n    <ScrollBar />\n    <ScrollAreaCorner />\n  </ScrollAreaRoot>\n));\nScrollArea.displayName = ScrollAreaRoot.displayName;\n\nconst ScrollBar: FC<ScrollBarProps> = forwardRef<ElementRef<typeof ScrollAreaScrollbar>, ScrollBarProps>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaScrollbar \n    ref={ref} \n    orientation={orientation} \n    className={clsx(\n      'flex touch-none select-none transition-colors', \n      orientation === 'vertical' ? 'h-full w-2.5 border-l border-transparent px-1' : 'h-2.5 flex-col border-t border-transparent py-1', \n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaThumb className='relative flex-1 rounded-full bg-zinc-200 dark:bg-zinc-800' />\n  </ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar }\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a refresh button with an animated icon and customizable onClick handler.", "completion": "```tsx\nimport * as React from \"react\";\nimport { RefreshCw } from \"lucide-react\";\n\ninterface RefreshButtonProps {\n    onRefresh: () => void;\n}\n\nconst RefreshButton: React.FC<RefreshButtonProps> = ({ onRefresh }) => {\n    return (\n        <button\n            type=\"button\"\n            onClick={onRefresh}\n            className=\"group absolute top-24 right-2 p-2 rounded-lg text-white dark:text-black hover:bg-zinc-800 dark:hover:bg-zinc-100 transition-colors z-10 flex items-center gap-2 bg-black dark:bg-white h-7 px-3\"\n            aria-label=\"Refresh preview\"\n        >\n            <RefreshCw\n                className=\"transition-transform group-hover:rotate-180 duration-300\"\n                size={16}\n            />\n            <span className=\"text-sm font-medium\">Refresh</span>\n        </button>\n    );\n}\n\nexport default RefreshButton;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a preview with optional iframe, comments, and customizable styles.", "completion": "```tsx\nimport { FC } from \"react\";\nimport { PreviewContent } from \"./preview-content\";\n\ninterface PreviewProps {\n    children: React.ReactNode;\n    className?: string;\n    link: string;\n    useIframe?: boolean;\n    height?: string;\n    compact?: boolean;\n    comment?: string[];\n    isBlock?: boolean;\n}\n\nconst prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL\n    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`\n    : \"http://localhost:3000\";\n\nexport const Preview: FC<PreviewProps> = ({\n    children,\n    className = \"\",\n    link,\n    useIframe = false,\n    compact = false,\n    comment = [],\n    isBlock = false,\n}) => {\n    return (\n        <div className={`w-full overflow-hidden ${className}`}>\n            <PreviewContent link={link} prePath={prePath} isBlock={isBlock} />\n\n            {useIframe ? (\n                <div className=\"w-full my-4 border rounded-2xl border-zinc-400 dark:border-zinc-700\">\n                    <div className=\"relative w-full h-[100dvh] overflow-hidden\">\n                        <iframe\n                            title={link}\n                            src={`${prePath}/preview/${link}`}\n                            className=\"w-full h-full overflow-y-auto list-none\"\n                            style={{\n                                border: \"none\",\n                                transform: \"scale(0.95)\",\n                            }}\n                        />\n                    </div>\n                </div>\n            ) : (\n                <div\n                    className={`p-2 md:p-8 flex justify-center items-center relative border rounded-2xl my-4 border-zinc-400 dark:border-zinc-800 not-prose ${compact ? \"min-h-[100px]\" : \"min-h-[400px]\"} ${isBlock ? \"md:p-0\" : \"\"\n                    }`}\n                >\n                    {children}\n                </div>\n            )}\n            {comment.length > 0 && (\n                <div className=\"flex flex-wrap gap-3 mt-6\">\n                    {comment.map((text, index) => (\n                        <div\n                            key={index}\n                            className=\"px-4 py-2 text-sm font-medium bg-purple-100 dark:bg-purple-950/30 rounded-lg text-purple-700 dark:text-purple-300 border border-purple-200 dark:border-purple-800/50 shadow-xs hover:bg-purple-200/70 dark:hover:bg-purple-950/50 transition-colors\"\n                        >\n                            {text}\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a preview with a refresh button.", "completion": "```tsx\nimport React, { useState, FC } from \"react\";\nimport { Preview } from \"./preview\";\nimport { RefreshButton } from \"./refresh-button\";\n\ninterface PreviewClientProps {\n    children: React.ReactNode;\n    className?: string;\n    isPremium?: boolean;\n    link: string;\n    useIframe?: boolean;\n    height?: string;\n    compact?: boolean;\n    comment?: string[];\n}\n\nexport const PreviewClient: FC<PreviewClientProps> = (props) => {\n    const [key, setKey] = useState<number>(0);\n\n    const handleRefresh = (): void => {\n        setKey((prev: number) => prev + 1);\n    };\n\n    return (\n        <div className=\"relative\">\n            <RefreshButton onRefresh={handleRefresh} />\n            <div key={key} className=\"overflow-auto h-full\">\n                <Preview {...props} className=\"w-full h-full\" />\n            </div>\n        </div>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a link preview using an iframe or block format.", "completion": "```tsx\nimport React, { useEffect, useState, useRef, FormEvent } from \"react\";\nimport { Button, DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui\";\nimport { ArrowUpRight, Copy, Check, CheckCheck, Terminal, ChevronDown, completion } from \"lucide-react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport ShadcnIcon from \"../icons/shadcn\";\n\ninterface PreviewContentProps {\n    link: string;\n    prePath: string;\n    isBlock?: boolean;\n}\n\ninterface ParticleProps {\n    buttonRef: React.RefObject<HTMLButtonElement>;\n}\n\nconst SuccessParticles: React.FC<ParticleProps> = ({ buttonRef }) => {\n    const rect = buttonRef.current?.getBoundingClientRect();\n    if (!rect) return null;\n\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n\n    const particles = Array.from({ length: 6 }, (_, index) => ({\n        id: `particle-${index}-${Math.random().toString(36).substr(2, 9)}`,\n        index,\n    }));\n\n    return (\n        <AnimatePresence>\n            {particles.map((particle) => (\n                <motion.div\n                    key={particle.id}\n                    className=\"fixed w-1 h-1 bg-black dark:bg-white rounded-full\"\n                    style={{ left: centerX, top: centerY }}\n                    initial={{\n                        scale: 0,\n                        x: 0,\n                        y: 0,\n                    }}\n                    animate={{\n                        scale: [0, 1, 0],\n                        x: [\n                            0,\n                            (particle.index % 2 ? 1 : -1) *\n                                (Math.random() * 50 + 20),\n                        ],\n                        y: [0, -Math.random() * 50 - 20],\n                    }}\n                    transition={{\n                        duration: 0.6,\n                        delay: particle.index * 0.1,\n                        ease: \"easeOut\",\n                    }}\n                />\n            ))}\n        </AnimatePresence>\n    );\n};\n\nconst PreviewContent: React.FC<PreviewContentProps> = ({ link, prePath, isBlock }) => {\n    /*... existing completion ...*/\n\n    return (\n        /*... existing completion ...*/\n    );\n};\n\nexport default PreviewContent;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a customizable Next.js logo SVG using Tailwind CSS.", "completion": "```tsx\nimport React from 'react';\nimport type { SVGProps } from 'react';\n\nconst Nextjs: React.FC<SVGProps<SVGSVGElement>> = (props) => (\n  <svg\n    className=\"w-4 h-4 fill-current\"\n    viewBox=\"0 0 180 180\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <mask\n      id=\"mask0_408_139\"\n      style={{ maskType: 'alpha' }}\n      maskUnits=\"userSpaceOnUse\"\n      x={0}\n      y={0}\n      width={180}\n      height={180}\n    >\n      <circle cx={90} cy={90} r={90} fill=\"black\" />\n    </mask>\n    <g mask=\"url(#mask0_408_139)\">\n      <circle\n        cx={90}\n        cy={90}\n        r={87}\n        fill=\"black\"\n        stroke=\"white\"\n        strokeWidth={6}\n      />\n      <path\n        d=\"M149.508 157.52L69.142 54H54V125.97H66.1136V69.3836L139.999 164.845C143.333 162.614 146.509 160.165 149.508 157.52Z\"\n        fill=\"url(#paint0_linear_408_139)\"\n      />\n      <rect\n        x={115}\n        y={54}\n        width={12}\n        height={72}\n        fill=\"url(#paint1_linear_408_139)\"\n      />\n    </g>\n    <defs>\n      <linearGradient\n        id=\"paint0_linear_408_139\"\n        x1={109}\n        y1={116.5}\n        x2={144.5}\n        y2={160.5}\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"white\" />\n        <stop offset={1} stopColor=\"white\" stopOpacity={0} />\n      </linearGradient>\n      <linearGradient\n        id=\"paint1_linear_408_139\"\n        x1={121}\n        y1={54}\n        x2={120.799}\n        y2={106.875}\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"white\" />\n        <stop offset={1} stopColor=\"white\" stopOpacity={0} />\n      </linearGradient>\n    </defs>\n  </svg>\n);\n\nexport default Nextjs;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a customizable confetti outline SVG icon.", "completion": "```tsx\nimport { SVGProps } from \"react\";\n\nconst ConfettiOutline = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"w-6 h-6\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            {...props}\n        >\n            <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M15.602 2.4c-.22-.22-.497-.21-.648-.19c-.144.02-.316.068-.48.115l-.125.035l-.103-.064a3.4 3.4 0 0 0-.42-.24c-.149-.064-.4-.138-.666.001c-.26.137-.345.381-.38.537a4 4 0 0 0-.06.487l-.01.127v.01l-.112.093c-.133.11-.272.223-.37.33c-.104.114-.264.327-.223.625c.042.307.265.466.404.544c.126.07.291.13.446.188l.109.04l.04.109c.057.154.118.32.188.446c.077.14.237.362.544.404c.297.04.51-.12.624-.224c.108-.098.221-.236.331-.37l.092-.111h.01l.128-.01c.168-.014.345-.028.487-.06c.155-.035.4-.12.537-.38c.139-.265.065-.518 0-.667a3.4 3.4 0 0 0-.24-.42l-.064-.102l.036-.126a3.5 3.5 0 0 0 .114-.479c.02-.152.03-.428-.19-.648m-.9.9l-.078.022l-.02.006a1 1 0 0 1-.397.047a.9.9 0 0 1-.37-.155l-.018-.011l-.1-.064l-.011.141l-.002.022a1 1 0 0 1-.092.384a1 1 0 0 1-.263.294L13.334 4l-.09.075l.076.029l.02.006c.071.026.23.082.35.202s.176.278.201.35l.007.02l.029.077l.075-.091l.013-.017c.051-.063.151-.188.295-.263a1 1 0 0 1 .384-.092l.022-.002l.14-.01l-.063-.102l-.011-.017a.9.9 0 0 1-.155-.37a1 1 0 0 1 .047-.397l.006-.02z\"\n            ></path>\n            {/* ... remaining paths */}\n        </svg>\n    );\n}\n\nexport default ConfettiOutline;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a customizable arrow SVG icon.", "completion": "```tsx\nimport React, { SVGProps, ForwardedRef, forwardRef } from 'react';\n\ntype Arrow25Props = SVGProps<SVGSVGElement>;\n\nconst Arrow25 = forwardRef<SVGSVGElement, Arrow25Props>(\n  (props: Arrow25Props, forwardedRef: ForwardedRef<SVGSVGElement>) => (\n    <svg\n      className=\"w-10 h-56 fill-current text-gray-800\"\n      viewBox=\"0 0 38 227\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={forwardedRef}\n      {...props}\n    >\n      <title>Arrow</title>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M0.0822469 0.227534C0.0822469 0.361804 0.793904 1.27486 1.65324 2.28189C7.8163 9.45194 17.9806 26.1418 22.8681 37.0983C25.8355 43.7447 28.8029 53.9492 30.5216 63.2676C33.4487 79.2055 34.9526 102.837 34.0127 118.184C32.5491 141.816 27.5945 166.361 20.2901 185.978C19.4039 188.287 17.2959 193.51 15.5906 197.552C13.2812 203.057 12.4621 204.655 12.3278 204.077C12.2607 203.621 11.9384 201.633 11.643 199.673C10.7971 194.061 9.22613 186.609 8.51449 184.608C7.69544 182.46 6.71526 181.842 5.45311 182.688C4.79965 183.127 4.67882 185.526 5.09059 189.885C6.23189 201.58 6.55416 218.887 5.77538 224.339C5.57398 225.775 5.61424 225.936 6.29902 226.192C7.76258 226.715 8.6085 225.802 9.03817 223.197C9.1993 222.083 9.29329 221.989 10.3406 221.989C11.1597 221.989 11.643 221.734 12.2607 220.982C12.7172 220.431 13.1066 219.773 13.1066 219.545C13.1066 218.928 17.2824 213.382 20.9883 209.112C22.7204 207.125 27.0574 202.56 30.6693 198.948C37.45 192.141 37.7723 191.684 36.8995 190.046C36.4698 189.227 34.9794 188.77 33.9724 189.133C32.9654 189.522 19.8873 202.654 16.6916 206.508C15.3892 208.105 14.0868 209.663 13.8182 209.931C13.2946 210.482 13.4288 210.187 18.4775 197.74C23.9154 184.245 26.5337 176.323 29.2057 165.112C33.5696 146.663 35.7582 130.242 36.1207 112.639C36.4832 96.1505 34.6169 74.9626 31.4884 60.3539C28.9775 48.6187 26.3323 41.0592 21.606 31.7946C15.7383 20.4218 6.3796 5.97433 1.69352 1.06003C0.753621 0.120131 0.0688477 -0.282687 0.0688477 0.214114L0.0822469 0.227534Z\"\n      />\n    </svg>\n  )\n);\nArrow25.displayName = 'Arrow25';\n\nexport default Arrow25;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a confetti outline icon in a React application.", "completion": "```tsx\nimport React, { SVGProps, FC } from \"react\";\n\ninterface Props extends SVGProps<SVGSVGElement> {}\n\nconst Motion: FC<Props> = ({ className, ...props }) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 1103 386\"\n        className={`w-5 h-5 ${className}`}\n        fill=\"none\"\n        stroke=\"currentColor\"\n        {...props}\n    >\n        <path\n            fill=\"#FFF312\"\n            d=\"M416.473 0 198.54 385.66H0L170.17 84.522C196.549 37.842 262.377 0 317.203 0Zm486.875 96.415c0-53.249 44.444-96.415 99.27-96.415 54.826 0 99.27 43.166 99.27 96.415 0 53.248-44.444 96.415-99.27 96.415-54.826 0-99.27-43.167-99.27-96.415ZM453.699 0h198.54L434.306 385.66h-198.54Zm234.492 0h198.542L716.56 301.138c-26.378 46.68-92.207 84.522-147.032 84.522h-99.27Z\"\n        />\n    </svg>\n);\n\nexport default Motion;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a forward-ref SVG arrow icon styled with Tailwind CSS.", "completion": "```tsx\nimport * as React from \"react\";\nimport type { SVGProps } from \"react\";\n\nconst TailwindCSS: React.FC<SVGProps<SVGSVGElement>> = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        className=\"w-6 h-6\"\n        viewBox=\"0 0 256 154\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        preserveAspectRatio=\"xMidYMid\"\n        {...props}\n    >\n        <defs>\n            <linearGradient\n                x1=\"-2.778%\"\n                y1=\"32%\"\n                x2=\"100%\"\n                y2=\"67.556%\"\n                id=\"gradient\"\n            >\n                <stop stopColor=\"#2298BD\" offset=\"0%\" />\n                <stop stopColor=\"#0ED7B5\" offset=\"100%\" />\n            </linearGradient>\n        </defs>\n        <path\n            d=\"M128 0C93.867 0 72.533 17.067 64 51.2 76.8 34.133 91.733 27.733 108.8 32c9.737 2.434 16.697 9.499 24.401 17.318C145.751 62.057 160.275 76.8 192 76.8c34.133 0 55.467-17.067 64-51.2-12.8 17.067-27.733 23.467-44.8 19.2-9.737-2.434-16.697-9.499-24.401-17.318C174.249 14.743 159.725 0 128 0ZM64 76.8C29.867 76.8 8.533 93.867 0 128c12.8-17.067 27.733-23.467 44.8-19.2 9.737 2.434 16.697 9.499 24.401 17.318C81.751 138.857 96.275 153.6 128 153.6c34.133 0 55.467-17.067 64-51.2-12.8 17.067-27.733 23.467-44.8 19.2-9.737-2.434-16.697-9.499-24.401-17.318C110.249 91.543 95.725 76.8 64 76.8Z\"\n            fill=\"url(#gradient)\"\n        />\n    </svg>\n);\n\nexport default TailwindCSS;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a Motion SVG icon using Tailwind CSS for styling.", "completion": "```tsx\nimport React from 'react';\n\ninterface IXIconProps {\n    className?: string;\n}\n\nconst XIcon: React.FC<IXIconProps> = ({ className }) => {\n    return (\n        <svg\n            viewBox=\"0 0 24 24\"\n            aria-hidden=\"true\"\n            className={`${className} fill-current`}\n        >\n            <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n        </svg>\n    );\n}\n\nexport default XIcon;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a customizable compass icon with optional styling.", "completion": "```tsx\nimport React, { FC } from 'react';\n\ninterface CompassOutlineProps extends React.SVGProps<SVGSVGElement> {\n    className?: string;\n}\n\nexport const CompassOutline: FC<CompassOutlineProps> = ({ className, ...props }) => {\n    return (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 24 24\" \n            className={`svg-icon ${className}`} \n            {...props}\n        >\n            <title>Compass</title>\n            {/* Icon from Solar by 480 Design - https://creativecommons.org/licenses/by/4.0/ */}\n            <path \n                fill=\"currentColor\" \n                fillRule=\"evenodd\" \n                d=\"M11.943 1.25h.114c2.309 0 4.118 0 5.53.19c1.444.194 2.584.6 3.479 1.494c.895.895 1.3 2.035 1.494 3.48c.19 1.411.19 3.22.19 5.529v.114c0 2.309 0 4.118-.19 5.53c-.194 1.444-.6 2.584-1.494 3.479c-.895.895-2.035 1.3-3.48 1.494c-1.411.19-3.22.19-5.529.19h-.114c-2.309 0-4.118 0-5.53-.19c-1.444-.194-2.584-.6-3.479-1.494c-.895-.895-1.3-2.035-1.494-3.48c-.19-1.411-.19-3.22-.19-5.529v-.114c0-2.309 0-4.118.19-5.53c.194-1.444.6-2.584 1.494-3.479c.895-.895 2.035-1.3 3.48-1.494c1.411-.19 3.22-.19 5.529-.19m-5.33 1.676c-1.278.172-2.049.5-2.618 1.069c-.57.57-.897 1.34-1.069 2.619c-.174 1.3-.176 3.008-.176 5.386s.002 4.086.176 5.386c.172 1.279.5 2.05 1.069 2.62c.57.569 1.34.896 2.619 1.068c1.3.174 3.008.176 5.386.176s4.086-.002 5.386-.176c1.279-.172 2.05-.5 2.62-1.069c.569-.57.896-1.34 1.068-2.619c.174-1.3.176-3.008.176-5.386s-.002-4.086-.176-5.386c-.172-1.279-.5-2.05-1.069-2.62c-.57-.569-1.34-.896-2.619-1.068c-1.3-.174-3.008-.176-5.386-.176s-4.086.002-5.386.176m7.236 6.255c-.605.16-1.42.485-2.594.955c-.542.217-.643.268-.717.333a1 1 0 0 0-.07.07c-.064.073-.115.174-.332.716c-.47 1.174-.794 1.99-.955 2.594c-.167.63-.085.791-.058.83a.8.8 0 0 0 .198.198c.039.027.2.109.83-.058c.605-.16 1.42-.485 2.595-.955c.541-.217.642-.268.716-.333a1 1 0 0 0 .07-.07c.064-.073.115-.174.332-.716c.47-1.174.794-1.99.955-2.594c.167-.63.085-.791.058-.83a.8.8 0 0 0-.198-.198c-.039-.027-.2-.109-.83.058m-.384-1.45c.69-.182 1.436-.271 2.057.15c.234.16.437.363.596.597c.422.621.333 1.367.15 2.057c-.186.705-.546 1.605-.991 2.717l-.02.05l-.034.085c-.163.409-.307.771-.564 1.064a2 2 0 0 1-.208.208c-.293.257-.655.401-1.065.564l-.083.034l-.05.02c-1.113.445-2.013.805-2.718.992c-.69.182-1.436.271-2.057-.15a2.3 2.3 0 0 1-.596-.597c-.422-.621-.333-1.367-.15-2.057c.186-.705.546-1.605.991-2.717l.20-.05l.034-.085c.163-.409.307-.771.564-1.064q.097-.11.208-.208c.293-.257.655-.401 1.065-.564l.083-.034l.05-.02c1.113-.445 2.013-.805 2.718-.992\"\n                clipRule=\"evenodd\" \n            />\n        </svg>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for an SVG icon with customizable properties and an optional title.", "completion": "```tsx\nimport type { SVGProps } from \"react\";\n\nexport const ArrowRightBroken: React.FC<SVGProps<SVGSVGElement>> = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"w-4 h-4\"\n            viewBox=\"0 0 24 24\"\n            {...props}\n        >\n            <title>Arrow Right Down Broken</title>\n            <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"1.5\"\n                d=\"M18 18H9m9 0V9m0 9l-6.5-6.5M6 6l2.5 2.5\"\n            />\n        </svg>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a compass icon using SVG and Tailwind CSS.", "completion": "```tsx\nimport React, { SVGProps } from \"react\";\n\ninterface Props extends SVGProps<SVGSVGElement> {}\n\nconst ReactIcon: React.FC<Props> = (props: Props) => (\n  <svg\n    viewBox=\"0 0 256 228\"\n    className=\"w-4 h-4\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    preserveAspectRatio=\"xMidYMid\"\n    {...props}\n  >\n    <path\n      d=\"M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621 6.238-30.281 2.16-54.676-11.769-62.708-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848 155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233 50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165 167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266 13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923 168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586 13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488 29.348-9.723 48.443-25.443 48.443-41.52 0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345-3.24-10.257-7.612-21.163-12.963-32.432 5.106-11 9.31-21.767 12.459-31.957 2.619.758 5.16 1.557 7.61 2.4 23.69 8.156 38.14 20.213 38.14 29.504 0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787-1.524 8.219-4.59 13.698-8.382 15.893-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246 12.376-1.098 24.068-2.894 34.671-5.345.522 2.107.986 4.173 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994 7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863-6.35-5.437-9.555-10.836-9.555-15.216 0-9.322 13.897-21.212 37.076-29.293 2.813-.98 5.757-1.905 8.812-2.773 3.204 10.42 7.406 21.315 12.477 32.332-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789 8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152 7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793 2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433 4.902.192 9.899.29 14.978.29 5.218 0 10.376-.117 15.453-.343-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026 347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815 329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627 310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695 358.489 358.489 0 0 1 11.036 20.54 329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026-.344 1.668-.73 3.367-1.15 5.09-10.622-2.452-22.155-4.275-34.23-5.408-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86-22.86-10.235-22.86-22.86 10.235-22.86 22.86-22.86Z\"\n      fill=\"#00D8FF\"\n    />\n  </svg>\n);\nexport default ReactIcon;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a downward-facing broken right arrow SVG icon.", "completion": "```tsx\nimport React, { SVGProps, FC } from \"react\";\n\ninterface IV0Props extends SVGProps<SVGSVGElement> {}\n\nconst V0: FC<IV0Props> = (props: IV0Props) => (\n    <svg\n        className=\"h-5 w-5\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        strokeLinejoin=\"round\"\n        viewBox=\"0 0 16 16\"\n        {...props}\n    >\n        <path\n            className=\"fill-current text-white\"\n            clipRule=\"evenodd\"\n            d=\"M9.50321 5.5H13.2532C13.3123 5.5 13.3704 5.5041 13.4273 5.51203L9.51242 9.42692C9.50424 9.36912 9.5 9.31006 9.5 9.25L9.5 5.5L8 5.5L8 9.25C8 10.7688 9.23122 12 10.75 12H14.5V10.5L10.75 10.5C10.6899 10.5 10.6309 10.4958 10.5731 10.4876L14.4904 6.57028C14.4988 6.62897 14.5032 6.68897 14.5032 6.75V10.5H16.0032V6.75C16.0032 5.23122 14.772 4 13.2532 4H9.50321V5.5ZM0 5V5.00405L5.12525 11.5307C5.74119 12.3151 7.00106 11.8795 7.00106 10.8822V5H5.50106V9.58056L1.90404 5H0Z\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default V0;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a responsive navigation menu with desktop and mobile versions.", "completion": "```tsx\n\"use strict\";\n\nimport { useState } from \"react\";\nimport { useRouter } from 'next/router';\nimport type { NavSection } from \"@/types/navigation\";\nimport { DesktopNav } from \"./DesktopNav\";\nimport { MobileNav } from \"./MobileNav\";\n\ninterface ComponentNavProps {\n    sections: NavSection[];\n}\n\nconst ComponentNav: React.FC<ComponentNavProps> = ({ sections }) => {\n    const { pathname } = useRouter();\n    const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n    const totalItems = sections.reduce(\n        (acc, section) => acc + section.items.length,\n        0\n    );\n\n    const currentPage = sections\n        .flatMap((section) => section.items)\n        .find((item) => {\n            if (item.href === \"/docs\") {\n                return (\n                    pathname === \"/docs\" || pathname === \"/docs/introduction\"\n                );\n            }\n            if (item.href === \"/docs/components/block/\") {\n                return pathname.startsWith(\"/docs/components/block\");\n            }\n            if (item.href.includes(\"/docs/components/\")) {\n                return pathname === item.href;\n            }\n            return pathname === item.href;\n        });\n\n    const handleExpandToggle = (): void => setIsExpanded(!isExpanded);\n    const handleItemClick = (): void => setIsExpanded(false);\n\n    return (\n        <>\n            <DesktopNav sections={sections} pathname={pathname} />\n            <MobileNav\n                sections={sections}\n                pathname={pathname}\n                isExpanded={isExpanded}\n                currentPage={currentPage}\n                totalItems={totalItems}\n                onExpandToggle={handleExpandToggle}\n                onItemClick={handleItemClick}\n            />\n        </>\n    );\n}\n\nexport default ComponentNav;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a mobile navigation menu with expandable sections and Tailwind CSS styling.", "completion": "```tsx\nimport Link from \"next/link\";\nimport { X } from \"lucide-react\";\nimport type { NavSection } from \"@/config/navigation\";\n\ninterface MobileNavProps {\n    sections: NavSection[];\n    pathname: string;\n    isExpanded: boolean;\n    currentPage?: { title: string };\n    totalItems: number;\n    onExpandToggle: () => void;\n    onItemClick: () => void;\n}\n\nexport const MobileNav: React.FC<MobileNavProps> = ({\n    sections,\n    pathname,\n    isExpanded,\n    currentPage,\n    totalItems,\n    onExpandToggle,\n    onItemClick,\n}) => {\n    return (\n        <div className=\"md:hidden fixed bottom-0 left-0 right-0 z-50 flex justify-center items-end px-4 pb-6\">\n            {isExpanded && (\n                <div\n                    className=\"fixed inset-0 bg-black/20 dark:bg-black/40 backdrop-blur-xs transition-opacity duration-300 ease-in-out\"\n                    onClick={onExpandToggle}\n                />\n            )}\n\n            <div\n                className={`max-w-lg transition-all duration-300 ease-in-out \n                ${isExpanded ? \"h-[80vh] rounded-[28px] w-full\" : \"h-12 rounded-[28px] w-1/2\"}\n                bg-linear-to-b from-white/95 via-gray-50/95 to-white/95 \n                dark:from-zinc-900/90 dark:via-zinc-800/90 dark:to-zinc-900/90 \n                shadow-[0_2px_20px_-2px_rgba(0,0,0,0.15)] \n                backdrop-blur-md cursor-pointer \n                border border-[rgba(200,200,200,0.8)] dark:border-[rgba(70,70,70,0.7)]`}\n                onClick={() => !isExpanded && onExpandToggle()}\n            >\n                {isExpanded ? (\n                    <div className=\"h-full flex flex-col\">\n                        <div className=\"flex-1 overflow-y-auto px-4 py-2\">\n                            {sections.map((section) => (\n                                <div key={section.title} className=\"mb-6\">\n                                    <h3 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-2\">\n                                        {section.title}\n                                    </h3>\n                                    <div className=\"space-y-1\">\n                                        {section.items.map((item) => {\n                                            const isActive =\n                                                item.href === \"/docs\"\n                                                    ? pathname === \"/docs\" ||\n                                                      pathname ===\n                                                          \"/docs/introduction\"\n                                                    : item.href ===\n                                                      \"/docs/components/block/\"\n                                                    ? pathname.startsWith(\n                                                          \"/docs/components/block\"\n                                                      )\n                                                    : pathname === item.href;\n                                            return (\n                                                <Link\n                                                    key={item.id}\n                                                    href={\n                                                        item.isComingSoon\n                                                            ? \"#\"\n                                                            : item.href\n                                                    }\n                                                    onClick={onItemClick}\n                                                    className={`${isActive\n                                                        ? item.isLab\n                                                            ? \"bg-purple-500/10 text-purple-700 dark:text-purple-300\"\n                                                            : \"bg-zinc-900 dark:bg-white\"\n                                                        : \"hover:bg-black/5 dark:hover:bg-white/5\"\n                                                    } flex items-center justify-between px-3 py-2 rounded-md ${item.isComingSoon ? \"opacity-70 cursor-not-allowed\" : \"\"}`}\n                                                >\n                                                    <span\n                                                        className={cn(\n                                                            \"text-sm font-medium\",\n                                                            isActive\n                                                                ? item.isLab\n                                                                    ? \"text-purple-700 dark:text-purple-300\"\n                                                                    : \"text-white dark:text-zinc-900\"\n                                                                : \"text-zinc-600 dark:text-zinc-400\"\n                                                        )}\n                                                    >\n                                                        {item.title}\n                                                        {item.isNew &&\n                                                            !isActive && (\n                                                                <span className=\"ml-2 rounded-lg inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-emerald-400/5 via-emerald-500/5 to-teal-500/5 text-emerald-600 dark:text-emerald-400 ring-1 ring-emerald-500/20 dark:ring-emerald-400/20\">\n                                                                    new\n                                                                </span>\n                                                            )}\n                                                        {item.isLab &&\n                                                            !isActive && (\n                                                                <span className=\"ml-2 rounded-xl inline-flex items-center px-2 py-0.5 text-[9px] tracking-wide font-medium uppercase bg-linear-to-r from-purple-400/5 via-purple-500/5 to-purple-500/5 text-purple-600 dark:text-purple-400 ring-1 ring-purple-500/20 dark:ring-purple-400/20\">\n                                                                    lab\n                                                                </span>\n                                                            )}\n                                                    </span>\n                                                    {item.count && (\n                                                        <span className=\"text-xs text-zinc-400\">\n                                                            {item.count}\n                                                        </span>\n                                                    )}\n                                                </Link>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n\n                        <div className=\"p-4 border-t border-zinc-200 dark:border-zinc-800\">\n                            <button\n                                type=\"button\"\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    onExpandToggle();\n                                }}\n                                className=\"w-full flex items-center justify-center p-3 rounded-lg hover:bg-black/5 dark:hover:bg-white/5\"\n                            >\n                                <X className=\"w-4 h-4 text-zinc-500 dark:text-zinc-400\" />\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"flex items-center justify-center h-full gap-1\">\n                        <span className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100 truncate text-center\">\n                            {currentPage?.title}\n                        </span>\n                        <span className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                            {totalItems}\n                        </span>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn navigation component that adapts between mobile and desktop views based on viewport size.", "completion": "```tsx\nimport Link from \"next/link\";\nimport { FC } from 'react';\nimport { cn } from \"@/lib/utils\";\nimport type { NavSection } from \"@/config/navigation\";\n\ninterface DesktopNavProps {\n    sections: NavSection[];\n    pathname: string;\n}\n\nexport const DesktopNav: FC<DesktopNavProps> = ({ sections, pathname }) => (\n    <div className=\"hidden md:block w-full z-40 space-y-4\">\n        {sections.map((section, index) => (\n            <div\n                key={section.title}\n                className={cn(\n                    \"bg-linear-to-b from-white/95 via-gray-50/95 to-white/95 dark:from-zinc-900/90 dark:via-zinc-800/90 dark:to-zinc-900/90 shadow-[0_2px_20px_-2px_rgba(0,0,0,0.15)] backdrop-blur-md border border-[rgba(200,200,200,0.8)] dark:border-[rgba(70,70,70,0.7)] rounded-[28px] p-3\",\n                    index > 0 && \"mt-6\"\n                )}\n            >\n                <div className=\"flex items-center justify-between mb-2\">\n                    <h2 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n                        {section.title}\n                    </h2>\n                </div>\n\n                <nav className=\"space-y-0.5\">\n                    {section.items.map((item) => {\n                        const isActive =\n                            item.href === \"/docs\"\n                                ? pathname === \"/docs\" ||\n                                  pathname === \"/docs/introduction\"\n                                : item.href ===\n                                  \"/docs/components/block/\"\n                                ? pathname.startsWith(\n                                      \"/docs/components/block\"\n                                  )\n                                : pathname === item.href;\n\n                        return (\n                            <Link\n                                key={item.id}\n                                href={\n                                    item.isComingSoon ? \"#\" : item.href\n                                }\n                            >\n                                <a \n                                    className={cn(\n                                        \"group flex items-center justify-between px-2.5 py-1.5 rounded-xl transition-all duration-200\",\n                                        item.isComingSoon\n                                            ? \"opacity-70 cursor-not-allowed bg-transparent\"\n                                            : isActive\n                                            ? item.isLab\n                                                ? \"bg-purple-500/10 text-purple-700 dark:text-purple-300\"\n                                                : \"bg-zinc-900 dark:bg-white text-white dark:text-zinc-900\"\n                                            : \"hover:bg-black/5 dark:hover:bg-white/5\"\n                                    )}\n                                >\n                                    {/* ... */}\n                                </a>\n                            </Link>\n                        );\n                    })}\n                </nav>\n            </div>\n        ))}\n    </div>\n);\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn mobile navigation component with a textarea and action buttons for user interactions.", "completion": "```tsx\nimport { useState, KeyboardEvent, RefObject, ReactNode, CSSProperties } from 'react';\nimport { useAutoResizeTextarea } from '@/hooks/use-autoResizeTextarea';\nimport {\n    ImageIcon,\n    FileUp,\n    Figma,\n    MonitorIcon,\n    CircleUserRound,\n    ArrowUpIcon,\n    Paperclip,\n    PlusIcon,\n} from 'lucide-react';\n\ninterface ActionButtonProps {\n    icon: ReactNode;\n    label: string;\n}\n\nconst ActionButton = ({ icon, label }: ActionButtonProps): JSX.Element => (\n    <button\n        type=\"button\"\n        className=\"flex items-center gap-2 w-full sm:w-auto px-3 sm:px-4 py-2 bg-neutral-900 hover:bg-neutral-800 rounded-full border border-neutral-800 text-neutral-400 hover:text-white transition-colors whitespace-nowrap flex-shrink-0\"\n    >\n        {icon}\n        <span className=\"text-xs\">{label}</span>\n    </button>\n);\n\ninterface TextareaProps {\n    ref: RefObject<HTMLTextAreaElement>;\n    value: string;\n    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    onKeyDown: (e: KeyboardEvent<HTMLTextAreaElement>) => void;\n    placeholder: string;\n    className: string;\n    style: CSSProperties;\n}\n\nconst Textarea = (props: TextareaProps): JSX.Element => <textarea {...props} />;\n\nconst VercelV0Chat = (): JSX.Element => {\n    const [value, setValue] = useState<string>(\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 60,\n        maxHeight: 200,\n    });\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>): void => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            if (value.trim()) {\n                setValue(\");\n                adjustHeight(true);\n            }\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col items-center w-full max-w-4xl mx-auto p-4 space-y-4 sm:space-y-8\">\n            <h1 className=\"text-2xl sm:text-4xl font-bold text-black dark:text-white text-center\">\n                What can I help you ship?\n            </h1>\n            <div className=\"w-full\">\n                <div className=\"relative bg-neutral-900 rounded-xl border border-neutral-800\">\n                    <div className=\"overflow-y-auto\">\n                        <Textarea\n                            ref={textareaRef}\n                            value={value}\n                            onChange={(e) => {\n                                setValue(e.target.value);\n                                adjustHeight();\n                            }}\n                            onKeyDown={handleKeyDown}\n                            placeholder=\"Ask v0 a question...\"\n                            className={`w-full px-4 py-3 resize-none bg-transparent border-none text-white text-sm focus:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 placeholder:text-neutral-500 placeholder:text-sm min-h-[60px]`}\n                            style={{\n                                overflow: 'hidden',\n                            }}\n                        />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3\">\n                        <div className=\"flex items-center gap-2\">\n                            <button\n                                type=\"button\"\n                                className=\"group p-2 hover:bg-neutral-800 rounded-lg transition-colors flex items-center gap-1\"\n                            >\n                                <Paperclip className=\"w-4 h-4 text-white\" />\n                                <span className=\"text-xs text-zinc-400 hidden group-hover:inline transition-opacity\">\n                                    Attach\n                                </span>\n                            </button>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                            <button\n                                type=\"button\"\n                                className=\"px-2 py-1 rounded-lg text-sm text-zinc-400 transition-colors border border-dashed border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1\"\n                            >\n                                <PlusIcon className=\"w-4 h-4\" />\n                                Project\n                            </button>\n                            <button\n                                type=\"button\"\n                                className={`px-1.5 py-1.5 rounded-lg text-sm transition-colors border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1 ${value.trim() ? 'bg-white text-black' : 'text-zinc-400'}`}\n                            >\n                                <ArrowUpIcon\n                                    className={`w-4 h-4 ${value.trim() ? 'text-black' : 'text-zinc-400'}`}\n                                />\n                                <span className=\"sr-only\">Send</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"mt-4 -mx-4 px-4 sm:mx-0 sm:px-0\">\n                    <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 sm:overflow-x-auto sm:pb-2 sm:justify-center scrollbar-hide\">\n                        <ActionButton\n                            icon={<ImageIcon className=\"w-4 h-4\" />}\n                            label=\"Clone a Screenshot\"\n                        />\n                        <ActionButton\n                            icon={<Figma className=\"w-4 h-4\" />}\n                            label=\"Import from Figma\"\n                        />\n                        <ActionButton\n                            icon={<FileUp className=\"w-4 h-4\" />}\n                            label=\"Upload a Project\"\n                        />\n                        <ActionButton\n                            icon={<MonitorIcon className=\"w-4 h-4\" />}\n                            label=\"Landing Page\"\n                        />\n                        <ActionButton\n                            icon={<CircleUserRound className=\"w-4 h-4\" />}\n                            label=\"Sign Up Form\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default VercelV0Chat;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a hand-drawn title with an optional subtitle and animated SVG background.", "completion": "```tsx\nimport { motion } from \"framer-motion\";\nimport React from \"react\";\n\ninterface HandWrittenTitleProps {\n    title?: string;\n    subtitle?: string;\n}\n\nconst HandWrittenTitle: React.FC<HandWrittenTitleProps> = ({\n    title = \"Hand Written\",\n    subtitle = \"Optional subtitle\",\n}) => {\n    const draw = {\n        hidden: { pathLength: 0, opacity: 0 },\n        visible: {\n            pathLength: 1,\n            opacity: 1,\n            transition: {\n                pathLength: { duration: 2.5, ease: [0.43, 0.13, 0.23, 0.96] },\n                opacity: { duration: 0.5 },\n            },\n        },\n    };\n\n    return (\n        <div className=\"relative w-full max-w-4xl mx-auto py-24\">\n            <div className=\"absolute inset-0\">\n                <motion.svg\n                    width=\"100%\"\n                    height=\"100%\"\n                    viewBox=\"0 0 1200 600\"\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                    className=\"w-full h-full\"\n                >\n                    <title>KokonutUI</title>\n                    <motion.path\n                        d=\"M 950 90 \n                           C 1250 300, 1050 480, 600 520\n                           C 250 520, 150 480, 150 300\n                           C 150 120, 350 80, 600 80\n                           C 850 80, 950 180, 950 180\"\n                        fill=\"none\"\n                        strokeWidth=\"12\"\n                        stroke=\"currentColor\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        variants={draw}\n                        className=\"text-black dark:text-white opacity-90\"\n                    />\n                </motion.svg>\n            </div>\n            <div className=\"relative text-center z-10 flex flex-col items-center justify-center\">\n                <motion.h1\n                    className=\"text-4xl md:text-6xl text-black dark:text-white tracking-tighter flex items-center gap-2\"\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.5, duration: 0.8 }}\n                >\n                    {title}\n                </motion.h1>\n                {subtitle && (\n                    <motion.p\n                        className=\"text-xl text-black/80 dark:text-white/80\"\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        transition={{ delay: 1, duration: 0.8 }}\n                    >\n                        {subtitle}\n                    </motion.p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default HandWrittenTitle;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders an animated gradient background with customizable intensity.", "completion": "```tsx\nimport React, { useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport clsx from \"clsx\";\n\ninterface AnimatedGradientBackgroundProps {\n    className?: string;\n    intensity?: \"subtle\" | \"medium\" | \"strong\";\n}\n\ninterface Beam {\n    x: number;\n    y: number;\n    width: number;\n    length: number;\n    angle: number;\n    speed: number;\n    opacity: number;\n    hue: number;\n    pulse: number;\n    pulseSpeed: number;\n}\n\nconst createBeam = (width: number, height: number): Beam => {\n    const angle = -35 + Math.random() * 10;\n    return {\n        x: Math.random() * width * 1.5 - width * 0.25,\n        y: Math.random() * height * 1.5 - height * 0.25,\n        width: 30 + Math.random() * 60,\n        length: height * 2.5,\n        angle,\n        speed: 0.6 + Math.random() * 1.2,\n        opacity: 0.12 + Math.random() * 0.16,\n        hue: 190 + Math.random() * 70,\n        pulse: Math.random() * Math.PI * 2,\n        pulseSpeed: 0.02 + Math.random() * 0.03,\n    };\n};\n\nconst BeamsBackground: React.FC<AnimatedGradientBackgroundProps> = ({\n    className,\n    intensity = \"strong\",\n}) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const beamsRef = useRef<Beam[]>([]);\n    const animationFrameRef = useRef<number>(0);\n    const MINIMUM_BEAMS = 20;\n\n    const opacityMap = {\n        subtle: 0.7,\n        medium: 0.85,\n        strong: 1,\n    };\n\n    useEffect(() => {\n        // Rest of the useEffect completion remains the same\n    }, [intensity]);\n\n    const classes = clsx(\n        \"relative min-h-screen w-full overflow-hidden bg-neutral-950\",\n        className\n    );\n\n    return (\n        <div className={classes}>\n            <canvas ref={canvasRef} className=\"absolute inset-0\" style={{ filter: \"blur(15px)\" }} />\n            // Rest of the return JSX remains the same\n        </div>\n    );\n};\n\nexport default BeamsBackground;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for an AI prompt input with hand-drawn animation, title, and optional subtitle styled with Tailwind CSS.", "completion": "```tsx\nimport { FC, useState, KeyboardEvent, ReactNode } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { Textarea, Button, DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from \"@/components/ui\";\nimport { useAutoResizeTextarea } from \"@/hooks\";\nimport { ArrowRight, Bot, Check, ChevronDown, Paperclip } from \"lucide-react\";\n\nconst AI_Prompt: FC = () => {\n    const [value, setValue] = useState<string>(\"\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 72,\n        maxHeight: 300,\n    });\n    const [selectedModel, setSelectedModel] = useState<string>(\"GPT-4-1 Mini\");\n\n    const AI_MODELS: string[] = [\n        \"o3-mini\",\n        \"Gemini 2.5 Flash\",\n        \"Claude 3.5 Sonnet\",\n        \"GPT-4-1 Mini\",\n        \"GPT-4-1\",\n    ];\n\n    const MODEL_ICONS: Record<string, ReactNode> = {\n        // Replace the SVGs with your own SVGs\n    };\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            setValue(\"\");\n            adjustHeight(true);\n        }\n    };\n\n    return (\n        <div className=\"w-2/3 py-4 mx-auto\">\n            <div className=\"bg-gray-200 dark:bg-gray-800 rounded-2xl p-1.5\">\n                <div className=\"relative\">\n                    <div className=\"relative flex flex-col\">\n                        <div className=\"overflow-y-auto\" style={{ maxHeight: \"400px\" }}>\n                            <Textarea\n                                id=\"ai-input-15\"\n                                value={value}\n                                placeholder={\"What can I do for you?\"}\n                                className=\"w-full rounded-xl rounded-b-none px-4 py-3 bg-gray-200 dark:bg-gray-800 border-none dark:text-white placeholder-gray-500 dark:placeholder-gray-500 resize-none focus:outline-none min-h-[72px]\"\n                                ref={textareaRef}\n                                onKeyDown={handleKeyDown}\n                                onChange={(e) => {\n                                    setValue(e.target.value);\n                                    adjustHeight();\n                                }}\n                            />\n                        </div>\n                        <div className=\"h-14 bg-gray-200 dark:bg-gray-800 rounded-b-xl flex items-center\">\n                            <div className=\"absolute left-3 right-3 bottom-3 flex items-center justify-between w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                    <DropdownMenu>\n                                        <DropdownMenuTrigger asChild>\n                                            <Button\n                                                variant=\"ghost\"\n                                                className=\"flex items-center gap-1 h-8 pl-1 pr-2 text-xs rounded-md dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n                                            >\n                                                <AnimatePresence mode=\"wait\">\n                                                    <motion.div\n                                                        key={selectedModel}\n                                                        initial={{ opacity: 0, y: -5 }}\n                                                        animate={{ opacity: 1, y: 0 }}\n                                                        exit={{ opacity: 0, y: 5 }}\n                                                        transition={{ duration: 0.15 }}\n                                                        className=\"flex items-center gap-1\"\n                                                    >\n                                                        {MODEL_ICONS[selectedModel]}\n                                                        {selectedModel}\n                                                        <ChevronDown className=\"w-3 h-3 opacity-50\" />\n                                                    </motion.div>\n                                                </AnimatePresence>\n                                            </Button>\n                                        </DropdownMenuTrigger>\n                                        <DropdownMenuContent\n                                            className=\"min-w-[10rem] border-gray-200 dark:border-gray-700 bg-gradient-to-b dark:from-gray-900 dark:via-gray-900 dark:to-gray-800\"\n                                        >\n                                            {AI_MODELS.map((model) => (\n                                                <DropdownMenuItem\n                                                    key={model}\n                                                    onSelect={() => setSelectedModel(model)}\n                                                    className=\"flex items-center justify-between gap-2\"\n                                                >\n                                                    <div className=\"flex items-center gap-2\">\n                                                        {MODEL_ICONS[model] || <Bot className=\"w-4 h-4 opacity-50\" />}\n                                                        <span>{model}</span>\n                                                    </div>\n                                                    {selectedModel === model && <Check className=\"w-4 h-4 text-blue-500\" />}\n                                                </DropdownMenuItem>\n                                            ))}\n                                        </DropdownMenuContent>\n                                    </DropdownMenu>\n                                    <div className=\"h-4 w-px bg-gray-400 dark:bg-gray-600 mx-0.5\" />\n                                    <label\n                                        className=\"rounded-lg p-2 bg-gray-200 dark:bg-gray-800 cursor-pointer hover:bg-gray-300 dark:hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-gray-600 dark:text-gray-400 hover:text-black dark:hover:text-white\"\n                                        aria-label=\"Attach file\"\n                                    >\n                                        <input type=\"file\" className=\"hidden\" />\n                                        <Paperclip className=\"w-4 h-4 transition-colors\" />\n                                    </label>\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"rounded-lg p-2 bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n                                    aria-label=\"Send message\"\n                                    disabled={!value.trim()}\n                                >\n                                    <ArrowRight className={`w-4 h-4 transition-opacity duration-200 ${value.trim() ? 'text-black dark:text-white' : 'text-gray-400 dark:text-gray-600'}`} />\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AI_Prompt;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that features an animated gradient background with adjustable light beams.", "completion": "```tsx\nimport React, { useState, useEffect, ChangeEvent, FC } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Search, Send, BarChart2, Globe, Video, PlaneTakeoff, AudioLines, Layout, LayoutGrid } from \"lucide-react\";\nimport useDebounce from \"@/hooks/use-debounce\";\n\ninterface Action {\n    id: string;\n    label: string;\n    icon: JSX.Element;\n    description?: string;\n    short?: string;\n    end?: string;\n}\n\ninterface IActionSearchBarProps {\n    actions?: Action[];\n    defaultOpen?: boolean;\n}\n\nconst allActionsSample: Action[] = [\n    // your sample data here...\n];\n\nconst ActionSearchBar: FC<IActionSearchBarProps> = ({ actions = allActionsSample, defaultOpen = false }) => {\n    const [query, setQuery] = useState<string>(\"\");\n    const [isFocused, setIsFocused] = useState<boolean>(defaultOpen);\n    const debouncedQuery = useDebounce(query, 200);\n    const [result, setResult] = useState<Action[] | null>(null);\n\n    useEffect(() => {\n        if (!isFocused) {\n            setResult(null);\n            return;\n        }\n\n        if (!debouncedQuery) {\n            setResult(actions);\n            return;\n        }\n\n        const normalizedQuery = debouncedQuery.toLowerCase().trim();\n        const filteredActions = actions.filter((action) => {\n            const searchableText = action.label.toLowerCase();\n            return searchableText.includes(normalizedQuery);\n        });\n\n        setResult(filteredActions);\n    }, [debouncedQuery, isFocused, actions]);\n\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setQuery(e.target.value);\n    };\n\n    const handleFocus = () => setIsFocused(true);\n\n    // Rest of your component logic...\n\n    return (\n        // Your component JSX...\n    );\n}\n\nexport default ActionSearchBar;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a responsive grid of Bento items with icons and descriptions.", "completion": "```tsx\nimport { FC, ReactNode } from \"react\";\nimport { Home, MapPin, Compass, Building, Heart, HomeIcon, Camera } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Card, CardHeader, CardContent, CardFooter } from \"@/components/ui/card\";\n\ninterface BentoItem {\n    title: string;\n    description: string;\n    icon: ReactNode;\n    status?: string;\n    tags?: string[];\n    meta?: string;\n    cta?: string;\n    colSpan?: number;\n    hasPersistentHover?: boolean;\n}\n\ninterface BentoGridProps {\n    items: BentoItem[];\n}\n\nconst BentoGrid: FC<BentoGridProps> = ({ items }) => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 p-4 max-w-7xl mx-auto\">\n        {items.map((item, index) => (\n            <Link key={index} href=\"https://kokonutui.com\" className={`col-span-${item.colSpan || 1} ${item.colSpan === 2 ? \"md:col-span-2\" : \"\"}`}>\n                <Card className={`group relative h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 will-change-transform overflow-hidden ${item.hasPersistentHover ? \"shadow-md -translate-y-0.5\" : \"\"}`}>\n                    <div className={`absolute inset-0 ${item.hasPersistentHover ? \"opacity-100\" : \"opacity-0 group-hover:opacity-100\"} transition-opacity duration-300`}>\n                        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.05)_1px,transparent_1px)] dark:bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.02)_1px,transparent_1px)] bg-[length:4px_4px]\" />\n                    </div>\n\n                    <CardHeader className=\"relative space-y-0 p-4\">\n                        <div className=\"flex items-center justify-between\">\n                            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-black/5 dark:bg-white/10\">\n                                {item.icon}\n                            </div>\n                            <span className=\"text-xs font-medium px-2 py-1 rounded-md bg-black/5 dark:bg-white/10 text-gray-600 dark:text-gray-300\">\n                                {item.status || \"Active\"}\n                            </span>\n                        </div>\n                    </CardHeader>\n\n                    <CardContent className=\"relative space-y-2 p-4 pt-0\">\n                        <h3 className=\"font-medium text-gray-900 dark:text-gray-100 tracking-tight text-[15px]\">\n                            {item.title}\n                            <span className=\"ml-2 text-xs text-gray-500 dark:text-gray-400 font-normal\">\n                                {item.meta}\n                            </span>\n                        </h3>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300 leading-snug font-[425]\">\n                            {item.description}\n                        </p>\n                    </CardContent>\n\n                    <CardFooter className=\"relative p-4\">\n                        <div className=\"flex items-center justify-between w-full\">\n                            <div className=\"flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400\">\n                                {item.tags?.map((tag, tagIndex) => (\n                                    <span key={tagIndex} className=\"px-2 py-1 rounded-md bg-black/5 dark:bg-white/10 backdrop-blur-xs transition-all duration-200\">\n                                        #{tag}\n                                    </span>\n                                ))}\n                            </div>\n                            <span className=\"text-xs text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                {item.cta || \"Explore â†’\"}\n                            </span>\n                        </div>\n                    </CardFooter>\n\n                    <div className={`absolute inset-0 -z-10 rounded-xl p-px bg-linear-to-br from-transparent via-gray-200/70 to-transparent dark:via-white/10 ${item.hasPersistentHover ? \"opacity-100\" : \"opacity-0 group-hover:opacity-100\"} transition-opacity duration-300`} />\n                </Card>\n            </Link>\n        ))}\n    </div>\n);\n\nexport default BentoGrid;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a grid of collection cards with a title and optional items.", "completion": "```tsx\nimport React from 'react';\nimport Card08, { Card08Props } from \"./card/card-08\";\n\ninterface CardGridProps {\n    items?: Card08Props[];\n    gridTitle?: string;\n}\n\nconst collections: Card08Props[] = [\n    // ...existing collections data\n];\n\nconst CardGrid: React.FC<CardGridProps> = ({\n    items = collections,\n    gridTitle = \"Collections 2025 - Summer\",\n}) => {\n    if (!items || items.length === 0) {\n        return (\n            <div className=\"flex items-center justify-center h-64\">\n                <p className=\"text-lg text-gray-500 dark:text-gray-400\">\n                    No items to display.\n                </p>\n            </div>\n        );\n    }\n\n    return (\n        <section className=\"w-full py-12 md:py-16 lg:py-20\">\n            <div className=\"container mx-auto px-4 md:px-6\">\n                {gridTitle && (\n                    <h2 className=\"mb-2 tracking-tighter text-3xl font-bold text-left text-gray-900 dark:text-gray-100 sm:text-4xl\">\n                        {gridTitle}\n                    </h2>\n                )}\n                <p className=\"mb-8 text-lg text-left text-gray-900 dark:text-gray-100 tracking-tight\">\n                    Explore the latest collections for the summer season.\n                </p>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 place-items-center\">\n                    {items.map((item, index) => (\n                        <Card08\n                            key={`${item.href}-${item.title}-${index}`}\n                            title={item.title}\n                            subtitle={item.subtitle}\n                            image={item.image}\n                            badge={item.badge}\n                            href={item.href}\n                        />\n                    ))}\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default CardGrid;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a tweet card with author details, content, and optional replies.", "completion": "```tsx\nimport { FunctionComponent } from 'react';\nimport { VerifiedIcon } from 'lucide-react';\nimport Link from 'next/link';\n\ninterface ReplyProps {\n  authorName: string;\n  authorHandle: string;\n  authorImage: string;\n  content: string;\n  isVerified?: boolean;\n  timestamp: string;\n}\n\ninterface TweetCardProps {\n  authorName: string;\n  authorHandle: string;\n  authorImage: string;\n  content: string[];\n  isVerified?: boolean;\n  timestamp: string;\n  reply?: ReplyProps;\n}\n\nconst TweetCard: FunctionComponent<TweetCardProps> = ({\n  authorName,\n  authorHandle,\n  authorImage,\n  content,\n  isVerified,\n  timestamp,\n  reply\n}) => {\n  return (\n    <Link href=\"https://x.com/dorian_baffier/status/1880291036410572934\">\n      <div className=\"min-w-[400px] md:min-w-[500px] max-w-xl p-1.5 rounded-2xl relative overflow-hidden bg-white/5 dark:bg-black/90 backdrop-blur-xl border border-black/10 dark:border-white/10 shadow-md transform-gpu\">\n        <div className=\"w-full p-5 rounded-xl relative text-black/90 dark:text-white shadow-xs\">\n          <div className=\"flex gap-3\">\n            <div className=\"h-10 w-10 rounded-full overflow-hidden\">\n              <img src={authorImage} alt={authorName} className=\"h-full w-full object-cover\" />\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex flex-col\">\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"font-semibold text-black dark:text-white/90 hover:underline cursor-pointer\">{authorName}</span>\n                    {isVerified && <VerifiedIcon className=\"h-4 w-4 text-blue-400\" />}\n                  </div>\n                  <span className=\"text-black dark:text-white/60 text-sm\">@{authorHandle}</span>\n                </div>\n                <button type=\"button\" className=\"h-8 w-8 text-black dark:text-white/80 hover:text-black dark:hover:text-white hover:bg-black/5 dark:hover:bg-white/5 rounded-lg p-1 flex items-center justify-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200\" height=\"1227\" fill=\"none\" viewBox=\"0 0 1200 1227\" className=\"w-4 h-4\">\n                    <title>X</title>\n                    <path fill=\"currentColor\"\n                          d=\"M714.163 519.284 1160.89 0h-105.86L667.137 450.887 357.328 0H0l468.492 681.821L0 1226.37h105.866l409.625-476.152 327.181 476.152H1200L714.137 519.284h.026ZM569.165 687.828l-47.468-67.894-377.686-540.24h162.604l304.797 435.991 47.468 67.894 396.2 566.721H892.476L569.165 687.854v-.026Z\"/>\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-2\">\n            {content.map((item, index) => (\n              <p key={index} className=\"text-black dark:text-white/90 text-base\">{item}</p>\n            ))}\n            <span className=\"text-black dark:text-white/50 text-sm mt-2 block\">{timestamp}</span>\n          </div>\n          {reply && (\n            <div className=\"mt-4 pt-4 border-t border-black/[0.08] dark:border-white/[0.08]\">\n              <div className=\"flex gap-3\">\n                <div className=\"h-10 w-10 rounded-full overflow-hidden\">\n                  <img src={reply.authorImage} alt={reply.authorName} className=\"h-full w-full object-cover\" />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"font-semibold text-black dark:text-white/90 hover:underline cursor-pointer\">{reply.authorName}</span>\n                    {reply.isVerified && <VerifiedIcon className=\"h-4 w-4 text-blue-400\" />}\n                    <span className=\"text-black dark:text-white/60 text-sm\">@{reply.authorHandle}</span>\n                    <span className=\"text-black dark:text-white/60 text-sm\">Â·</span>\n                    <span className=\"text-black dark:text-white/60 text-sm\">{reply.timestamp}</span>\n                  </div>\n                  <p className=\"text-black dark:text-white/80 text-sm mt-1\">{reply.content}</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Link>\n  )\n}\n\nexport default TweetCard;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that renders a dynamic particles background with customizable title and subtitle.", "completion": "```tsx\nimport React, { FC, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { createNoise, Particle } from \"@/lib/utils\";\nimport { COLOR_SCHEME } from \"@/lib/constants\";\n\ninterface ParticlesBackgroundProps {\n  title?: string;\n  subtitle?: string;\n  particleCount?: number;\n  noiseIntensity?: number;\n  particleSize?: { min: number; max: number };\n  className?: string;\n}\n\nconst ParticlesBackground: FC<ParticlesBackgroundProps> = ({\n  title = \"Particles Background\",\n  subtitle = \"Make your website stand out\",\n  particleCount = 2000,\n  noiseIntensity = 0.003,\n  particleSize = { min: 0.5, max: 2 },\n  className,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const noise = createNoise();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const resizeCanvas = () => {\n      const container = canvas.parentElement;\n      if (!container) return;\n\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n    };\n\n    resizeCanvas();\n\n    const particles: Particle[] = Array.from(\n      { length: particleCount },\n      () => ({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        size:\n          Math.random() * (particleSize.max - particleSize.min) +\n          particleSize.min,\n        velocity: { x: 0, y: 0 },\n        life: Math.random() * 100,\n        maxLife: 100 + Math.random() * 50,\n      })\n    );\n\n    const animate = () => {\n      const isDark = document.documentElement.classList.contains(\"dark\");\n      const scheme = isDark ? COLOR_SCHEME.dark : COLOR_SCHEME.light;\n\n      ctx.fillStyle = scheme.background;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      for (const particle of particles) {\n        particle.life += 1;\n        if (particle.life > particle.maxLife) {\n          particle.life = 0;\n          particle.x = Math.random() * canvas.width;\n          particle.y = Math.random() * canvas.height;\n        }\n\n        const n = noise.simplex3(\n          particle.x * noiseIntensity,\n          particle.y * noiseIntensity,\n          Date.now() * 0.0001\n        );\n\n        const angle = n * Math.PI * 4;\n        particle.velocity.x = Math.cos(angle) * 2;\n        particle.velocity.y = Math.sin(angle) * 2;\n\n        particle.x += particle.velocity.x;\n        particle.y += particle.velocity.y;\n\n        if (particle.x < 0) particle.x = canvas.width;\n        if (particle.x > canvas.width) particle.x = 0;\n        if (particle.y < 0) particle.y = canvas.height;\n        if (particle.y > canvas.height) particle.y = 0;\n\n        ctx.fillStyle = scheme.particle.color;\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    window.addEventListener(\"resize\", resizeCanvas);\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\n  }, [particleCount, noiseIntensity, particleSize]);\n\n  return (\n    <div\n      className={`relative w-full h-screen overflow-hidden bg-white dark:bg-black ${className}`}\n    >\n      <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full\" />\n      <div className=\"relative z-10 flex flex-col items-center justify-center w-full h-full\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <h1 className=\"text-6xl md:text-8xl font-bold bg-clip-text text-transparent bg-gradient-to-b from-black to-black/70 dark:from-white dark:to-white/70 drop-shadow-sm\">\n            {title}\n          </h1>\n          <p className=\"text-xl md:text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-b from-black/90 to-black/50 dark:from-white/90 dark:to-white/50\">\n            {subtitle}\n          </p>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default ParticlesBackground;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a customizable background circle with variant options.", "completion": "```tsx\nimport { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport clsx from 'clsx';\n\ninterface BackgroundCirclesProps {\n    title?: string;\n    description?: string;\n    className?: string;\n    variant?: keyof typeof COLOR_VARIANTS;\n}\n\nconst COLOR_VARIANTS = {\n    primary: {\n        border: [\n            'border-emerald-500 border-opacity-60',\n            'border-cyan-400 border-opacity-50',\n            'border-slate-600 border-opacity-30',\n        ],\n        gradient: 'bg-gradient-to-br from-emerald-500 bg-opacity-30',\n    },\n    // remaining variants...\n} as const;\n\nexport const BackgroundCircles: React.FC<BackgroundCirclesProps> = ({\n    title = 'Background Circles',\n    description = 'Optional Description',\n    className,\n    variant = 'octonary',\n}) => {\n    const variantStyles = COLOR_VARIANTS[variant];\n\n    return (\n        <div\n            className={clsx(\n                'relative flex h-screen w-full items-center justify-center overflow-hidden',\n                'bg-white dark:bg-black bg-opacity-5',\n                className\n            )}\n        >\n            {/* existing completion... */}\n        </div>\n    );\n};\n\nexport const DemoCircles: React.FC = () => {\n    const [currentVariant, setCurrentVariant] = useState<keyof typeof COLOR_VARIANTS>('octonary');\n    const variants = Object.keys(COLOR_VARIANTS) as (keyof typeof COLOR_VARIANTS)[];\n\n    const getNextVariant = (): keyof typeof COLOR_VARIANTS => {\n        const currentIndex = variants.indexOf(currentVariant);\n        const nextVariant = variants[(currentIndex + 1) % variants.length];\n        return nextVariant;\n    };\n\n    useEffect(() => {\n        setCurrentVariant(getNextVariant());\n    }, []);\n\n    return (\n        <>\n            <BackgroundCircles variant={currentVariant} />\n            <div className='absolute top-12 right-12'>\n                <button\n                    type='button'\n                    className='bg-slate-950 dark:bg-white text-white dark:text-slate-950 px-4 py-1 rounded-md z-10 text-sm font-medium'\n                    onClick={() => {\n                        setCurrentVariant(getNextVariant());\n                    }}\n                >\n                    Change Variant\n                </button>\n            </div>\n        </>\n    );\n};\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that implements a customizable toolbar with interactive icons and notifications.", "completion": "```tsx\nimport React, { useState, useRef } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Filter, Settings, Download, Share2, LucideIcon, User, Bell, Sun, Edit2, Lock } from \"lucide-react\";\n\ninterface ToolbarItem {\n  id: string;\n  title: string;\n  icon: LucideIcon;\n}\n\ninterface ToolbarProps {\n  className?: string;\n  activeColor?: string;\n  onSearch?: (value: string) => void;\n}\n\nconst Toolbar: React.FC<ToolbarProps> = ({ className, activeColor = \"text-blue-600\", onSearch }) => {\n  const [selected, setSelected] = useState<string | null>(\"filter\");\n  const [isToggled, setIsToggled] = useState(false);\n  const [activeNotification, setActiveNotification] = useState<string | null>(null);\n  const outsideClickRef = useRef(null);\n\n  const toolbarItems: ToolbarItem[] = [\n    { id: \"filter\", title: \"Filter\", icon: Filter },\n    { id: \"settings\", title: \"Settings\", icon: Settings },\n    { id: \"download\", title: \"Download\", icon: Download },\n    { id: \"share\", title: \"Share\", icon: Share2 },\n    { id: \"notifications\", title: \"Notifications\", icon: Bell },\n    { id: \"profile\", title: \"Profile\", icon: User },\n    { id: \"theme\", title: \"Theme\", icon: Sun },\n  ];\n\n  const handleItemClick = (itemId: string) => {\n    setSelected(selected === itemId ? null : itemId);\n    setActiveNotification(itemId);\n    setTimeout(() => setActiveNotification(null), 1500);\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div\n        ref={outsideClickRef}\n        className={`flex items-center space-x-3 p-2 relative bg-background border rounded-xl transition-all duration-200 ${className}`}\n      >\n        <AnimatePresence>\n          {activeNotification && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: -10 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 z-50\"\n            >\n              <div className=\"bg-blue-600 text-white px-3 py-1 rounded-full text-xs\">\n                {\n                  toolbarItems.find(\n                    (item) => item.id === activeNotification\n                  )?.title\n                } clicked!\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        <div className=\"flex items-center space-x-2\">\n          {toolbarItems.map((item) => (\n            <motion.button\n              key={item.id}\n              onClick={() => handleItemClick(item.id)}\n              className={`relative flex items-center rounded-none px-3 py-2 text-sm font-medium transition-colors duration-300 ${selected === item.id ? \"bg-blue-600 text-white rounded-lg\" : \"text-gray-500 hover:bg-gray-200 hover:text-gray-900\"}`}\n            >\n              <item.icon size={16} className={selected === item.id && \"text-white\"} />\n              <AnimatePresence>\n                {selected === item.id && (\n                  <motion.span\n                    initial={{ width: 0, opacity: 0 }}\n                    animate={{ width: \"auto\", opacity: 1 }}\n                    exit={{ width: 0, opacity: 0 }}\n                    transition={{ type: \"spring\", bounce: 0, duration: 0.4 }}\n                    className=\"overflow-hidden\"\n                  >\n                    {item.title}\n                  </motion.span>\n                )}\n              </AnimatePresence>\n            </motion.button>\n          ))}\n\n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={() => setIsToggled(!isToggled)}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-xl border border-blue-600/30 shadow-sm transition-all duration-200 hover:shadow-md hover:bg-blue-600/90 hover:border-blue-600/40 active:border-blue-600/50\"\n          >\n            {isToggled ? (\n              <Edit2 className=\"w-3.5 h-3.5\" />\n            ) : (\n              <Lock className=\"w-3.5 h-3.5\" />\n            )}\n            <span className=\"text-sm font-medium\">\n              {isToggled ? \"On\" : \"Off\"}\n            </span>\n          </motion.button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Toolbar;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that animates text in a matrix style with customizable delays and durations.", "completion": "```tsx\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface LetterState {\n  char: string;\n  isMatrix: boolean;\n  isSpace: boolean;\n}\n\ninterface MatrixTextProps {\n  text?: string;\n  className?: string;\n  initialDelay?: number;\n  letterAnimationDuration?: number;\n  letterInterval?: number;\n}\n\nconst MatrixText: React.FC<MatrixTextProps> = ({\n  text = \"HelloWorld!\",\n  className,\n  initialDelay = 200,\n  letterAnimationDuration = 500,\n  letterInterval = 100,\n}) => {\n  const [letters, setLetters] = useState<LetterState[]>(() =>\n    text.split(\"\").map((char) => ({\n      char,\n      isMatrix: false,\n      isSpace: char === \" \",\n    }))\n  );\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  const getRandomChar = useCallback(\n    () => (Math.random() > 0.5 ? \"1\" : \"0\"),\n    []\n  );\n\n  const animateLetter = useCallback(\n    (index: number) => {\n      if (index >= text.length) return;\n\n      requestAnimationFrame(() => {\n        setLetters((prev) => {\n          const newLetters = [...prev];\n          if (!newLetters[index].isSpace) {\n            newLetters[index] = {\n              ...newLetters[index],\n              char: getRandomChar(),\n              isMatrix: true,\n            };\n          }\n          return newLetters;\n        });\n\n        setTimeout(() => {\n          setLetters((prev) => {\n            const newLetters = [...prev];\n            newLetters[index] = {\n              ...newLetters[index],\n              char: text[index],\n              isMatrix: false,\n            };\n            return newLetters;\n          });\n        }, letterAnimationDuration);\n      });\n    },\n    [getRandomChar, text, letterAnimationDuration]\n  );\n\n  const startAnimation = useCallback(() => {\n    if (isAnimating) return;\n\n    setIsAnimating(true);\n    let currentIndex = 0;\n\n    const animate = () => {\n      if (currentIndex >= text.length) {\n        setIsAnimating(false);\n        return;\n      }\n\n      animateLetter(currentIndex);\n      currentIndex++;\n      setTimeout(animate, letterInterval);\n    };\n\n    animate();\n  }, [animateLetter, text, isAnimating, letterInterval]);\n\n  useEffect(() => {\n    const timer = setTimeout(startAnimation, initialDelay);\n    return () => clearTimeout(timer);\n  }, [startAnimation, initialDelay]);\n\n  const motionVariants = useMemo(\n    () => ({\n      matrix: {\n        color: \"#00ff00\",\n        textShadow: \"0 2px 4px rgba(0, 255, 0, 0.5)\",\n      },\n    }),\n    []\n  );\n\n  return (\n    <div\n      className={`flex min-h-screen items-center justify-center text-black dark:text-white ${className}`}\n      aria-label=\"Matrix text animation\"\n    >\n      <div className=\"h-24 flex items-center justify-center\">\n        <div className=\"flex flex-wrap items-center justify-center\">\n          {letters.map((letter, index) => (\n            <motion.div\n              key={`${index}-${letter.char}`}\n              className=\"font-mono text-4xl md:text-6xl w-[1ch] text-center overflow-hidden\"\n              animate={letter.isMatrix ? \"matrix\" : \"normal\"}\n              variants={motionVariants}\n              transition={{\n                duration: 0.1,\n                ease: \"easeInOut\",\n              }}\n              style={{\n                display: \"inline-block\",\n                fontVariantNumeric: \"tabular-nums\",\n              }}\n            >\n              {letter.isSpace ? \"\\u00A0\" : letter.char}\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MatrixText;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn TopBar component with category buttons, search functionality, and a cart icon.", "completion": "```tsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport Link from 'next/link';\nimport { Search, ShoppingBag, X } from 'lucide-react';\nimport { motion } from 'motion/react';\n\ninterface TopBarProps {\n    cartItemCount: number;\n    onCartClick: () => void;\n    onSearch: (query: string) => void;\n}\n\nconst categories = [\n    'All',\n    'Lighting',\n    'Kitchenware',\n    'Home Decor',\n    'Plants',\n    'Office',\n    'Textiles',\n];\n\nconst TopBar: React.FC<TopBarProps> = ({ cartItemCount, onCartClick, onSearch }) => {\n    const [isSearchOpen, setIsSearchOpen] = useState<boolean>(false);\n    const [selectedCategory, setSelectedCategory] = useState<string>('All');\n    const [isScrolled, setIsScrolled] = useState<boolean>(false);\n    const searchInputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        const handleScroll = () => {\n            setIsScrolled(window.scrollY > 10);\n        };\n        window.addEventListener('scroll', handleScroll);\n        return () => window.removeEventListener('scroll', handleScroll);\n    }, []);\n\n    const handleKeyPress = (e: React.KeyboardEvent) => {\n        if (e.key === 'Escape') {\n            setIsSearchOpen(false);\n            searchInputRef.current?.blur();\n        }\n    };\n\n    return (\n        <div\n            className={`sticky top-0 z-40 transition-all duration-200 \n                ${isScrolled ? 'bg-white/90 dark:bg-zinc-900/90 shadow-sm' : 'bg-white/80 dark:bg-zinc-900/80'} \n                backdrop-blur-sm border-b border-zinc-200 dark:border-zinc-800`}\n        >\n            <div className=\"flex items-center justify-between px-3 h-12\">\n                <Link href=\"https://kokonutui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <a className=\"text-sm font-medium flex-shrink-0\">Shop</a>\n                </Link>\n\n                <div className=\"flex-1 px-8 overflow-x-auto flex items-center justify-center gap-6 scrollbar-none\">\n                    {categories.map((category) => (\n                        <button\n                            type=\"button\"\n                            key={category}\n                            className={`whitespace-nowrap transition-colors \n                                ${selectedCategory === category\n                                    ? 'text-zinc-900 dark:text-white text-sm font-medium'\n                                    : 'text-zinc-500 dark:text-zinc-400 text-sm hover:text-zinc-900 dark:hover:text-white'}`}\n                            onClick={() => setSelectedCategory(category)}\n                        >\n                            {category}\n                        </button>\n                    ))}\n                </div>\n\n                <div className=\"flex items-center gap-1.5 flex-shrink-0\">\n                    <motion.div\n                        className=\"relative overflow-hidden p-1\"\n                        initial={false}\n                        animate={{ width: isSearchOpen ? 'auto' : 0 }}\n                    >\n                        <input\n                            ref={searchInputRef}\n                            type=\"text\"\n                            placeholder=\"Search products...\"\n                            className={`w-48 sm:w-56 bg-zinc-100 dark:bg-zinc-800 rounded-md text-sm px-3 py-1.5 \n                                focus:outline-none focus:ring-1 focus:ring-zinc-300 dark:focus:ring-zinc-700\n                                transition-all duration-200 ${isSearchOpen ? 'opacity-100' : 'opacity-0'}`}\n                            onChange={(e) => onSearch(e.target.value)}\n                            onKeyDown={handleKeyPress}\n                        />\n                        {isSearchOpen && (\n                            <button\n                                type=\"button\"\n                                onClick={() => {\n                                    setIsSearchOpen(false);\n                                    onSearch(\");\n                                }}\n                                className=\"absolute right-2 top-1/2 -translate-y-1/2 p-0.5 hover:bg-zinc-200 \n                                    dark:hover:bg-zinc-700 rounded-full\"\n                            >\n                                <X className=\"w-4 h-4\" />\n                            </button>\n                        )}\n                    </motion.div>\n                    <button\n                        type=\"button\"\n                        onClick={() => setIsSearchOpen(!isSearchOpen)}\n                        className={`p-1.5 rounded-md transition-colors \n                            ${isSearchOpen ? 'bg-zinc-100 dark:bg-zinc-800' : 'hover:bg-zinc-100 dark:hover:bg-zinc-800'} \n                            z-10`}\n                    >\n                        <Search className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={onCartClick}\n                        className=\"p-1.5 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-md relative\"\n                    >\n                        <ShoppingBag className=\"w-4 h-4\" />\n                        {cartItemCount > 0 && (\n                            <motion.span\n                                initial={{ scale: 0.5 }}\n                                animate={{ scale: 1 }}\n                                className=\"absolute -top-1 -right-1 bg-zinc-900 dark:bg-white \n                                    text-white dark:text-zinc-900 text-xs font-medium w-4 h-4 \n                                    flex items-center justify-center rounded-full\"\n                            >\n                                {cartItemCount}\n                            </motion.span>\n                        )}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TopBar;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a user avatar picker with product selection and cart functionality.", "completion": "```tsx\nimport React, { useState } from 'react';\nimport { AnimatePresence } from 'framer-motion';\nimport { ProductGrid } from './product-grid';\nimport { CartDrawer } from './cart-drawer';\nimport { ProductModal } from './product-modal';\nimport { TopBar } from './top-bar';\nimport { Product, CartItem, products } from './data';\n\nconst MinimalShop: React.FC = () => {\n    const [cart, setCart] = useState<CartItem[]>([]);\n    const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n    const [isCartOpen, setIsCartOpen] = useState<boolean>(false);\n    const [searchQuery, setSearchQuery] = useState<string>(\"\");\n\n    const addToCart = (product: Product, quantity: number = 1) => {\n        setCart((prev) => {\n            const exists = prev.find((item) => item.id === product.id);\n            if (exists) {\n                return prev.map((item) =>\n                    item.id === product.id\n                        ? { ...item, quantity: item.quantity + quantity }\n                        : item\n                );\n            }\n            return [...prev, { ...product, quantity }];\n        });\n    };\n\n    const removeFromCart = (productId: string) => {\n        setCart((prev) => prev.filter((item) => item.id !== productId));\n    };\n\n    const filteredProducts = products.filter((product) =>\n        product.name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <div className=\"h-screen bg-gray-50 dark:bg-gray-900\">\n            <TopBar\n                cartItemCount={cart.length}\n                onCartClick={() => setIsCartOpen(true)}\n                onSearch={setSearchQuery}\n            />\n\n            <div className=\"mx-auto px-2 pt-12 pb-16\">\n                <ProductGrid\n                    products={filteredProducts}\n                    onProductSelect={setSelectedProduct}\n                />\n            </div>\n\n            <AnimatePresence>\n                {selectedProduct && (\n                    <ProductModal\n                        product={selectedProduct}\n                        onClose={() => setSelectedProduct(null)}\n                        onAddToCart={(product) => {\n                            addToCart(product);\n                            setSelectedProduct(null);\n                            setIsCartOpen(true);\n                        }}\n                    />\n                )}\n            </AnimatePresence>\n\n            <AnimatePresence>\n                {isCartOpen && (\n                    <CartDrawer\n                        cart={cart}\n                        onClose={() => setIsCartOpen(false)}\n                        onRemoveFromCart={removeFromCart}\n                    />\n                )}\n            </AnimatePresence>\n        </div>\n    );\n}\n\nexport default MinimalShop;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a product modal with an image, details, and quantity selector.", "completion": "```tsx\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { X } from \"heroicons-react\";\nimport { useState } from \"react\";\nimport { Product } from \"./data\";\n\ninterface ProductModalProps {\n  product: Product;\n  onClose: () => void;\n  onAddToCart: (product: Product, quantity: number) => void;\n}\n\nexport const ProductModal: React.FC<ProductModalProps> = ({\n  product,\n  onClose,\n  onAddToCart,\n}) => {\n  const [quantity, setQuantity] = useState<number>(1);\n\n  const handleQuantityChange = (delta: number) => {\n    setQuantity((prev) => Math.max(1, prev + delta));\n  };\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 0.4 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"fixed inset-0 bg-black z-40\"\n        onClick={onClose}\n      />\n      <motion.div\n        layoutId={`product-${product.id}`}\n        initial={{ y: 100, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        exit={{ y: 100, opacity: 0 }}\n        transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n        className=\"fixed inset-x-4 bottom-0 md:inset-[20%] z-50 bg-white dark:bg-zinc-900 rounded-t-xl md:rounded-xl overflow-hidden max-h-[80vh] md:max-h-[500px] shadow-lg\"\n      >\n        <div className=\"h-full md:flex\">\n          {/* Left: Product Image */}\n          <div className=\"relative md:w-2/5\">\n            <img\n              src={product.image}\n              alt={product.name}\n              className=\"w-full h-[200px] md:h-full object-cover\"\n            />\n            <button\n              onClick={onClose}\n              className=\"absolute top-2 right-2 p-1.5 bg-white/80 dark:bg-black/50 backdrop-blur-sm rounded-full hover:bg-white dark:hover:bg-zinc-800 transition\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          {/* Right: Details */}\n          <div className=\"p-4 md:w-3/5 flex flex-col justify-between\">\n            <div>\n              <div className=\"flex justify-between items-start mb-2\">\n                <div>\n                  <h2 className=\"text-sm font-medium\">{product.name}</h2>\n                  <p className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                    {product.category}\n                  </p>\n                </div>\n                <p className=\"text-sm font-medium\">${product.price}</p>\n              </div>\n\n              <p className=\"text-xs text-zinc-600 dark:text-zinc-300 mb-2\">\n                {product.description}\n              </p>\n\n              <div className=\"text-xs space-y-1 text-zinc-500\">\n                <p>SKU: {product.id}</p>\n                <p>Stock: Available</p>\n              </div>\n\n              {/* Quantity Selector */}\n              <div className=\"flex items-center mt-4 gap-2\">\n                <button\n                  onClick={() => handleQuantityChange(-1)}\n                  className=\"w-6 h-6 text-sm bg-zinc-200 dark:bg-zinc-700 text-black dark:text-white rounded hover:bg-zinc-300 dark:hover:bg-zinc-600\"\n                >\n                  -\n                </button>\n                <span className=\"text-sm\">{quantity}</span>\n                <button\n                  onClick={() => handleQuantityChange(1)}\n                  className=\"w-6 h-6 text-sm bg-zinc-200 dark:bg-zinc-700 text-black dark:text-white rounded hover:bg-zinc-300 dark:hover:bg-zinc-600\"\n                >\n                  +\n                </button>\n              </div>\n            </div>\n\n            <button\n              onClick={() => onAddToCart(product, quantity)}\n              className=\"mt-4 py-2 bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 text-xs font-medium rounded-md hover:bg-zinc-800 dark:hover:bg-zinc-100 transition-colors\"\n            >\n              Add {quantity} to Cart\n            </button>\n          </div>\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for file upload with drag-and-drop support, preview, and progress indication.", "completion": "```tsx\nimport React, {\n  useState,\n  useRef,\n  ChangeEvent,\n  DragEvent,\n  KeyboardEvent,\n} from \"react\";\nimport {\n  XMarkIcon,\n  ArrowUpTrayIcon,\n  DocumentIcon,\n} from \"@heroicons/react/24/solid\";\n\ntype FileInputProps = {\n  accept?: string;\n  maxSize?: number;\n};\n\nconst useFileInput = ({ accept = \"*\", maxSize = Infinity }: FileInputProps) => {\n  const [fileName, setFileName] = useState<string | null>(null);\n  const [fileSize, setFileSize] = useState<number>(0);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const clearFile = () => {\n    setFileName(null);\n    setFileSize(0);\n    if (fileInputRef.current) fileInputRef.current.value = \"\";\n  };\n\n  const validateAndSetFile = (file: File) => {\n    if (file.size > maxSize) throw new Error(\"File is too large\");\n    if (accept !== \"*\" && !file.type.match(accept)) {\n      throw new Error(\"File type is not accepted\");\n    }\n    setFileName(file.name);\n    setFileSize(file.size);\n  };\n\n  return {\n    fileName,\n    fileSize,\n    fileInputRef,\n    clearFile,\n    validateAndSetFile,\n  };\n};\n\nconst Input_03: React.FC = () => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [preview, setPreview] = useState<string | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const {\n    fileName,\n    fileSize,\n    fileInputRef,\n    clearFile,\n    validateAndSetFile,\n  } = useFileInput({ accept: \"image/*\", maxSize: 5 * 1024 * 1024 });\n\n  const handleFile = (file: File) => {\n    try {\n      validateAndSetFile(file);\n      simulateUpload(file);\n    } catch (err) {\n      alert((err as Error).message);\n    }\n  };\n\n  const simulateUpload = (file: File) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += 10;\n      setUploadProgress(progress);\n      if (progress >= 100) {\n        clearInterval(interval);\n        if (file.type.startsWith(\"image/\")) {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            setPreview(reader.result as string);\n          };\n          reader.readAsDataURL(file);\n        }\n      }\n    }, 100);\n  };\n\n  const handleDrop = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n\n    const droppedFile = e.dataTransfer.files?.[0];\n    if (!droppedFile) return;\n\n    handleFile(droppedFile);\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (!selectedFile) return;\n    handleFile(selectedFile);\n  };\n\n  const removeFile = () => {\n    clearFile();\n    setPreview(null);\n    setUploadProgress(0);\n  };\n\n  return (\n    <div className=\"w-full max-w-md space-y-2\">\n      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n        Upload file\n      </label>\n      <div\n        className={`relative group cursor-pointer rounded-lg border-2 border-dashed transition-colors duration-200 ${\n          isDragging\n            ? \"border-indigo-500 bg-indigo-50 dark:bg-indigo-500/10\"\n            : \"border-gray-200 dark:border-gray-800\"\n        }`}\n        onDragOver={(e) => {\n          e.preventDefault();\n          setIsDragging(true);\n        }}\n        onDragLeave={() => setIsDragging(false)}\n        onDrop={handleDrop}\n        onClick={() => fileInputRef.current?.click()}\n        onKeyDown={(e: KeyboardEvent<HTMLDivElement>) => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            fileInputRef.current?.click();\n          }\n        }}\n        tabIndex={0}\n        aria-label=\"Upload file\"\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleChange}\n          className=\"hidden\"\n        />\n\n        <div className=\"p-8 space-y-4\">\n          {!fileName ? (\n            <div className=\"flex flex-col items-center gap-2\">\n              <ArrowUpTrayIcon className=\"w-8 h-8 text-gray-400 dark:text-gray-500\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Drag and drop or click to upload\n              </p>\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-4\">\n              {preview ? (\n                <div className=\"relative w-16 h-16 rounded-lg overflow-hidden\">\n                  <img\n                    src={preview}\n                    alt=\"Preview\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              ) : (\n                <div className=\"w-16 h-16 rounded-lg bg-gray-100 dark:bg-gray-800 flex items-center justify-center\">\n                  <DocumentIcon className=\"w-8 h-8 text-gray-400\" />\n                </div>\n              )}\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium truncate\">\n                  {fileName || \"No file selected\"}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {(fileSize / 1024 / 1024).toFixed(2)} MB\n                </p>\n                {uploadProgress < 100 && (\n                  <div className=\"mt-2 h-1 w-full bg-gray-100 dark:bg-gray-800 rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-indigo-500 transition-all duration-200\"\n                      style={{ width: `${uploadProgress}%` }}\n                    />\n                  </div>\n                )}\n              </div>\n              <button\n                type=\"button\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  removeFile();\n                }}\n                className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded\"\n              >\n                <XMarkIcon className=\"w-5 h-5 text-gray-400\" />\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Input_03;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for an OTP input field with six digit inputs.", "completion": "```tsx\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\n\nconst OTP_LENGTH = 6;\n\nconst Input_06: React.FC = () => {\n  const [completion, setcompletion] = useState<string[]>(Array(OTP_LENGTH).fill(\"\"));\n  const [activeIndex, setActiveIndex] = useState(0);\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n  const [shake, setShake] = useState(false);\n\n  useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, OTP_LENGTH);\n  }, []);\n\n  const handleChange = (index: number, value: string) => {\n    if (!/^\\d*$/.test(value)) return;\n\n    const newcompletion = [...completion];\n    newcompletion[index] = value.slice(-1);\n    setcompletion(newcompletion);\n\n    if (value && index < OTP_LENGTH - 1) {\n      inputRefs.current[index + 1]?.focus();\n      setActiveIndex(index + 1);\n    }\n  };\n\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (e.key === \"Backspace\") {\n      if (completion[index] === \"\") {\n        if (index > 0) {\n          inputRefs.current[index - 1]?.focus();\n          setActiveIndex(index - 1);\n        }\n      } else {\n        const newcompletion = [...completion];\n        newcompletion[index] = \"\";\n        setcompletion(newcompletion);\n      }\n    } else if (e.key === \"ArrowLeft\" && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n      setActiveIndex(index - 1);\n    } else if (e.key === \"ArrowRight\" && index < OTP_LENGTH - 1) {\n      inputRefs.current[index + 1]?.focus();\n      setActiveIndex(index + 1);\n    }\n  };\n\n  const handlePaste = (e: React.ClipboardEvent) => {\n    e.preventDefault();\n    const pasted = e.clipboardData.getData(\"text/plain\").slice(0, OTP_LENGTH);\n    if (!/^\\d+$/.test(pasted)) {\n      setShake(true);\n      setTimeout(() => setShake(false), 600);\n      return;\n    }\n\n    const newcompletion = [...completion];\n    pasted.split(\"\").forEach((char, i) => {\n      newcompletion[i] = char;\n    });\n\n    setcompletion(newcompletion);\n\n    const last = Math.min(pasted.length, OTP_LENGTH - 1);\n    inputRefs.current[last]?.focus();\n    setActiveIndex(last);\n  };\n\n  const setInputRef = useCallback(\n    (index: number) => (el: HTMLInputElement | null) => {\n      inputRefs.current[index] = el;\n    },\n    []\n  );\n\n  return (\n    <div className=\"w-full max-w-sm space-y-2\">\n      <fieldset\n        className={`flex flex-col gap-2 ${\n          shake ? \"animate-shake\" : \"\"\n        }`}\n      >\n        <legend className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n          Verification completion\n        </legend>\n\n        <div className=\"flex gap-2 items-center justify-start\">\n          {Array.from({ length: OTP_LENGTH }).map((_, index) => (\n            <div key={index} className=\"relative\">\n              <input\n                id={`otp-input-${index}`}\n                ref={setInputRef(index)}\n                type=\"text\"\n                inputMode=\"numeric\"\n                autoComplete=\"one-time-completion\"\n                maxLength={1}\n                value={completion[index]}\n                onChange={(e) => handleChange(index, e.target.value)}\n                onKeyDown={(e) => handleKeyDown(index, e)}\n                onPaste={handlePaste}\n                onFocus={() => setActiveIndex(index)}\n                className={`w-12 h-14 text-center text-lg font-semibold rounded-lg border transition-all duration-200 bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-800 ${\n                  activeIndex === index\n                    ? \"border-blue-500 dark:border-blue-500\"\n                    : \"\"\n                } focus:outline-none focus:ring-2 focus:ring-blue-500/20`}\n                aria-label={`Digit ${index + 1}`}\n              />\n              {index < OTP_LENGTH - 1 && (\n                <div className=\"absolute top-1/2 -right-2 w-2 transform -translate-y-1/2\">\n                  <div className=\"w-1 h-1 rounded-full bg-gray-300 dark:bg-gray-600\" />\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </fieldset>\n    </div>\n  );\n};\n\nexport default Input_06;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a currency transfer form with success message and transfer details.", "completion": "```tsx\nimport React, { useState, ChangeEvent, FC } from 'react';\n\ninterface NumericInputProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  defaultValue?: number;\n}\n\nconst Input_04: FC<NumericInputProps> = ({\n  min = 0,\n  max = 100,\n  step = 1,\n  defaultValue = 50,\n}) => {\n  const [value, setValue] = useState<number>(defaultValue);\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n\n  const percentage = ((value - min) / (max - min)) * 100;\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const newValue = parseFloat(e.target.value);\n    if (!isNaN(newValue)) {\n      const clampedValue = Math.max(min, Math.min(max, newValue));\n      setValue(clampedValue);\n    }\n  };\n\n  const incrementValue = (): void => {\n    setValue(prev => Math.min(prev + step, max));\n  };\n\n  const decrementValue = (): void => {\n    setValue(prev => Math.max(prev - step, min));\n  };\n\n  return (\n    <div className=\"w-full max-w-xs\">\n      <div className=\"relative\">\n        <div\n          className={`flex items-center rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-black/5 ${\n            isFocused ? 'ring-2 ring-gray-300 dark:ring-gray-700' : ''\n          }`}\n        >\n          <button\n            type=\"button\"\n            onClick={decrementValue}\n            className=\"px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 \n            text-gray-500 dark:text-gray-400 transition-colors\"\n            aria-label=\"Decrement\"\n          >\n            ?\n          </button>\n          <input\n            type=\"number\"\n            value={value}\n            onChange={handleChange}\n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n            min={min}\n            max={max}\n            step={step}\n            className=\"w-full text-center border-none bg-transparent focus:outline-none \n            text-gray-900 dark:text-gray-100\"\n            aria-label=\"Numeric input\"\n          />\n          <button\n            type=\"button\"\n            onClick={incrementValue}\n            className=\"px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 \n            text-gray-500 dark:text-gray-400 transition-colors\"\n            aria-label=\"Increment\"\n          >\n            +\n          </button>\n        </div>\n\n        <div className=\"mt-2 h-1.5 rounded-full bg-gray-100 dark:bg-gray-800 overflow-hidden\">\n          <div\n            className=\"h-full bg-gray-300 dark:bg-gray-600 transition-all duration-200\"\n            style={{ width: `${percentage}%` }}\n          />\n        </div>\n\n        <div className=\"mt-1 flex justify-between text-xs text-gray-400 dark:text-gray-500\">\n          <span>{min}</span>\n          <span>{max}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Input_04;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that splits text on hover while maintaining layout size with hidden text.", "completion": "```tsx\nuse client';\n\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport Image from \"next/image\";\nimport { useState } from \"react\";\n\nconst MAX_TEAM_SIZE = 4;\nconst avatarUrls = [\n  \"https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-01-n0x8HFv8EUetf9z6ht0wScJKoTHqf8.png\",\n  \"https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-02-albo9B0tWOSLXCVZh9rX9KFxXIVWMr.png\",\n  \"https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-03-JateJIUhtd3PXynaMG9TDWQ55j5AVP.png\",\n  \"https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-04-uuYHWIRvVPi01gEt6NwnGyjqLeeZhz.png\",\n] as const;\n\nconst animations = {\n  container: {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: -20 },\n  },\n  avatar: {\n    initial: { opacity: 0, scale: 0.8 },\n    animate: { opacity: 1, scale: 1, transition: { duration: 0.3 } },\n    exit: { opacity: 0, scale: 0.8, transition: { duration: 0.15 } },\n  },\n  vibration: {\n    initial: { x: 0 },\n    vibrate: { x: [-5, 5, -5, 5, 0], transition: { duration: 0.3 } },\n  },\n} as const;\n\nconst Input09 = (): JSX.Element => {\n  const [peopleCount, setPeopleCount] = useState<number>(1);\n  const [isVibrating, setIsVibrating] = useState<boolean>(false);\n\n  const triggerVibration = () => {\n    setIsVibrating(true);\n    setTimeout(() => setIsVibrating(false), 300);\n  };\n\n  const handleIncrement = () => {\n    if (peopleCount < MAX_TEAM_SIZE) {\n      setPeopleCount(prev => prev + 1);\n    } else {\n      triggerVibration();\n    }\n  };\n\n  const handleDecrement = () => {\n    if (peopleCount > 1) {\n      setPeopleCount(prev => prev - 1);\n    } else {\n      triggerVibration();\n    }\n  };\n\n  return (\n    <motion.div\n      variants={animations.container}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      className=\"flex w-full flex-col items-center justify-center gap-8\"\n    >\n      <div className=\"relative h-24 w-full flex justify-center\">\n        <AnimatePresence mode=\"popLayout\">\n          {Array.from({ length: peopleCount }).map((_, i) => (\n            <motion.div\n              key={i}\n              variants={animations.avatar}\n              initial=\"initial\"\n              animate=\"animate\"\n              exit=\"exit\"\n              className=\"flex items-center justify-center\"\n              style={{\n                zIndex: peopleCount - i,\n                marginLeft: i === 0 ? 0 : -24,\n              }}\n            >\n              <Image\n                src={avatarUrls[i % avatarUrls.length]}\n                width={96}\n                height={96}\n                alt={`Team member ${i + 1}`}\n                className=\"rounded-full object-cover\"\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n\n      <motion.div\n        variants={isVibrating ? animations.vibration : undefined}\n        initial=\"initial\"\n        animate={isVibrating ? \"vibrate\" : \"initial\"}\n        className=\"flex items-center gap-8\"\n      >\n        <button\n          type=\"button\"\n          onClick={handleDecrement}\n          className=\"h-12 w-12 rounded-full border border-gray-200 dark:border-gray-800 \n            bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800/50 \n            text-gray-900 dark:text-gray-100 cursor-pointer\"\n          aria-label=\"Decrease team size\"\n        >\n          <span className=\"text-2xl font-medium\">?</span>\n        </button>\n\n        <motion.span\n          key={peopleCount}\n          variants={animations.container}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n          className=\"text-2xl font-medium text-gray-900 dark:text-gray-100\"\n        >\n          {peopleCount}\n        </motion.span>\n\n        <button\n          type=\"button\"\n          onClick={handleIncrement}\n          className=\"h-12 w-12 rounded-full border border-gray-200 dark:border-gray-800 \n            bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800/50 \n            text-gray-900 dark:text-gray-100 cursor-pointer\"\n          aria-label=\"Increase team size\"\n        >\n          <span className=\"text-2xl font-medium\">+</span>\n        </button>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default Input09;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a tag input with suggestions and a customizable swoosh effect.", "completion": "```tsx\nuse client';\n\nimport { X, Check, Plus } from \"lucide-react\";\nimport React, { useState, useRef, KeyboardEvent, useEffect } from \"react\";\n\n// Dummy hooks to simulate your `useTags` and `useClickOutside` behavior\n// Replace with your actual imports in real project\nfunction useTags({ defaultTags = [], maxTags = 10, onChange }) {\n  const [tags, setTags] = useState(defaultTags);\n\n  const addTag = (tag) => {\n    if (tags.length >= maxTags || tags.find((t) => t.id === tag.id)) return;\n    const newTags = [...tags, tag];\n    setTags(newTags);\n    onChange?.(newTags);\n  };\n\n  const removeTag = (tag) => {\n    const newTags = tags.filter((t) => t.id !== tag.id);\n    setTags(newTags);\n    onChange?.(newTags);\n  };\n\n  const removeLastTag = () => {\n    if (tags.length > 0) {\n      const newTags = tags.slice(0, -1);\n      setTags(newTags);\n      onChange?.(newTags);\n    }\n  };\n\n  return { tags, addTag, removeTag, removeLastTag };\n}\n\nfunction useClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      if (!ref.current || ref.current.contains(event.target)) return;\n      handler(event);\n    };\n    document.addEventListener(\"mousedown\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n    };\n  }, [ref, handler]);\n}\n\n// --- Tag type & styles ---\ninterface Tag {\n  id: string;\n  label: string;\n  color?: string;\n}\n\ninterface TagInputProps {\n  onChange?: (tags: Tag[]) => void;\n  defaultTags?: Tag[];\n  suggestions?: Tag[];\n  maxTags?: number;\n  label?: string;\n  placeholder?: string;\n  error?: string;\n}\n\nconst defaultKokonutTag: Tag = {\n  id: \"kokonut-ui\",\n  label: \"KokonutUI\",\n  color: \"bg-indigo-100 text-indigo-700 border border-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:border-indigo-700/30\",\n};\n\nexport const Input_02: React.FC<TagInputProps> = ({\n  onChange,\n  defaultTags = [defaultKokonutTag],\n  suggestions = [\n    { id: \"nextjs\", label: \"Next.js\" },\n    { id: \"react\", label: \"React\" },\n    { id: \"tailwind\", label: \"Tailwind\" },\n  ],\n  maxTags = 10,\n  label = \"Tags\",\n  placeholder = \"Add tags...\",\n  error,\n}) => {\n  const { tags, addTag, removeTag, removeLastTag } = useTags({\n    onChange,\n    defaultTags,\n    maxTags,\n  });\n\n  const [input, setInput] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const filteredSuggestions = suggestions.filter(\n    (s) =>\n      s.label.toLowerCase().includes(input.toLowerCase()) &&\n      !tags.find((t) => t.id === s.id)\n  );\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && filteredSuggestions[selectedIndex]) {\n      addTag(filteredSuggestions[selectedIndex]);\n      setInput(\"\");\n      setIsOpen(false);\n    } else if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      setSelectedIndex((prev) =>\n        prev < filteredSuggestions.length - 1 ? prev + 1 : prev\n      );\n    } else if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n      setSelectedIndex((prev) => (prev > 0 ? prev - 1 : 0));\n    } else if (e.key === \"Backspace\" && input === \"\") {\n      removeLastTag();\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n    setIsOpen(true);\n    setSelectedIndex(0);\n  };\n\n  const handleSelectSuggestion = (tag: Tag) => {\n    addTag(tag);\n    setInput(\"\");\n    setIsOpen(false);\n  };\n\n  useClickOutside(containerRef, () => setIsOpen(false));\n\n  return (\n    <div ref={containerRef} className=\"w-full max-w-lg\">\n      <label className=\"block mb-2 text-sm font-medium text-gray-700 dark:text-white\">\n        {label}\n      </label>\n\n      <div className=\"flex flex-wrap gap-2 p-2 border rounded-md dark:border-gray-700\">\n        {tags.map((tag) => (\n          <span\n            key={tag.id}\n            className={`inline-flex items-center gap-1 px-2 py-1 text-sm rounded-md ${tag.color || \"bg-gray-200 dark:bg-gray-700 text-black dark:text-white\"}`}\n          >\n            {tag.label}\n            <button\n              onClick={() => removeTag(tag)}\n              className=\"text-xs hover:text-red-500\"\n            >\n              <X size={14} />\n            </button>\n          </span>\n        ))}\n\n        <input\n          type=\"text\"\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          className=\"flex-grow min-w-[120px] bg-transparent focus:outline-none text-sm dark:text-white\"\n        />\n      </div>\n\n      {isOpen && filteredSuggestions.length > 0 && (\n        <ul className=\"mt-1 border rounded-md bg-white dark:bg-gray-800 shadow-lg max-h-40 overflow-auto text-sm\">\n          {filteredSuggestions.map((tag, index) => (\n            <li\n              key={tag.id}\n              onClick={() => handleSelectSuggestion(tag)}\n              className={`flex items-center justify-between px-3 py-2 cursor-pointer ${\n                index === selectedIndex\n                  ? \"bg-blue-100 dark:bg-gray-700\"\n                  : \"hover:bg-gray-100 dark:hover:bg-gray-700\"\n              }`}\n            >\n              {tag.label}\n              <Check\n                className={`w-4 h-4 ${\n                  tags.find((t) => t.id === tag.id) ? \"block\" : \"invisible\"\n                }`}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {error && <p className=\"mt-1 text-sm text-red-500\">{error}</p>}\n    </div>\n  );\n};\n\nexport default Input_02;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays stylized text with hover-responsive shadows.", "completion": "```tsx\nimport { FC, useState } from \"react\";\nimport { ChevronRight, ChevronLeft } from \"lucide-react\";\n\ninterface EmotionFaceProps {\n  value: number;\n}\n\ninterface MoodState {\n  value: number;\n  label: string;\n  color: string;\n}\n\nconst moodStates: MoodState[] = [\n  { value: 0, label: \"Not Happy\", color: \"red-600\" },\n  { value: 50, label: \"Good\", color: \"yellow-500\" },\n  { value: 100, label: \"Very Good\", color: \"green-500\" },\n];\n\nconst EmotionFace: FC<EmotionFaceProps> = ({ value }) => {\n  // Logic here remains the same\n  // ...\n\n  return (\n    <svg\n      width=\"160\"\n      height=\"160\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"transition-all duration-300 ease-in-out\"\n    >\n      {/* Other elements here */}\n      {/* Use Tailwind classes for colors e.g., text-red-600 */}\n    </svg>\n  );\n};\n\nconst Input_10: FC = () => {\n  const [value, setValue] = useState(100);\n\n  const adjustValue = (direction: \"left\" | \"right\") => {\n    // Logic here remains the same\n    // ...\n  };\n\n  return (\n    <div className=\"w-full max-w-sm space-y-4\">\n      <div className=\"relative flex items-center justify-center gap-8 py-4\">\n        <button\n          type=\"button\"\n          onClick={() => adjustValue(\"left\")}\n          disabled={value === 0}\n          className={`p-2 rounded-full transition-colors ${value === 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-100 text-gray-500 hover:text-gray-700'}`}\n        >\n          <ChevronLeft className=\"w-6 h-6\" />\n        </button>\n\n        <EmotionFace value={value} />\n\n        <button\n          type=\"button\"\n          onClick={() => adjustValue(\"right\")}\n          disabled={value === 100}\n          className={`p-2 rounded-full transition-colors ${value === 100 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-100 text-gray-500 hover:text-gray-700'}`}\n        >\n          <ChevronRight className=\"w-6 h-6\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Input_10;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn input component with clear and success/error indicators, including a clear button.", "completion": "```tsx\nimport React, { FC, useState, useRef, ChangeEvent } from \"react\";\nimport { X, Check } from \"lucide-react\";\n\ninterface SimpleInputProps {\n    label?: string;\n    placeholder?: string;\n    error?: string;\n    success?: string;\n    onChange?: (value: string) => void;\n    onClear?: () => void;\n    type?: \"text\" | \"email\" | \"password\" | \"search\";\n}\n\nexport const Input_01: FC<SimpleInputProps> = ({\n    label = \"Label\",\n    placeholder = \"Type something...\",\n    error,\n    success,\n    onChange,\n    onClear,\n    type = \"text\",\n}) => {\n    const [value, setValue] = useState<string>(\"\");\n    const [isFocused, setIsFocused] = useState<boolean>(false);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const handleClear = (): void => {\n        setValue(\"\");\n        onClear?.();\n        inputRef.current?.focus();\n    };\n\n    const handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        setValue(e.target.value);\n        onChange?.(e.target.value);\n    }\n\n    return (\n        <div className=\"w-full max-w-xs space-y-1.5\">\n            <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\" htmlFor={label} >\n                {label}\n            </label>\n\n            <div className=\"relative group\">\n                <input\n                    ref={inputRef}\n                    type={type}\n                    value={value}\n                    onChange={handleOnChange}\n                    onFocus={() => setIsFocused(true)}\n                    onBlur={() => setIsFocused(false)}\n                    placeholder={placeholder}\n                    className={`w-full px-3 py-2 rounded-lg bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 text-sm text-gray-900 dark:text-gray-100 placeholder:gray-400 dark:placeholder:gray-600 transition-all duration-200 focus:outline-none ${isFocused ? \"border-blue-500\" : \"\"} ${error ? \"border-red-500 focus:ring-red-500/20\" : success ? \"border-green-500 focus:ring-green-500/20\" : \"focus:ring-blue-500/20\"}`} \n                />\n\n                {/* Clear button */}\n                {value && (\n                    <button onClick={handleClear} className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 rounded-md text-gray-400 hover:text-gray-600 dark:text-gray-600 dark:hover:text-gray-400 transition-colors\">\n                        <X className=\"w-4 h-4\" />\n                    </button>\n                )}\n\n                {/* Status indicator */}\n                <div className={`absolute -right-4 top-1/2 transform -translate-y-1/2 transition-opacity duration-200 ${!error && !success ? \"opacity-0\" : \"\"}`}>\n                    {error ? (\n                        <X className=\"w-4 h-4 text-red-500\" />\n                    ) : success ? (\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                    ) : null}\n                </div>\n            </div>\n\n            {/* Error/Success message */}\n            {(error || success) && (\n                <p className={`text-sm ${error ? \"text-red-500\" : \"text-green-500\"}`}>\n                    {error || success}\n                </p>\n            )}\n        </div>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for an animated text input that scales and moves characters on hover.", "completion": "```tsx\nimport React, { FC, useState } from 'react';\nimport { Check, Copy } from \"lucide-react\";\nimport { useCopyToClipboard } from \"@/hooks/use-copy-to-clipboard\";\n\ninterface ColorInputProps {\n  onChange?: (color: string) => void;\n  defaultValue?: string;\n  swatches?: string[]; \n  showOpacity?: boolean;\n  label?: string;\n}\n\nconst Input_08: FC<ColorInputProps> = ({ onChange, defaultValue = \"#3b82f6\", swatches = defaultSwatches, showOpacity = true, label = \"Color\" }) => {\n  const [color, setColor] = useState<string>(defaultValue);\n  const [opacity, setOpacity] = useState<number>(100);\n  const { isCopied, copyToClipboard } = useCopyToClipboard();\n\n  const finalColor = generateFinalColor(color, opacity);\n\n  const updateFinalColor = (newColor: string, newOpacity: number = opacity): void => {\n    const updatedColor = generateFinalColor(newColor, newOpacity);\n    setColor(newColor);\n    if (onChange) onChange(updatedColor); \n  };\n\n  const updateOpacity = (newOpacity: number): void => {\n    setOpacity(newOpacity);\n    if (onChange) onChange(generateFinalColor(color, newOpacity)); \n  };\n\n  const handleCopy = (): void => {\n    copyToClipboard(finalColor); \n  };\n\n  return (\n    <div className=\"w-full max-w-xs space-y-2 relative z-10 min-h-[200px]\">\n      {label && (\n        <label htmlFor=\"color-input\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n          {label}\n        </label>\n      )}\n\n      <div className=\"p-3 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg\">\n        <div className=\"flex gap-2 items-center\">\n          <div className=\"w-8 h-8 rounded-md border border-gray-200 dark:border-gray-700 bg-blue-700\" />\n          <input\n            id=\"color-input\"\n            type=\"text\"\n            value={finalColor.toUpperCase()}\n            onChange={(e) => {\n              const value = e.target.value.slice(0, 7);\n              if (/^#[0-9A-F]{6}$/i.test(value)) {\n                updateFinalColor(value);\n              }\n            }}\n            className=\"flex-1 px-2 py-1 rounded-md border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-900 text-sm font-mono focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n          <button type=\"button\" onClick={handleCopy} className=\"ml-2 hover:opacity-70\">\n            {isCopied ? (\n              <Check className=\"w-4 h-4 text-green-500\" />\n            ) : (\n              <Copy className=\"w-4 h-4 text-gray-500\" />\n            )}\n          </button>\n        </div>\n\n        {showOpacity && (\n          <div className=\"mt-4 space-y-1.5\">\n            <div className=\"flex justify-between text-xs\">\n              <span>Opacity</span>\n              <span>{opacity}%</span>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={opacity.toString()}\n              onChange={(e) => updateOpacity(Number(e.target.value))}\n              className=\"w-full h-2 rounded-full appearance-none bg-gradient-to-r from-transparent to-current cursor-pointer\"\n              style={{ color }}\n            />\n          </div>\n        )}\n\n        <div className=\"mt-4 space-y-1.5\">\n          <div className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Swatches</div>\n          <div className=\"grid grid-cols-6 gap-1\">\n            {swatches.map((swatch) => (\n              <button\n                type=\"button\"\n                key={swatch}\n                onClick={() => updateFinalColor(swatch)}\n                className=\"w-6 h-6 rounded-md border border-gray-200 dark:border-gray-700 transition-transform hover:scale-110 relative\"\n                style={{ backgroundColor: swatch }}\n              >\n                {color === swatch && (\n                  <Check\n                    className=\"w-4 h-4 absolute inset-0 m-auto text-white drop-shadow-md\"\n                  />\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Input_08;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that features a password input with strength indicators and a toggle for visibility.", "completion": "```tsx\nimport React, { useState, ChangeEvent } from \"react\";\nimport { Eye, EyeOff, Check, X } from \"lucide-react\";\n\ninterface PasswordRequirement {\n    label: string;\n    test: (v: string) => boolean;\n}\n\nconst passwordRequirements: PasswordRequirement[] = [\n    { label: \"8+ characters\", test: (v: string) => v.length >= 8 },\n    { label: \"Number\", test: (v: string) => /\\d/.test(v) },\n    { label: \"Lowercase\", test: (v: string) => /[a-z]/.test(v) },\n    { label: \"Uppercase\", test: (v: string) => /[A-Z]/.test(v) },\n    {\n        label: \"Special (!@#$)\",\n        test: (v: string) => /[!@#$%^&*(),.?\":{}|<>]/.test(v),\n    },\n];\n\nconst Input_05: React.FC = () => {\n    const [value, setValue] = useState(\"\");\n    const [showPassword, setShowPassword] = useState(false);\n\n    const getStrength = (value: string): number => {\n        if (!value) return 0;\n        return (\n            passwordRequirements.filter((req) => req.test(value)).length * 20\n        );\n    };\n\n    const strength = getStrength(value);\n    const strengthLabel =\n        strength <= 40 ? \"Weak\" : strength <= 80 ? \"Medium\" : \"Strong\";\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value);\n    };\n\n    return (\n        <div className=\"w-full space-y-2\">\n            <label\n                htmlFor=\"input-06\"\n                className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n            >\n                Label\n            </label>\n\n            <div className=\"relative\">\n                <input\n                    id=\"input-06\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={value}\n                    onChange={handleInputChange}\n                    placeholder=\"Enter your password\"\n                    className=\"w-full px-3 py-2 pr-10 rounded-md border border-gray-200 dark:border-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-900 dark:focus:ring-gray-100 bg-white dark:bg-black/5 transition-colors\"\n                />\n                <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    aria-label={\n                        showPassword ? \"Hide password\" : \"Show password\"\n                    }\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-900 dark:text-gray-500 dark:hover:text-gray-100 transition-colors\"\n                >\n                    {showPassword ? (\n                        <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                        <Eye className=\"w-4 h-4\" />\n                    )}\n                </button>\n            </div>\n\n            {value && (\n                <div className=\"space-y-1\">\n                    <div className=\"h-1 w-full bg-gray-100 dark:bg-gray-800 rounded-full\">\n                        <div\n                            className=\"h-full bg-gray-900 dark:bg-gray-100 transition-all duration-300\"\n                            style={{ width: `${strength}%` }}\n                        />\n                    </div>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Strength:{\" \"}\n                        <span className=\"font-medium\">{strengthLabel}</span>\n                    </p>\n                </div>\n            )}\n\n            <div className=\"space-y-1.5 text-sm text-gray-500 dark:text-gray-400\">\n                {passwordRequirements.map(({ label, test }) => (\n                    <div key={label} className=\"flex items-center gap-2\">\n                        {test(value) ? (\n                            <Check className=\"w-3.5 h-3.5 text-gray-900 dark:text-gray-100\" />\n                        ) : (\n                            <X className=\"w-3.5 h-3.5\" />\n                        )}\n                        <span>{label}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Input_05;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a pricing table with tiers, features, and a call-to-action button.", "completion": "```tsx\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Pencil, Star, Sparkles } from \"lucide-react\";\nimport React from 'react';\n\ninterface PricingTier {\n    name: string;\n    icon: React.ReactNode;\n    price: number;\n    description: string;\n    features: string[];\n    popular?: boolean;\n    color: string;\n}\n\ninterface Pricing_06Props {\n    tag?: string;\n    title?: string;\n    description?: string;\n    tiers: PricingTier[];\n}\n\nexport const Pricing_06: React.FC<Pricing_06Props> = ({\n    tag = \"Simple Pricing\",\n    title = \"Make Short Videos That Pop\",\n    description = \"Edit, enhance, and go viral in minutes\",\n    tiers,\n}) => {\n    return (\n        <div className=\"w-full max-w-6xl mx-auto px-4\">\n            <div className=\"text-center space-y-6 mb-16\">\n                <div className=\"font-handwritten text-xl text-blue-500 rotate-[-1deg]\">\n                    {tag}\n                </div>\n                <div className=\"relative\">\n                    <h2 className=\"text-4xl md:text-5xl font-bold font-handwritten text-zinc-900 dark:text-white rotate-[-1deg]\">\n                        {title}\n                        <div className=\"absolute -right-12 top-0 text-amber-500 rotate-12\">\n                            âœ¨\n                        </div>\n                        <div className=\"absolute -left-8 bottom-0 text-blue-500 -rotate-12\">\n                            â­ï¸\n                        </div>\n                    </h2>\n                    <div\n                        className=\"absolute -bottom-4 left-1/2 -translate-x-1/2 w-44 h-3 bg-blue-500/20 \n                        rotate-[-1deg] rounded-full blur-sm\"\n                    />\n                </div>\n                <p className=\"font-handwritten text-xl text-zinc-600 dark:text-zinc-400 rotate-[-1deg]\">\n                    {description}\n                </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                {tiers.map((tier, index) => (\n                    <div\n                        key={tier.name}\n                        className={`relative group transition-all duration-300 ${index === 0 ? \"rotate-[-1deg]\" : \"\"} ${index === 1 ? \"rotate-[1deg]\" : \"\"} ${index === 2 ? \"rotate-[-2deg]\" : \"\"}`}\n                    >\n                        <div\n                            className={`absolute inset-0 bg-white dark:bg-zinc-900 border-2 border-zinc-900 dark:border-white rounded-lg shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white transition-all duration-300 group-hover:shadow-[8px_8px_0px_0px] group-hover:translate-x-[-4px] group-hover:translate-y-[-4px]`}\n                        />\n                        <div className=\"relative p-6\">\n                            {tier.popular && (\n                                <div\n                                    className=\"absolute -top-2 -right-2 bg-amber-400 text-zinc-900 \n                                    font-handwritten px-3 py-1 rounded-full rotate-12 text-sm border-2 border-zinc-900\"\n                                >\n                                    Popular!\n                                </div>\n                            )}\n                            <div className=\"mb-6\">\n                                <div\n                                    className={`w-12 h-12 rounded-full mb-4 flex items-center justify-center border-2 border-zinc-900 dark:border-white text-${tier.color}-500`}\n                                >\n                                    {tier.icon}\n                                </div>\n                                <h3 className=\"font-handwritten text-2xl text-zinc-900 dark:text-white\">\n                                    {tier.name}\n                                </h3>\n                                <p className=\"font-handwritten text-zinc-600 dark:text-zinc-400\">\n                                    {tier.description}\n                                </p>\n                            </div>\n                            <div className=\"mb-6 font-handwritten\">\n                                <span className=\"text-4xl font-bold text-zinc-900 dark:text-white\">\n                                    ${tier.price}\n                                </span>\n                                <span className=\"text-zinc-600 dark:text-zinc-400\">\n                                    /month\n                                </span>\n                            </div>\n                            <div className=\"space-y-3 mb-6\">\n                                {tier.features.map((feature) => (\n                                    <div\n                                        key={feature}\n                                        className=\"flex items-center gap-3\"\n                                    >\n                                        <div\n                                            className=\"w-5 h-5 rounded-full border-2 border-zinc-900 \n                                            dark:border-white flex items-center justify-center\"\n                                        >\n                                            <Check className=\"w-3 h-3\" />\n                                        </div>\n                                        <span className=\"font-handwritten text-lg text-zinc-900 dark:text-white\">\n                                            {feature}\n                                        </span>\n                                    </div>\n                                ))}\n                            </div>\n                            <Button\n                                className={`w-full h-12 font-handwritten text-lg relative border-2 border-zinc-900 dark:border-white transition-all duration-300 shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white hover:shadow-[6px_6px_0px_0px] hover:translate-x-[-2px] hover:translate-y-[-2px] ${tier.popular ? \"bg-amber-400 text-zinc-900 hover:bg-amber-300 active:bg-amber-400 dark:hover:bg-amber-300 dark:active:bg-amber-400\" : \"bg-zinc-50 dark:bg-zinc-800 text-zinc-900 dark:text-white hover:bg-white dark:hover:bg-zinc-700 active:bg-zinc-50 dark:active:bg-zinc-800\"}`}\n                            >\n                                Get Started\n                            </Button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <div className=\"absolute -z-10 inset-0 overflow-hidden\">\n                <div className=\"absolute top-40 left-20 text-4xl rotate-12\">\n                    âœŽ\n                </div>\n                <div className=\"absolute bottom-40 right-20 text-4xl -rotate-12\">\n                    âœï¸\n                </div>\n            </div>\n        </div>\n    );\n}\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a pricing table with tiers, features, and toggle for monthly/yearly billing.", "completion": "```tsx\nimport { useState, FC } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, ArrowRight, Sparkles, ChartNoAxesColumn } from \"lucide-react\";\n\ninterface Feature {\n    name: string;\n    description: string;\n    included: boolean;\n}\n\ninterface PricingTier {\n    name: string;\n    icon: FC<{ className: string }>;\n    price: {\n        monthly: number;\n        yearly: number;\n    };\n    description: string;\n    features: Feature[];\n}\n\nconst tiers: PricingTier[] = [\n    // ...existing tiers\n];\n\nconst Pricing_04: FC = () => {\n    const [isYearly, setIsYearly] = useState(false);\n\n    return (\n        <div className=\"w-full max-w-7xl mx-auto px-4\">\n            <div className=\"flex justify-center mb-12\">\n                <div className=\"inline-flex items-center bg-gray-200 dark:bg-gray-700 rounded-full p-1\">\n                    {[\"Monthly\", \"Yearly\"].map((period) => (\n                        <button\n                            key={period}\n                            onClick={() => setIsYearly(period === \"Yearly\")}\n                            className={`px-6 py-2 rounded-full text-sm font-medium transition-all ${isYearly === (period === \"Yearly\") ? \"bg-white dark:bg-gray-800 text-black dark:text-white shadow-xs\" : \"text-gray-600 dark:text-gray-400 hover:text-black dark:hover:text-white\"}`}\n                        >\n                            {period}\n                        </button>\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {tiers.map((tier, index) => (\n                    <div\n                        key={tier.name}\n                        className={`relative rounded-2xl overflow-hidden bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:shadow-lg hover:border-gray-300 dark:hover:border-gray-600`}\n                    >\n                        <div className=\"p-8 pb-0\">\n                            <div className=\"flex items-center justify-between mb-4\">\n                                <div className=\"flex items-center gap-3\">\n                                    <div className=\"p-2 rounded-lg bg-gray-200 dark:bg-gray-700\">\n                                        <tier.icon className=\"w-5 h-5\" />\n                                    </div>\n                                    <h3 className=\"text-xl font-semibold\">\n                                        {tier.name}\n                                    </h3>\n                                </div>\n                            </div>\n                            \n                            <div className=\"mb-4\">\n                                <div className=\"flex items-baseline gap-1\">\n                                    <span className=\"text-4xl font-bold\">\n                                        ${isYearly ? tier.price.yearly : tier.price.monthly}\n                                    </span>\n                                    <span className=\"text-gray-500 text-sm\">\n                                        /{isYearly ? \"year\" : \"month\"}\n                                    </span>\n                                </div>\n                                <p className=\"text-sm text-gray-500 mt-2\">\n                                    {tier.description}\n                                </p>\n                            </div>\n\n                            <Button\n                                className={index === 1\n                                    ? \"w-full bg-gray-800 dark:bg-white text-white dark:text-gray-800 hover:bg-gray-700 dark:hover:bg-gray-100\"\n                                    : \"w-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600\"}\n                            >\n                                Get started\n                                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                            </Button>\n                        </div>\n\n                        <div className=\"p-8 mt-8\">\n                            <div className=\"space-y-4\">\n                                {tier.features.map((feature) => (\n                                    <div\n                                        key={feature.name}\n                                        className=\"flex items-start gap-3\"\n                                    >\n                                        <Check className=\"w-4 h-4 text-green-500\" />\n                                        <div>\n                                            <p className=\"text-sm font-medium\">\n                                                {feature.name}\n                                            </p>\n                                            <p className=\"text-sm text-gray-500\">\n                                                {feature.description}\n                                            </p>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Pricing_04;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component for a user profile form with fields for name, username, avatar, bio, and social media handles.", "completion": "```tsx\nimport React, { useState } from 'react';\nimport { motion } from 'framer-motion'; // Ensure you import from `framer-motion`\nimport { Check, Sparkles, ArrowRight, Shield, Zap, Infinity } from 'lucide-react';\n\ninterface Feature {\n    icon: React.ReactNode;\n    title: string;\n    description: string;\n    highlight?: boolean;\n}\n\nconst features: Feature[] = [\n    {\n        icon: <Infinity className=\"w-4 h-4\" />,\n        title: \"Unlimited Projects\",\n        description: \"Create as many projects as you need\",\n        highlight: true,\n    },\n    {\n        icon: <Shield className=\"w-4 h-4\" />,\n        title: \"Enterprise Security\",\n        description: \"Advanced security protocols & encryption\",\n    },\n    {\n        icon: <Zap className=\"w-4 h-4\" />,\n        title: \"Priority Access\",\n        description: \"Early access to new features\",\n        highlight: true,\n    },\n];\n\nconst Pricing_01: React.FC = () => {\n    const [isHovered, setIsHovered] = useState(false);\n\n    return (\n        <div className=\"w-full max-w-sm mx-auto\">\n            <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"group relative overflow-hidden bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-2xl transition-all duration-300 hover:shadow-lg dark:hover:shadow-xl\"\n            >\n                {/* Ambient background effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-violet-500/5 via-transparent to-transparent\" />\n\n                {/* Header */}\n                <div className=\"relative p-6 flex items-center justify-between border-b border-zinc-200 dark:border-zinc-800\">\n                    <div className=\"flex items-center gap-3\">\n                        <div className=\"relative\">\n                            <div className=\"absolute inset-0 bg-violet-500/20 blur-xl rounded-full\" />\n                            <div className=\"relative w-10 h-10 rounded-full bg-violet-100 dark:bg-violet-900/20 flex items-center justify-center\">\n                                <Sparkles className=\"w-5 h-5 text-violet-600 dark:text-violet-400\" />\n                            </div>\n                        </div>\n                        <div>\n                            <h3 className=\"text-base font-medium text-zinc-900 dark:text-zinc-100\">\n                                Enterprise Plan\n                            </h3>\n                            <p className=\"text-sm text-zinc-500 dark:text-zinc-400\">\n                                For growing teams\n                            </p>\n                        </div>\n                    </div>\n                    <div className=\"px-3 py-1 text-xs font-medium bg-violet-100 dark:bg-violet-900/20 text-violet-600 dark:text-violet-400 rounded-full\">\n                        Popular\n                    </div>\n                </div>\n\n                {/* Pricing */}\n                <div className=\"relative p-6 border-b border-zinc-200 dark:border-zinc-800\">\n                    <div className=\"flex items-baseline gap-1\">\n                        <span className=\"text-3xl font-bold text-zinc-900 dark:text-zinc-100\">\n                            $49\n                        </span>\n                        <span className=\"text-sm text-zinc-500\">/month</span>\n                    </div>\n                    <p className=\"mt-2 text-sm text-zinc-500 dark:text-zinc-400\">\n                        Everything you need to scale your business\n                    </p>\n                </div>\n\n                {/* Features */}\n                <div className=\"relative p-6 space-y-4\">\n                    {features.map((feature, index) => (\n                        <motion.div\n                            key={feature.title}\n                            initial={{ opacity: 0, x: -10 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: index * 0.1 }}\n                            className={`flex items-start gap-3 p-3 rounded-xl transition-colors ${\n                                feature.highlight ? \"bg-violet-50 dark:bg-violet-900/10\" : \"\"\n                            }`}\n                        >\n                            <div\n                                className={`w-8 h-8 rounded-full flex items-center justify-center shrink-0 ${\n                                    feature.highlight\n                                        ? \"bg-violet-100 dark:bg-violet-900/20\"\n                                        : \"bg-zinc-100 dark:bg-zinc-800\"\n                                }`}\n                            >\n                                {feature.icon}\n                            </div>\n                            <div>\n                                <h4 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n                                    {feature.title}\n                                </h4>\n                                <p className=\"text-xs text-zinc-500 dark:text-zinc-400 mt-0.5\">\n                                    {feature.description}\n                                </p>\n                            </div>\n                        </motion.div>\n                    ))}\n                </div>\n\n                {/* CTA Button */}\n                <div className=\"relative p-6 border-t border-zinc-200 dark:border-zinc-800\">\n                    <motion.button\n                        onHoverStart={() => setIsHovered(true)}\n                        onHoverEnd={() => setIsHovered(false)}\n                        whileHover={{ scale: 1.01 }}\n                        whileTap={{ scale: 0.99 }}\n                        className=\"w-full h-11 flex items-center justify-center gap-2 bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 text-sm font-medium rounded-lg transition-all duration-300 hover:bg-zinc-800 dark:hover:bg-zinc-100\"\n                    >\n                        Get started\n                        <motion.div\n                            animate={{ x: isHovered ? 4 : 0 }}\n                            transition={{\n                                type: \"spring\",\n                                stiffness: 400,\n                                damping: 10,\n                            }}\n                        >\n                            <ArrowRight className=\"w-4 h-4\" />\n                        </motion.div>\n                    </motion.button>\n                </div>\n            </motion.div>\n        </div>\n    );\n};\n\nexport default Pricing_01;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn pricing component that displays multiple pricing tiers with features and a call-to-action button.", "completion": "```tsx\nimport React from 'react';\nimport { Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\n// Define the structure of a pricing tier\ninterface PricingTier {\n    name: string;\n    price: number;\n    description: string;\n    features: string[];\n    highlight?: boolean;\n}\n\n// Default pricing data\nconst defaultTiers: PricingTier[] = [\n    {\n        name: \"Basic\",\n        price: 9,\n        description: \"Essential features for small teams\",\n        features: [\n            \"5 Team Members\",\n            \"Basic Analytics\",\n            \"Community Support\",\n            \"1GB Storage\",\n        ],\n    },\n    {\n        name: \"Pro\",\n        price: 29,\n        description: \"Everything you need to scale\",\n        highlight: true,\n        features: [\n            \"Unlimited Members\",\n            \"Advanced Analytics\",\n            \"Priority Support\",\n            \"Unlimited Storage\",\n            \"Custom Integrations\",\n        ],\n    },\n];\n\n// Functional pricing component\nconst Pricing_05: React.FC = () => {\n    return (\n        <div className=\"w-full max-w-3xl mx-auto px-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {defaultTiers.map((tier) => (\n                    <div\n                        key={tier.name}\n                        className={`relative bg-white dark:bg-black border border-zinc-200 dark:border-zinc-800 rounded-lg overflow-hidden ${\n                            tier.highlight\n                                ? \"before:absolute before:inset-0 before:border before:border-black dark:before:border-white before:rounded-lg before:pointer-events-none before:-m-[1px]\"\n                                : \"\"\n                        }`}\n                    >\n                        {/* Header */}\n                        <div className=\"p-6 border-b border-zinc-100 dark:border-zinc-800\">\n                            <div className=\"flex justify-between items-baseline mb-2\">\n                                <h3 className=\"text-sm font-medium tracking-wide uppercase\">\n                                    {tier.name}\n                                </h3>\n                                {tier.highlight && (\n                                    <span className=\"text-[10px] font-medium uppercase tracking-wider px-2 py-0.5 rounded-full bg-zinc-900 text-white dark:bg-white dark:text-black\">\n                                        Popular\n                                    </span>\n                                )}\n                            </div>\n                            <div className=\"flex items-baseline gap-1\">\n                                <span className=\"text-2xl font-semibold\">${tier.price}</span>\n                                <span className=\"text-sm text-zinc-500 dark:text-zinc-400\">/month</span>\n                            </div>\n                            <p className=\"mt-2 text-xs text-zinc-500 dark:text-zinc-400\">\n                                {tier.description}\n                            </p>\n                        </div>\n\n                        {/* Features */}\n                        <div className=\"p-6\">\n                            <div className=\"space-y-3\">\n                                {tier.features.map((feature) => (\n                                    <div\n                                        key={feature}\n                                        className=\"flex items-start gap-3 text-sm\"\n                                    >\n                                        <Check className=\"w-4 h-4 mt-0.5 text-zinc-900 dark:text-white\" />\n                                        <span>{feature}</span>\n                                    </div>\n                                ))}\n                            </div>\n\n                            {/* CTA Button */}\n                            <div className=\"mt-6\">\n                                <Button\n                                    className={`w-full h-9 text-xs font-medium tracking-wide ${\n                                        tier.highlight\n                                            ? \"bg-zinc-900 text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-100\"\n                                            : \"bg-white text-zinc-900 border border-zinc-200 hover:bg-zinc-50 dark:bg-black dark:text-white dark:border-zinc-800 dark:hover:bg-zinc-900\"\n                                    }`}\n                                >\n                                    Get started\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Pricing_05;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn component that displays a pricing table with tiers, features, and call-to-action buttons.", "completion": "```tsx\nimport React from 'react';\nimport { Check, ArrowRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface Feature {\n  name: string;\n  highlight?: boolean;\n  included: boolean;\n}\n\ninterface PricingTier {\n  name: string;\n  price: number;\n  description: string;\n  features: Feature[];\n  highlight?: boolean;\n  cta?: string;\n}\n\ninterface PricingProps {\n  tiers?: PricingTier[];\n}\n\n// Default fallback pricing tiers\nconst defaultTiers: PricingTier[] = [\n  {\n    name: 'Basic',\n    price: 49,\n    description: 'Basic features for personal use.',\n    cta: 'Get Started',\n    highlight: false,\n    features: [\n      { name: 'Access to all basic tools', included: true },\n      { name: 'Email support', included: true },\n      { name: 'Community access', included: true },\n      { name: 'Advanced analytics', included: false },\n    ],\n  },\n  {\n    name: 'Pro',\n    price: 99,\n    description: 'Advanced tools for professionals.',\n    cta: 'Upgrade Now',\n    highlight: true,\n    features: [\n      { name: 'Access to all basic tools', included: true },\n      { name: 'Email & chat support', included: true },\n      { name: 'Community access', included: true },\n      { name: 'Advanced analytics', included: true },\n    ],\n  },\n];\n\nconst Pricing: React.FC<PricingProps> = ({ tiers = defaultTiers }) => {\n  return (\n    <div className=\"w-full max-w-5xl mx-auto px-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        {tiers.map((tier) => (\n          <div\n            key={tier.name}\n            className={`relative group rounded-2xl transition-all duration-500 ${\n              tier.highlight\n                ? 'bg-gradient-to-b from-neutral-950 to-neutral-900 dark:from-neutral-900 dark:to-neutral-950'\n                : 'bg-white dark:bg-neutral-900'\n            } border border-neutral-200 dark:border-neutral-800 hover:border-neutral-300 dark:hover:border-neutral-700 hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.1)] dark:hover:shadow-[0_8px_40px_-12px_rgba(0,0,0,0.3)]`}\n          >\n            <div className=\"p-10 flex flex-col h-full\">\n              <div className=\"space-y-4\">\n                <h3\n                  className={`text-lg uppercase tracking-wider font-medium ${\n                    tier.highlight ? 'text-white' : 'text-neutral-900 dark:text-white'\n                  }`}\n                >\n                  {tier.name}\n                </h3>\n                <div className=\"flex items-baseline gap-2\">\n                  <span\n                    className={`text-5xl font-light ${\n                      tier.highlight ? 'text-white' : 'text-neutral-900 dark:text-white'\n                    }`}\n                  >\n                    ${tier.price}\n                  </span>\n                  <span\n                    className={`text-sm ${\n                      tier.highlight ? 'text-neutral-400' : 'text-neutral-500 dark:text-neutral-400'\n                    }`}\n                  >\n                    one-time\n                  </span>\n                </div>\n                <p\n                  className={`text-sm pb-6 border-b ${\n                    tier.highlight\n                      ? 'text-neutral-400 border-neutral-800'\n                      : 'text-neutral-500 dark:text-neutral-400 border-neutral-200 dark:border-neutral-800'\n                  }`}\n                >\n                  {tier.description}\n                </p>\n              </div>\n\n              <div className=\"mt-8 space-y-4 grow\">\n                {tier.features.map((feature) => (\n                  <div key={feature.name} className=\"flex items-center gap-3\">\n                    <div\n                      className={`shrink-0 w-5 h-5 rounded-full flex items-center justify-center ${\n                        feature.included\n                          ? tier.highlight\n                            ? 'text-white'\n                            : 'text-neutral-900 dark:text-white'\n                          : 'text-neutral-300 dark:text-neutral-700'\n                      }`}\n                    >\n                      <Check className=\"w-3.5 h-3.5\" />\n                    </div>\n                    <span\n                      className={`text-sm ${\n                        tier.highlight ? 'text-neutral-300' : 'text-neutral-600 dark:text-neutral-300'\n                      }`}\n                    >\n                      {feature.name}\n                    </span>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-8\">\n                <Button\n                  className={`w-full h-12 group relative ${\n                    tier.highlight\n                      ? 'bg-white hover:bg-neutral-100 text-neutral-900'\n                      : 'bg-neutral-900 hover:bg-neutral-800 text-white dark:bg-white dark:hover:bg-neutral-100 dark:text-neutral-900'\n                  } transition-all duration-300`}\n                >\n                  <span className=\"relative z-10 flex items-center justify-center gap-2 font-medium tracking-wide\">\n                    {tier.cta}\n                    <ArrowRight className=\"w-4 h-4 transition-transform group-hover:translate-x-1\" />\n                  </span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Pricing;\n```", "source": "Shadcn"}
{"prompt": "Create a Shadcn pricing component with plan selection and feature comparison.", "completion": "```tsx\nimport { useState } from \"react\";\nimport { Check, ArrowRight } from \"lucide-react\";\n\ninterface Feature {\n  name: string;\n  included: \"starter\" | \"pro\" | \"all\" | null;\n}\n\ninterface Plan {\n  name: string;\n  price: { monthly: number; yearly: number };\n  level: \"starter\" | \"pro\" | \"all\";\n}\n\nconst features: Feature[] = [\n  { name: \"Basic Analytics\", included: \"starter\" },\n  { name: \"Up to 5 team members\", included: \"starter\" },\n  { name: \"Basic support\", included: \"starter\" },\n  { name: \"Advanced Analytics\", included: \"pro\" },\n  { name: \"Up to 20 team members\", included: \"pro\" },\n  { name: \"Priority support\", included: \"pro\" },\n  { name: \"Custom integrations\", included: \"all\" },\n  { name: \"Unlimited team members\", included: \"all\" },\n  { name: \"24/7 phone support\", included: \"all\" },\n];\n\nconst plans: Plan[] = [\n  { name: \"Starter\", price: { monthly: 15, yearly: 144 }, level: \"starter\" },\n  { name: \"Pro\", price: { monthly: 49, yearly: 470 }, level: \"pro\" },\n  { name: \"Enterprise\", price: { monthly: 99, yearly: 990 }, level: \"all\" },\n];\n\nexport default function Pricing_03() {\n  const [isYearly, setIsYearly] = useState<boolean>(false);\n  const [selectedPlan, setSelectedPlan] = useState<string>(\"pro\");\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto px-4\">\n      {/* Billing period toggle */}\n      <div className=\"flex justify-end mb-4 sm:mb-8\">\n        <div className=\"inline-flex items-center gap-2 text-xs sm:text-sm\">\n          <button\n            type=\"button\"\n            onClick={() => setIsYearly(false)}\n            className={`px-3 py-1 rounded-md transition-colors ${\n              !isYearly ? \"bg-zinc-100 dark:bg-zinc-800\" : \"text-zinc-500\"\n            }`}\n          >\n            Monthly\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => setIsYearly(true)}\n            className={`px-3 py-1 rounded-md transition-colors ${\n              isYearly ? \"bg-zinc-100 dark:bg-zinc-800\" : \"text-zinc-500\"\n            }`}\n          >\n            Yearly\n          </button>\n        </div>\n      </div>\n\n      {/* Plans */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n        {plans.map((plan) => (\n          <button\n            key={plan.name}\n            type=\"button\"\n            onClick={() => setSelectedPlan(plan.level)}\n            className={`flex-1 p-4 rounded-xl text-left transition-all border border-zinc-200 dark:border-zinc-800 ${\n              selectedPlan === plan.level\n                ? \"ring-2 ring-blue-500 dark:ring-blue-400\"\n                : \"\"\n            }`}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium\">{plan.name}</span>\n              {plan.level === \"pro\" && (\n                <span className=\"text-xs bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 px-2 py-0.5 rounded-full\">\n                  Popular\n                </span>\n              )}\n            </div>\n            <div className=\"text-2xl font-bold\">\n              ${isYearly ? plan.price.yearly : plan.price.monthly}\n              <span className=\"text-sm font-normal text-zinc-500\">\n                /{isYearly ? \"year\" : \"month\"}\n              </span>\n            </div>\n          </button>\n        ))}\n      </div>\n\n      {/* Features Table */}\n      <div className=\"border border-zinc-200 dark:border-zinc-800 rounded-xl overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <div className=\"min-w-[640px] divide-y divide-zinc-200 dark:divide-zinc-800\">\n            <div className=\"flex items-center p-4 bg-zinc-50 dark:bg-zinc-900\">\n              <div className=\"flex-1 text-sm font-medium\">Features</div>\n              <div className=\"flex items-center gap-8 text-sm\">\n                {plans.map((plan) => (\n                  <div\n                    key={plan.level}\n                    className=\"w-16 text-center font-medium\"\n                  >\n                    {plan.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {features.map((feature) => (\n              <div\n                key={feature.name}\n                className={`flex items-center p-4 transition-colors ${\n                  feature.included === selectedPlan\n                    ? \"bg-blue-50/50 dark:bg-blue-900/20\"\n                    : \"\"\n                }`}\n              >\n                <div className=\"flex-1 text-sm\">{feature.name}</div>\n                <div className=\"flex items-center gap-8 text-sm\">\n                  {plans.map((plan) => (\n                    <div\n                      key={plan.level}\n                      className={`w-16 flex justify-center ${\n                        plan.level === selectedPlan ? \"font-medium\" : \"\"\n                      }`}\n                    >\n                      {shouldShowCheck(feature.included, plan.level) ? (\n                        <Check className=\"w-5 h-5 text-blue-500\" />\n                      ) : (\n                        <span className=\"text-zinc-300 dark:text-zinc-700\">-</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Call to Action Button */}\n      <div className=\"mt-8 text-center\">\n        <button className=\"w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white px-8 py-2 rounded-xl flex items-center justify-center gap-2\">\n          Get started with {plans.find((p) => p.level === selectedPlan)?.name}\n          <ArrowRight className=\"w-4 h-4\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction shouldShowCheck(included: Feature[\"included\"], level: string): boolean {\n  if (included === \"all\") return true;\n  if (included === \"pro\" && (level === \"pro\" || level === \"all\")) return true;\n  if (\n    included === \"starter\" &&\n    (level === \"starter\" || level === \"pro\" || level === \"all\")\n  )\n    return true;\n  return false;\n}\n```", "source": "Shadcn"}
